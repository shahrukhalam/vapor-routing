{"kind":"symbol","abstract":[{"text":"Adds another ","type":"text"},{"type":"codeVoice","code":"EventLoopFuture"},{"text":" producing closure to be run as soon as all previously queued future have completed, succeeded, or failed.","type":"text"}],"primaryContentSections":[{"kind":"declarations","declarations":[{"platforms":["Linux"],"tokens":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"append"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"Value"},{"kind":"text","text":">("},{"kind":"externalParam","text":"onPrevious"},{"kind":"text","text":" "},{"text":"next","kind":"internalParam"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:8AsyncKit20EventLoopFutureQueueC","text":"EventLoopFutureQueue","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/AsyncKit\/EventLoopFutureQueue","kind":"typeIdentifier"},{"text":".","kind":"text"},{"preciseIdentifier":"s:8AsyncKit20EventLoopFutureQueueC17ContinueConditionO","text":"ContinueCondition","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/AsyncKit\/EventLoopFutureQueue\/ContinueCondition","kind":"typeIdentifier"},{"text":" = .complete, ","kind":"text"},{"text":"generator","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"@escaping","kind":"keyword"},{"text":" () -> ","kind":"text"},{"preciseIdentifier":"s:7NIOCore15EventLoopFutureC","text":"EventLoopFuture","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/EventLoopFuture","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"text":"Value","kind":"typeIdentifier"},{"text":">) -> ","kind":"text"},{"preciseIdentifier":"s:7NIOCore15EventLoopFutureC","text":"EventLoopFuture","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/EventLoopFuture","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"text":"Value","kind":"typeIdentifier"},{"text":">","kind":"text"}],"languages":["swift"]}]},{"kind":"parameters","parameters":[{"content":[{"type":"paragraph","inlineContent":[{"text":"The condition that the previous future(s) must meet on thier completion for the appended future to be run.","type":"text"},{"text":" ","type":"text"},{"text":"The default value is ","type":"text"},{"code":".complete","type":"codeVoice"},{"text":".","type":"text"}]}],"name":"next"},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The closure that produces the "},{"type":"codeVoice","code":"EventLoopFuture"},{"type":"text","text":". We need a closure because otherwise the"},{"type":"text","text":" "},{"type":"text","text":"future starts running right away and the queuing doesnâ€™t do you any good."}]}],"name":"generator"}]},{"kind":"content","content":[{"anchor":"return-value","level":2,"text":"Return Value","type":"heading"},{"inlineContent":[{"type":"text","text":"The resulting future from the "},{"type":"codeVoice","code":"generator"},{"type":"text","text":" closure passed in."}],"type":"paragraph"}]},{"kind":"content","content":[{"type":"heading","level":2,"text":"Discussion","anchor":"discussion"},{"type":"codeListing","syntax":null,"code":["let model: EventLoopFuture<Model> = queue.append(generator: { Model.query(on: database).first() })"]}]}],"identifier":{"url":"doc:\/\/co.pointfree.VaporRouting\/documentation\/AsyncKit\/EventLoopFutureQueue\/append(onPrevious:generator:)","interfaceLanguage":"swift"},"schemaVersion":{"minor":3,"patch":0,"major":0},"metadata":{"title":"append(onPrevious:generator:)","role":"symbol","symbolKind":"method","modules":[{"name":"AsyncKit"}],"externalID":"s:8AsyncKit20EventLoopFutureQueueC6append10onPrevious9generator7NIOCore0cdE0CyxGAC17ContinueConditionO_AJyctlF","roleHeading":"Instance Method","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"append"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"Value"},{"kind":"text","text":">("},{"kind":"externalParam","text":"onPrevious"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:8AsyncKit20EventLoopFutureQueueC","text":"EventLoopFutureQueue"},{"kind":"text","text":"."},{"kind":"typeIdentifier","preciseIdentifier":"s:8AsyncKit20EventLoopFutureQueueC17ContinueConditionO","text":"ContinueCondition"},{"kind":"text","text":", "},{"kind":"externalParam","text":"generator"},{"kind":"text","text":": () -> "},{"kind":"typeIdentifier","preciseIdentifier":"s:7NIOCore15EventLoopFutureC","text":"EventLoopFuture"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Value"},{"kind":"text","text":">) -> "},{"kind":"typeIdentifier","preciseIdentifier":"s:7NIOCore15EventLoopFutureC","text":"EventLoopFuture"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Value"},{"kind":"text","text":">"}]},"variants":[{"paths":["\/documentation\/asynckit\/eventloopfuturequeue\/append(onprevious:generator:)"],"traits":[{"interfaceLanguage":"swift"}]}],"sections":[],"hierarchy":{"paths":[["doc:\/\/co.pointfree.VaporRouting\/documentation\/AsyncKit","doc:\/\/co.pointfree.VaporRouting\/documentation\/AsyncKit\/EventLoopFutureQueue"]]},"references":{"doc://co.pointfree.VaporRouting/documentation/AsyncKit/EventLoopFutureQueue/append(onPrevious:generator:)":{"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/AsyncKit\/EventLoopFutureQueue\/append(onPrevious:generator:)","title":"append(onPrevious:generator:)","abstract":[{"text":"Adds another ","type":"text"},{"code":"EventLoopFuture","type":"codeVoice"},{"text":" producing closure to be run as soon as all previously queued future have completed, succeeded, or failed.","type":"text"}],"fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"append","kind":"identifier"},{"text":"<","kind":"text"},{"text":"Value","kind":"genericParameter"},{"text":">(","kind":"text"},{"text":"onPrevious","kind":"externalParam"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:8AsyncKit20EventLoopFutureQueueC","text":"EventLoopFutureQueue","kind":"typeIdentifier"},{"text":".","kind":"text"},{"preciseIdentifier":"s:8AsyncKit20EventLoopFutureQueueC17ContinueConditionO","text":"ContinueCondition","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"generator","kind":"externalParam"},{"text":": () -> ","kind":"text"},{"preciseIdentifier":"s:7NIOCore15EventLoopFutureC","text":"EventLoopFuture","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"text":"Value","kind":"typeIdentifier"},{"text":">) -> ","kind":"text"},{"preciseIdentifier":"s:7NIOCore15EventLoopFutureC","text":"EventLoopFuture","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"text":"Value","kind":"typeIdentifier"},{"text":">","kind":"text"}],"url":"\/documentation\/asynckit\/eventloopfuturequeue\/append(onprevious:generator:)","role":"symbol","type":"topic","kind":"symbol"},"doc://co.pointfree.VaporRouting/documentation/AsyncKit":{"type":"topic","kind":"symbol","url":"\/documentation\/asynckit","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/AsyncKit","abstract":[],"role":"collection","title":"AsyncKit"},"doc://co.pointfree.VaporRouting/documentation/AsyncKit/EventLoopFutureQueue/ContinueCondition":{"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/AsyncKit\/EventLoopFutureQueue\/ContinueCondition","type":"topic","title":"EventLoopFutureQueue.ContinueCondition","abstract":[{"type":"text","text":"Under what conditions an appended closure should be run."}],"navigatorTitle":[{"kind":"identifier","text":"ContinueCondition"}],"url":"\/documentation\/asynckit\/eventloopfuturequeue\/continuecondition","role":"symbol","fragments":[{"kind":"keyword","text":"enum"},{"kind":"text","text":" "},{"kind":"identifier","text":"ContinueCondition"}],"kind":"symbol"},"doc://co.pointfree.VaporRouting/documentation/AsyncKit/EventLoopFutureQueue":{"kind":"symbol","fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"EventLoopFutureQueue","kind":"identifier"}],"url":"\/documentation\/asynckit\/eventloopfuturequeue","navigatorTitle":[{"text":"EventLoopFutureQueue","kind":"identifier"}],"role":"symbol","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/AsyncKit\/EventLoopFutureQueue","title":"EventLoopFutureQueue","abstract":[{"type":"text","text":"Allows you to queue closures that produce an "},{"type":"codeVoice","code":"EventLoopFuture"},{"text":", so each future only gets run if the previous ones complete, succeed, or fail.","type":"text"}],"type":"topic"},"doc://co.pointfree.VaporRouting/documentation/NIOCore/EventLoopFuture":{"url":"\/documentation\/niocore\/eventloopfuture","kind":"symbol","type":"topic","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"EventLoopFuture"}],"navigatorTitle":[{"kind":"identifier","text":"EventLoopFuture"}],"abstract":[{"type":"text","text":"Holder for a result that will be provided later."}],"role":"symbol","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/EventLoopFuture","title":"EventLoopFuture"}}}