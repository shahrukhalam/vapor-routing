{"metadata":{"symbolKind":"func","roleHeading":"Function","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"strictMap","kind":"identifier"},{"text":"<","kind":"text"},{"text":"A","kind":"genericParameter"},{"text":", ","kind":"text"},{"text":"Res","kind":"genericParameter"},{"text":">(","kind":"text"},{"text":"A","kind":"typeIdentifier"},{"text":"?, (","kind":"text"},{"text":"A","kind":"typeIdentifier"},{"text":") ","kind":"text"},{"text":"throws","kind":"keyword"},{"text":" -> ","kind":"text"},{"text":"Res","kind":"typeIdentifier"},{"text":") ","kind":"text"},{"text":"rethrows","kind":"keyword"},{"text":" -> ","kind":"text"},{"text":"Res","kind":"typeIdentifier"},{"text":"?","kind":"text"}],"role":"symbol","modules":[{"name":"AsyncKit"}],"externalID":"s:8AsyncKit9strictMapyq_SgxSg_q_xKXEtKr0_lF","title":"strictMap(_:_:)"},"abstract":[{"type":"text","text":"Given one or more optionals as inputs, checks whether each input is "},{"type":"codeVoice","code":"nil"},{"type":"text","text":". If "},{"inlineContent":[{"type":"text","text":"any"}],"type":"emphasis"},{"type":"text","text":" input is "},{"type":"codeVoice","code":"nil"},{"type":"text","text":", "},{"type":"codeVoice","code":"nil"},{"type":"text","text":" is"},{"type":"text","text":" "},{"type":"text","text":"immediately returned as an overall results. If all of the inputs have values, the "},{"type":"codeVoice","code":"transform"},{"type":"text","text":" callback is invoked"},{"type":"text","text":" "},{"type":"text","text":"with all of the unwrapped values as parameters."}],"variants":[{"paths":["\/documentation\/asynckit\/strictmap(_:_:)"],"traits":[{"interfaceLanguage":"swift"}]}],"primaryContentSections":[{"kind":"declarations","declarations":[{"platforms":["Linux"],"languages":["swift"],"tokens":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"strictMap","kind":"identifier"},{"text":"<","kind":"text"},{"text":"A","kind":"genericParameter"},{"text":", ","kind":"text"},{"text":"Res","kind":"genericParameter"},{"text":">(","kind":"text"},{"text":"_","kind":"externalParam"},{"text":" ","kind":"text"},{"text":"a","kind":"internalParam"},{"text":": ","kind":"text"},{"text":"A","kind":"typeIdentifier"},{"text":"?, ","kind":"text"},{"text":"_","kind":"externalParam"},{"text":" ","kind":"text"},{"text":"transform","kind":"internalParam"},{"text":": (","kind":"text"},{"text":"A","kind":"typeIdentifier"},{"text":") ","kind":"text"},{"text":"throws","kind":"keyword"},{"text":" -> ","kind":"text"},{"text":"Res","kind":"typeIdentifier"},{"text":") ","kind":"text"},{"text":"rethrows","kind":"keyword"},{"text":" -> ","kind":"text"},{"text":"Res","kind":"typeIdentifier"},{"text":"?","kind":"text"}]}]},{"kind":"content","content":[{"level":2,"anchor":"discussion","type":"heading","text":"Discussion"},{"style":"note","content":[{"inlineContent":[{"type":"text","text":"This “baseline”, single-item version of the function is trivially re-expressible using the "},{"code":"??","type":"codeVoice"},{"type":"text","text":" operator or"},{"type":"text","text":" "},{"code":"Optional.map(_:)","type":"codeVoice"},{"type":"text","text":", but this is not the case for any of the other overloads."}],"type":"paragraph"}],"type":"aside","name":"Note"}]}],"sections":[],"schemaVersion":{"major":0,"minor":3,"patch":0},"identifier":{"url":"doc:\/\/co.pointfree.VaporRouting\/documentation\/AsyncKit\/strictMap(_:_:)","interfaceLanguage":"swift"},"kind":"symbol","hierarchy":{"paths":[["doc:\/\/co.pointfree.VaporRouting\/documentation\/AsyncKit"]]},"references":{"doc://co.pointfree.VaporRouting/documentation/AsyncKit":{"type":"topic","kind":"symbol","url":"\/documentation\/asynckit","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/AsyncKit","abstract":[],"role":"collection","title":"AsyncKit"},"doc://co.pointfree.VaporRouting/documentation/AsyncKit/strictMap(_:_:)":{"type":"topic","url":"\/documentation\/asynckit\/strictmap(_:_:)","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"strictMap","kind":"identifier"},{"text":"<","kind":"text"},{"text":"A","kind":"genericParameter"},{"text":", ","kind":"text"},{"text":"Res","kind":"genericParameter"},{"text":">(","kind":"text"},{"text":"A","kind":"typeIdentifier"},{"text":"?, (","kind":"text"},{"text":"A","kind":"typeIdentifier"},{"text":") ","kind":"text"},{"text":"throws","kind":"keyword"},{"text":" -> ","kind":"text"},{"kind":"typeIdentifier","text":"Res"},{"kind":"text","text":") "},{"kind":"keyword","text":"rethrows"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"Res"},{"kind":"text","text":"?"}],"abstract":[{"type":"text","text":"Given one or more optionals as inputs, checks whether each input is "},{"type":"codeVoice","code":"nil"},{"type":"text","text":". If "},{"inlineContent":[{"type":"text","text":"any"}],"type":"emphasis"},{"type":"text","text":" input is "},{"type":"codeVoice","code":"nil"},{"type":"text","text":", "},{"type":"codeVoice","code":"nil"},{"type":"text","text":" is"},{"type":"text","text":" "},{"type":"text","text":"immediately returned as an overall results. If all of the inputs have values, the "},{"type":"codeVoice","code":"transform"},{"type":"text","text":" callback is invoked"},{"type":"text","text":" "},{"type":"text","text":"with all of the unwrapped values as parameters."}],"role":"symbol","title":"strictMap(_:_:)","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/AsyncKit\/strictMap(_:_:)","kind":"symbol"}}}