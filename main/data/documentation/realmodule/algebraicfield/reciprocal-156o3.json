{"primaryContentSections":[{"kind":"declarations","declarations":[{"languages":["swift"],"platforms":["Linux"],"tokens":[{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"kind":"identifier","text":"reciprocal"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"? { "},{"kind":"keyword","text":"get"},{"kind":"text","text":" }"}]}]},{"content":[{"type":"heading","text":"Discussion","anchor":"discussion","level":2},{"type":"paragraph","inlineContent":[{"type":"text","text":"If self is zero and the type has no representation for infinity (as"},{"type":"text","text":" "},{"type":"text","text":"in a typical finite field implementation), or if a reciprocal would"},{"type":"text","text":" "},{"type":"text","text":"overflow or underflow such that it cannot be accurately represented,"},{"type":"text","text":" "},{"type":"text","text":"the result is nil."}]},{"type":"paragraph","inlineContent":[{"text":"Note that ","type":"text"},{"code":".zero.reciprocal","type":"codeVoice"},{"text":", somewhat surprisingly, is ","type":"text"},{"inlineContent":[{"text":"not","type":"text"}],"type":"emphasis"},{"text":" nil","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"for "},{"code":"Real","type":"codeVoice"},{"type":"text","text":" or "},{"code":"Complex","type":"codeVoice"},{"type":"text","text":" types, because these types have an"},{"type":"text","text":" "},{"code":".infinity","type":"codeVoice"},{"type":"text","text":" value that acts as the reciprocal of "},{"code":".zero","type":"codeVoice"},{"type":"text","text":"."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"If "},{"type":"codeVoice","code":"x.reciprocal"},{"type":"text","text":" is non-nil, you may be able to replace division by "},{"type":"codeVoice","code":"x"},{"type":"text","text":" "},{"type":"text","text":"with multiplication by this value. It is not advantageous to do this"},{"type":"text","text":" "},{"type":"text","text":"for an isolated division unless it is a compile-time constant visible"},{"type":"text","text":" "},{"type":"text","text":"to the compiler, but if you are dividing many values by a single"},{"type":"text","text":" "},{"type":"text","text":"denominator, this will often be a significant performance win."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Note that this will slightly perturb results for some fields with"},{"type":"text","text":" "},{"type":"text","text":"approximate arithmetic, such as real types–using a normal division"},{"type":"text","text":" "},{"type":"text","text":"is generally more accurate–but no catastrophic loss of accuracy will"},{"type":"text","text":" "},{"text":"result. For fields with exact arithmetic, or for the Complex types,","type":"text"},{"text":" ","type":"text"},{"text":"the results are identical.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"A typical use case looks something like this:"}]},{"type":"codeListing","code":["func divide<T: AlgebraicField>(data: [T], by divisor: T) -> [T] {","  \/\/ If divisor is well-scaled, multiply by reciprocal.","  if let recip = divisor.reciprocal {","    return data.map { $0 * recip }","  }","  \/\/ Fallback on using division.","  return data.map { $0 \/ divisor }","}"],"syntax":null}],"kind":"content"}],"metadata":{"symbolKind":"property","roleHeading":"Instance Property","title":"reciprocal","externalID":"s:10RealModule14AlgebraicFieldP10reciprocalxSgvp","modules":[{"name":"RealModule"}],"fragments":[{"text":"var","kind":"keyword"},{"text":" ","kind":"text"},{"text":"reciprocal","kind":"identifier"},{"text":": ","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":"?","kind":"text"}],"required":true,"role":"symbol"},"kind":"symbol","schemaVersion":{"major":0,"minor":3,"patch":0},"hierarchy":{"paths":[["doc:\/\/co.pointfree.VaporRouting\/documentation\/RealModule","doc:\/\/co.pointfree.VaporRouting\/documentation\/RealModule\/AlgebraicField"]]},"defaultImplementationsSections":[{"identifiers":["doc:\/\/co.pointfree.VaporRouting\/documentation\/RealModule\/AlgebraicField\/reciprocal-6sp2m"],"title":"AlgebraicField Implementations"},{"identifiers":["doc:\/\/co.pointfree.VaporRouting\/documentation\/RealModule\/Real\/reciprocal"],"title":"Real Implementations"}],"identifier":{"url":"doc:\/\/co.pointfree.VaporRouting\/documentation\/RealModule\/AlgebraicField\/reciprocal-156o3","interfaceLanguage":"swift"},"variants":[{"paths":["\/documentation\/realmodule\/algebraicfield\/reciprocal-156o3"],"traits":[{"interfaceLanguage":"swift"}]}],"sections":[],"abstract":[{"type":"text","text":"The (approximate) reciprocal (multiplicative inverse) of this number,"},{"type":"text","text":" "},{"type":"text","text":"if it is representable."}],"references":{"doc://co.pointfree.VaporRouting/documentation/RealModule":{"url":"\/documentation\/realmodule","title":"RealModule","abstract":[],"type":"topic","kind":"symbol","role":"collection","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/RealModule"},"doc://co.pointfree.VaporRouting/documentation/RealModule/AlgebraicField/reciprocal-156o3":{"defaultImplementations":2,"role":"symbol","kind":"symbol","title":"reciprocal","fragments":[{"kind":"keyword","text":"var"},{"text":" ","kind":"text"},{"text":"reciprocal","kind":"identifier"},{"text":": ","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":"?","kind":"text"}],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/RealModule\/AlgebraicField\/reciprocal-156o3","type":"topic","required":true,"abstract":[{"text":"The (approximate) reciprocal (multiplicative inverse) of this number,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"if it is representable."}],"url":"\/documentation\/realmodule\/algebraicfield\/reciprocal-156o3"},"doc://co.pointfree.VaporRouting/documentation/RealModule/AlgebraicField":{"role":"symbol","kind":"symbol","title":"AlgebraicField","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"AlgebraicField"}],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/RealModule\/AlgebraicField","type":"topic","navigatorTitle":[{"kind":"identifier","text":"AlgebraicField"}],"abstract":[{"type":"text","text":"A type modeling an algebraic "},{"type":"reference","identifier":"https:\/\/en.wikipedia.org\/wiki\/Field_(mathematics)","isActive":true},{"text":". Refines the ","type":"text"},{"type":"codeVoice","code":"SignedNumeric"},{"type":"text","text":" protocol,"},{"type":"text","text":" "},{"type":"text","text":"adding division."}],"url":"\/documentation\/realmodule\/algebraicfield"},"doc://co.pointfree.VaporRouting/documentation/RealModule/AlgebraicField/reciprocal-6sp2m":{"role":"symbol","kind":"symbol","title":"reciprocal","fragments":[{"text":"var","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"reciprocal"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"?"}],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/RealModule\/AlgebraicField\/reciprocal-6sp2m","type":"topic","abstract":[{"text":"Implementations should be ","type":"text"},{"type":"emphasis","inlineContent":[{"text":"conservative","type":"text"}]},{"type":"text","text":" with the reciprocal property;"},{"text":" ","type":"text"},{"text":"it is OK to return ","type":"text"},{"type":"codeVoice","code":"nil"},{"text":" even in cases where a reciprocal could be","type":"text"},{"text":" ","type":"text"},{"text":"represented. For this reason, a default implementation that simply","type":"text"},{"text":" ","type":"text"},{"text":"always returns ","type":"text"},{"type":"codeVoice","code":"nil"},{"text":" is correct, but conforming types should provide","type":"text"},{"text":" ","type":"text"},{"text":"a better implementation if possible.","type":"text"}],"url":"\/documentation\/realmodule\/algebraicfield\/reciprocal-6sp2m"},"doc://co.pointfree.VaporRouting/documentation/RealModule/Real/reciprocal":{"abstract":[{"type":"text","text":"The (approximate) reciprocal (multiplicative inverse) of this number,"},{"type":"text","text":" "},{"type":"text","text":"if it is representable."}],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/RealModule\/Real\/reciprocal","title":"reciprocal","kind":"symbol","url":"\/documentation\/realmodule\/real\/reciprocal","type":"topic","role":"symbol","fragments":[{"text":"var","kind":"keyword"},{"text":" ","kind":"text"},{"text":"reciprocal","kind":"identifier"},{"text":": ","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":"?","kind":"text"}]},"https://en.wikipedia.org/wiki/Field_(mathematics)":{"type":"link","title":"field","identifier":"https:\/\/en.wikipedia.org\/wiki\/Field_(mathematics)","titleInlineContent":[{"text":"field","type":"text"}],"url":"https:\/\/en.wikipedia.org\/wiki\/Field_(mathematics)"}}}