{"hierarchy":{"paths":[["doc:\/\/co.pointfree.VaporRouting\/documentation\/RealModule","doc:\/\/co.pointfree.VaporRouting\/documentation\/RealModule\/AlgebraicField","doc:\/\/co.pointfree.VaporRouting\/documentation\/RealModule\/AlgebraicField\/reciprocal-156o3"]]},"variants":[{"paths":["\/documentation\/realmodule\/real\/reciprocal"],"traits":[{"interfaceLanguage":"swift"}]}],"sections":[],"primaryContentSections":[{"kind":"declarations","declarations":[{"platforms":["Linux"],"tokens":[{"text":"var","kind":"keyword"},{"text":" ","kind":"text"},{"text":"reciprocal","kind":"identifier"},{"text":": ","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":"? { ","kind":"text"},{"text":"get","kind":"keyword"},{"text":" }","kind":"text"}],"languages":["swift"]}]},{"kind":"content","content":[{"text":"Discussion","level":2,"anchor":"discussion","type":"heading"},{"inlineContent":[{"text":"If ","type":"text"},{"type":"codeVoice","code":"x"},{"text":" if finite and nonzero, and ","type":"text"},{"type":"codeVoice","code":"1\/x"},{"text":" overflows or underflows,","type":"text"},{"text":" ","type":"text"},{"text":"then ","type":"text"},{"type":"codeVoice","code":"x.reciprocal"},{"text":" is ","type":"text"},{"type":"codeVoice","code":"nil"},{"text":". Otherwise, ","type":"text"},{"type":"codeVoice","code":"a.reciprocal"},{"text":" is ","type":"text"},{"type":"codeVoice","code":"1\/x"},{"text":".","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"If "},{"code":"x.reciprocal","type":"codeVoice"},{"type":"text","text":" is non-nil, you may be able to replace division by "},{"code":"x","type":"codeVoice"},{"type":"text","text":" "},{"type":"text","text":"with multiplication by this value. It is not advantageous to do this"},{"type":"text","text":" "},{"type":"text","text":"for an isolated division unless it is a compile-time constant visible"},{"type":"text","text":" "},{"type":"text","text":"to the compiler, but if you are dividing many values by a single"},{"type":"text","text":" "},{"type":"text","text":"denominator, this will often be a significant performance win."}],"type":"paragraph"},{"inlineContent":[{"text":"A typical use case looks something like this:","type":"text"}],"type":"paragraph"},{"syntax":null,"type":"codeListing","code":["func divide<T: Real>(data: [T], by divisor: T) -> [T] {","  \/\/ If divisor is well-scaled, multiply by reciprocal.","  if let recip = divisor.reciprocal {","    return data.map { $0 * recip }","  }","  \/\/ Fallback on using division.","  return data.map { $0 \/ divisor }","}"]},{"inlineContent":[{"type":"text","text":"Error Bounds:"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"Multiplying by the reciprocal instead of dividing will slightly"},{"type":"text","text":" "},{"type":"text","text":"perturb results. For example "},{"code":"5.0 \/ 3","type":"codeVoice"},{"type":"text","text":" is 1.6666666666666667, but"},{"type":"text","text":" "},{"code":"5.0 * 3.reciprocal!","type":"codeVoice"},{"type":"text","text":" is 1.6666666666666665."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"The error of a normal division is bounded by half an ulp of the"},{"type":"text","text":" "},{"type":"text","text":"result; we can derive a quick error bound for multiplication by"},{"type":"text","text":" "},{"type":"text","text":"the real reciprocal (when it exists) as follows (I will use circle"},{"type":"text","text":" "},{"type":"text","text":"operators to denote real-number arithmetic, and normal operators"},{"type":"text","text":" "},{"type":"text","text":"for floating-point arithmetic):"}],"type":"paragraph"},{"syntax":null,"type":"codeListing","code":["  a * b.reciprocal! = a * (1\/b)","                    = a * (1 ⊘ b)(1 + δ₁)","                    = (a ⊘ b)(1 + δ₁)(1 + δ₂)","                    = (a ⊘ b)(1 + δ₁ + δ₂ + δ₁δ₂)"]},{"inlineContent":[{"type":"text","text":"where "},{"type":"codeVoice","code":"0 < δᵢ <= ulpOfOne\/2"},{"type":"text","text":". This gives a roughly 1-ulp error,"},{"type":"text","text":" "},{"type":"text","text":"about twice the error bound we get using division. For most"},{"type":"text","text":" "},{"type":"text","text":"purposes this is an acceptable error, but if you need to match"},{"type":"text","text":" "},{"type":"text","text":"results obtained using division, you should not use this."}],"type":"paragraph"}]}],"schemaVersion":{"major":0,"minor":3,"patch":0},"kind":"symbol","identifier":{"interfaceLanguage":"swift","url":"doc:\/\/co.pointfree.VaporRouting\/documentation\/RealModule\/Real\/reciprocal"},"abstract":[{"type":"text","text":"The (approximate) reciprocal (multiplicative inverse) of this number,"},{"type":"text","text":" "},{"type":"text","text":"if it is representable."}],"metadata":{"symbolKind":"property","role":"symbol","modules":[{"name":"RealModule"}],"title":"reciprocal","fragments":[{"text":"var","kind":"keyword"},{"text":" ","kind":"text"},{"text":"reciprocal","kind":"identifier"},{"text":": ","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":"?","kind":"text"}],"externalID":"s:10RealModule0A0PAAE10reciprocalxSgvp","roleHeading":"Instance Property","extendedModule":"RealModule"},"references":{"https://en.wikipedia.org/wiki/Field_(mathematics)":{"type":"link","identifier":"https:\/\/en.wikipedia.org\/wiki\/Field_(mathematics)","title":"field","titleInlineContent":[{"type":"text","text":"field"}],"url":"https:\/\/en.wikipedia.org\/wiki\/Field_(mathematics)"},"doc://co.pointfree.VaporRouting/documentation/RealModule/AlgebraicField":{"role":"symbol","kind":"symbol","title":"AlgebraicField","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"AlgebraicField"}],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/RealModule\/AlgebraicField","type":"topic","navigatorTitle":[{"kind":"identifier","text":"AlgebraicField"}],"abstract":[{"type":"text","text":"A type modeling an algebraic "},{"type":"reference","identifier":"https:\/\/en.wikipedia.org\/wiki\/Field_(mathematics)","isActive":true},{"text":". Refines the ","type":"text"},{"type":"codeVoice","code":"SignedNumeric"},{"type":"text","text":" protocol,"},{"type":"text","text":" "},{"type":"text","text":"adding division."}],"url":"\/documentation\/realmodule\/algebraicfield"},"doc://co.pointfree.VaporRouting/documentation/RealModule/Real/reciprocal":{"abstract":[{"type":"text","text":"The (approximate) reciprocal (multiplicative inverse) of this number,"},{"type":"text","text":" "},{"type":"text","text":"if it is representable."}],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/RealModule\/Real\/reciprocal","title":"reciprocal","kind":"symbol","url":"\/documentation\/realmodule\/real\/reciprocal","type":"topic","role":"symbol","fragments":[{"text":"var","kind":"keyword"},{"text":" ","kind":"text"},{"text":"reciprocal","kind":"identifier"},{"text":": ","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":"?","kind":"text"}]},"doc://co.pointfree.VaporRouting/documentation/RealModule":{"url":"\/documentation\/realmodule","title":"RealModule","abstract":[],"type":"topic","kind":"symbol","role":"collection","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/RealModule"},"doc://co.pointfree.VaporRouting/documentation/RealModule/AlgebraicField/reciprocal-156o3":{"defaultImplementations":2,"role":"symbol","kind":"symbol","title":"reciprocal","fragments":[{"kind":"keyword","text":"var"},{"text":" ","kind":"text"},{"text":"reciprocal","kind":"identifier"},{"text":": ","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":"?","kind":"text"}],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/RealModule\/AlgebraicField\/reciprocal-156o3","type":"topic","required":true,"abstract":[{"text":"The (approximate) reciprocal (multiplicative inverse) of this number,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"if it is representable."}],"url":"\/documentation\/realmodule\/algebraicfield\/reciprocal-156o3"}}}