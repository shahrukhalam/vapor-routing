{"hierarchy":{"paths":[["doc:\/\/co.pointfree.VaporRouting\/documentation\/Vapor","doc:\/\/co.pointfree.VaporRouting\/documentation\/Vapor\/Environment"]]},"schemaVersion":{"major":0,"patch":0,"minor":3},"primaryContentSections":[{"kind":"declarations","declarations":[{"languages":["swift"],"tokens":[{"kind":"keyword","text":"static"},{"kind":"text","text":" "},{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"secret"},{"kind":"text","text":"("},{"kind":"externalParam","text":"key"},{"kind":"text","text":": "},{"preciseIdentifier":"s:SS","kind":"typeIdentifier","text":"String"},{"kind":"text","text":", "},{"kind":"externalParam","text":"fileIO"},{"kind":"text","text":": "},{"preciseIdentifier":"s:8NIOPosix17NonBlockingFileIOV","kind":"typeIdentifier","text":"NonBlockingFileIO","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOPosix\/NonBlockingFileIO"},{"kind":"text","text":", "},{"kind":"externalParam","text":"on"},{"kind":"text","text":" "},{"kind":"internalParam","text":"eventLoop"},{"kind":"text","text":": "},{"preciseIdentifier":"s:7NIOCore9EventLoopP","kind":"typeIdentifier","text":"EventLoop","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/EventLoop"},{"kind":"text","text":") -> "},{"preciseIdentifier":"s:7NIOCore15EventLoopFutureC","kind":"typeIdentifier","text":"EventLoopFuture","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/EventLoopFuture"},{"kind":"text","text":"<"},{"preciseIdentifier":"s:SS","kind":"typeIdentifier","text":"String"},{"kind":"text","text":"?>"}],"platforms":["Linux"]}]},{"kind":"parameters","parameters":[{"content":[{"type":"paragraph","inlineContent":[{"text":"The environment variable name","type":"text"}]}],"name":"key"},{"content":[{"inlineContent":[{"type":"text","text":""},{"type":"codeVoice","code":"NonBlockingFileIO"},{"type":"text","text":" handler provided by NIO"}],"type":"paragraph"}],"name":"fileIO"},{"content":[{"type":"paragraph","inlineContent":[{"text":"","type":"text"},{"type":"codeVoice","code":"EventLoop"},{"text":" for NIO to use for working with the file","type":"text"}]}],"name":"eventLoop"}]},{"kind":"content","content":[{"text":"Discussion","anchor":"discussion","type":"heading","level":2},{"inlineContent":[{"type":"text","text":"Example usage:"}],"type":"paragraph"},{"code":["func configure(_ app: Application) {","    \/\/ ...","","    let databasePassword = try Environment.secret(","        key: \"DATABASE_PASSWORD_FILE\",","        fileIO: app.fileio,","        on: app.eventLoopGroup.next()","    ).wait()",""],"syntax":null,"type":"codeListing"},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Do "},{"type":"emphasis","inlineContent":[{"text":"not","type":"text"}]},{"type":"text","text":" use "},{"type":"codeVoice","code":".wait()"},{"type":"text","text":" if loading a secret at any time after the app has booted, such as while"},{"type":"text","text":" "},{"type":"text","text":"handling a "},{"type":"codeVoice","code":"Request"},{"type":"text","text":". Chain the result as you would any other future instead."}]}],"style":"important","name":"Important","type":"aside"}]}],"sections":[],"abstract":[{"text":"Reads a file’s content for a secret. The secret key is the name of the environment variable that is expected to","type":"text"},{"text":" ","type":"text"},{"text":"specify the path of the file containing the secret.","type":"text"}],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Vapor\/Environment\/secret(key:fileIO:on:)"},"variants":[{"paths":["\/documentation\/vapor\/environment\/secret(key:fileio:on:)"],"traits":[{"interfaceLanguage":"swift"}]}],"kind":"symbol","metadata":{"role":"symbol","fragments":[{"kind":"keyword","text":"static"},{"kind":"text","text":" "},{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"secret"},{"kind":"text","text":"("},{"kind":"externalParam","text":"key"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"String","preciseIdentifier":"s:SS"},{"kind":"text","text":", "},{"kind":"externalParam","text":"fileIO"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"NonBlockingFileIO","preciseIdentifier":"s:8NIOPosix17NonBlockingFileIOV"},{"kind":"text","text":", "},{"kind":"externalParam","text":"on"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"EventLoop","preciseIdentifier":"s:7NIOCore9EventLoopP"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"EventLoopFuture","preciseIdentifier":"s:7NIOCore15EventLoopFutureC"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"String","preciseIdentifier":"s:SS"},{"kind":"text","text":"?>"}],"externalID":"s:5Vapor11EnvironmentV6secret3key6fileIO2on7NIOCore15EventLoopFutureCySSSgGSS_8NIOPosix015NonBlockingFileF0VAH0iJ0_ptFZ","title":"secret(key:fileIO:on:)","modules":[{"name":"Vapor"}],"extendedModule":"Vapor","roleHeading":"Type Method","symbolKind":"method"},"references":{"doc://co.pointfree.VaporRouting/documentation/Vapor/Environment":{"abstract":[{"type":"text","text":"The environment the application is running in, i.e., production, dev, etc. All "},{"type":"codeVoice","code":"Container"},{"type":"text","text":"s will have"},{"type":"text","text":" "},{"text":"an ","type":"text"},{"code":"Environment","type":"codeVoice"},{"type":"text","text":" that can be used to dynamically register and configure services."}],"fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"text":"Environment","kind":"identifier"}],"url":"\/documentation\/vapor\/environment","kind":"symbol","title":"Environment","role":"symbol","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Vapor\/Environment","navigatorTitle":[{"text":"Environment","kind":"identifier"}],"type":"topic"},"doc://co.pointfree.VaporRouting/documentation/NIOCore/EventLoop":{"abstract":[{"type":"text","text":"An EventLoop processes IO \/ tasks in an endless loop for "},{"type":"codeVoice","code":"Channel"},{"type":"text","text":"s until it’s closed."}],"url":"\/documentation\/niocore\/eventloop","type":"topic","title":"EventLoop","role":"symbol","navigatorTitle":[{"text":"EventLoop","kind":"identifier"}],"fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"EventLoop","kind":"identifier"}],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/EventLoop","kind":"symbol"},"doc://co.pointfree.VaporRouting/documentation/Vapor":{"type":"topic","abstract":[],"role":"collection","url":"\/documentation\/vapor","kind":"symbol","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Vapor","title":"Vapor"},"doc://co.pointfree.VaporRouting/documentation/Vapor/Environment/secret(key:fileIO:on:)":{"url":"\/documentation\/vapor\/environment\/secret(key:fileio:on:)","kind":"symbol","title":"secret(key:fileIO:on:)","role":"symbol","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Vapor\/Environment\/secret(key:fileIO:on:)","type":"topic","fragments":[{"text":"static","kind":"keyword"},{"text":" ","kind":"text"},{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"secret","kind":"identifier"},{"text":"(","kind":"text"},{"text":"key","kind":"externalParam"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","text":"String","preciseIdentifier":"s:SS"},{"kind":"text","text":", "},{"kind":"externalParam","text":"fileIO"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"NonBlockingFileIO","preciseIdentifier":"s:8NIOPosix17NonBlockingFileIOV"},{"kind":"text","text":", "},{"kind":"externalParam","text":"on"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"EventLoop","preciseIdentifier":"s:7NIOCore9EventLoopP"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"EventLoopFuture","preciseIdentifier":"s:7NIOCore15EventLoopFutureC"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"String","preciseIdentifier":"s:SS"},{"kind":"text","text":"?>"}],"abstract":[{"text":"Reads a file’s content for a secret. The secret key is the name of the environment variable that is expected to","type":"text"},{"text":" ","type":"text"},{"text":"specify the path of the file containing the secret.","type":"text"}]},"doc://co.pointfree.VaporRouting/documentation/NIOCore/EventLoopFuture":{"url":"\/documentation\/niocore\/eventloopfuture","kind":"symbol","type":"topic","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"EventLoopFuture"}],"navigatorTitle":[{"kind":"identifier","text":"EventLoopFuture"}],"abstract":[{"type":"text","text":"Holder for a result that will be provided later."}],"role":"symbol","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/EventLoopFuture","title":"EventLoopFuture"},"doc://co.pointfree.VaporRouting/documentation/NIOPosix/NonBlockingFileIO":{"navigatorTitle":[{"kind":"identifier","text":"NonBlockingFileIO"}],"title":"NonBlockingFileIO","url":"\/documentation\/nioposix\/nonblockingfileio","abstract":[{"code":"NonBlockingFileIO","type":"codeVoice"},{"text":" is a helper that allows you to read files without blocking the calling thread.","type":"text"}],"fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"NonBlockingFileIO"}],"role":"symbol","kind":"symbol","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOPosix\/NonBlockingFileIO","type":"topic"}}}