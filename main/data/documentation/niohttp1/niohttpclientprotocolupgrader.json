{"sections":[],"variants":[{"paths":["\/documentation\/niohttp1\/niohttpclientprotocolupgrader"],"traits":[{"interfaceLanguage":"swift"}]}],"hierarchy":{"paths":[["doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOHTTP1"]]},"schemaVersion":{"minor":3,"patch":0,"major":0},"kind":"symbol","topicSections":[{"title":"Instance Properties","identifiers":["doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOHTTP1\/NIOHTTPClientProtocolUpgrader\/requiredUpgradeHeaders","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOHTTP1\/NIOHTTPClientProtocolUpgrader\/supportedProtocol"]},{"title":"Instance Methods","identifiers":["doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOHTTP1\/NIOHTTPClientProtocolUpgrader\/addCustom(upgradeRequestHeaders:)","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOHTTP1\/NIOHTTPClientProtocolUpgrader\/shouldAllowUpgrade(upgradeResponse:)","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOHTTP1\/NIOHTTPClientProtocolUpgrader\/upgrade(context:upgradeResponse:)"]}],"identifier":{"url":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOHTTP1\/NIOHTTPClientProtocolUpgrader","interfaceLanguage":"swift"},"abstract":[{"text":"An object that implements ","type":"text"},{"type":"codeVoice","code":"NIOHTTPClientProtocolUpgrader"},{"type":"text","text":" knows how to handle HTTP upgrade to"},{"type":"text","text":" "},{"type":"text","text":"a protocol on a client-side channel."},{"type":"text","text":" "},{"type":"text","text":"It has the option of denying this upgrade based upon the server response."}],"relationshipsSections":[{"title":"Conforming Types","kind":"relationships","identifiers":["doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOWebSocket\/NIOWebSocketClientUpgrader"],"type":"conformingTypes"}],"metadata":{"navigatorTitle":[{"text":"NIOHTTPClientProtocolUpgrader","kind":"identifier"}],"title":"NIOHTTPClientProtocolUpgrader","roleHeading":"Protocol","role":"symbol","externalID":"s:8NIOHTTP129NIOHTTPClientProtocolUpgraderP","modules":[{"name":"NIOHTTP1"}],"symbolKind":"protocol","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"NIOHTTPClientProtocolUpgrader","kind":"identifier"}]},"primaryContentSections":[{"declarations":[{"tokens":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"NIOHTTPClientProtocolUpgrader"}],"languages":["swift"],"platforms":["Linux"]}],"kind":"declarations"}],"references":{"doc://co.pointfree.VaporRouting/documentation/NIOWebSocket/NIOWebSocketClientUpgrader":{"kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"NIOWebSocketClientUpgrader"}],"fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"NIOWebSocketClientUpgrader"}],"title":"NIOWebSocketClientUpgrader","role":"symbol","type":"topic","url":"\/documentation\/niowebsocket\/niowebsocketclientupgrader","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOWebSocket\/NIOWebSocketClientUpgrader","abstract":[{"type":"text","text":"A "},{"type":"codeVoice","code":"HTTPClientProtocolUpgrader"},{"type":"text","text":" that knows how to do the WebSocket upgrade dance."}]},"doc://co.pointfree.VaporRouting/documentation/NIOHTTP1/NIOHTTPClientProtocolUpgrader/shouldAllowUpgrade(upgradeResponse:)":{"type":"topic","title":"shouldAllowUpgrade(upgradeResponse:)","kind":"symbol","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOHTTP1\/NIOHTTPClientProtocolUpgrader\/shouldAllowUpgrade(upgradeResponse:)","abstract":[{"text":"Gives the receiving upgrader the chance to deny the upgrade based on the upgrade HTTP response.","type":"text"}],"required":true,"role":"symbol","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"shouldAllowUpgrade","kind":"identifier"},{"text":"(","kind":"text"},{"text":"upgradeResponse","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"HTTPResponseHead","kind":"typeIdentifier","preciseIdentifier":"s:8NIOHTTP116HTTPResponseHeadV"},{"text":") -> ","kind":"text"},{"text":"Bool","kind":"typeIdentifier","preciseIdentifier":"s:Sb"}],"url":"\/documentation\/niohttp1\/niohttpclientprotocolupgrader\/shouldallowupgrade(upgraderesponse:)"},"doc://co.pointfree.VaporRouting/documentation/NIOHTTP1/NIOHTTPClientProtocolUpgrader/addCustom(upgradeRequestHeaders:)":{"kind":"symbol","url":"\/documentation\/niohttp1\/niohttpclientprotocolupgrader\/addcustom(upgraderequestheaders:)","abstract":[{"type":"text","text":"Additional headers to be added to the request, beyond the “Upgrade” and “Connection” headers."}],"required":true,"role":"symbol","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"addCustom","kind":"identifier"},{"text":"(","kind":"text"},{"text":"upgradeRequestHeaders","kind":"externalParam"},{"kind":"text","text":": "},{"kind":"keyword","text":"inout"},{"kind":"text","text":" "},{"kind":"typeIdentifier","preciseIdentifier":"s:8NIOHTTP111HTTPHeadersV","text":"HTTPHeaders"},{"kind":"text","text":")"}],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOHTTP1\/NIOHTTPClientProtocolUpgrader\/addCustom(upgradeRequestHeaders:)","type":"topic","title":"addCustom(upgradeRequestHeaders:)"},"doc://co.pointfree.VaporRouting/documentation/NIOHTTP1/NIOHTTPClientProtocolUpgrader/upgrade(context:upgradeResponse:)":{"role":"symbol","abstract":[{"type":"text","text":"Called when the upgrade response has been flushed. At this time it is safe to mutate the channel"},{"type":"text","text":" "},{"type":"text","text":"pipeline to add whatever channel handlers are required."},{"type":"text","text":" "},{"type":"text","text":"Until the returned "},{"type":"codeVoice","code":"EventLoopFuture"},{"type":"text","text":" succeeds, all received data will be buffered."}],"type":"topic","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOHTTP1\/NIOHTTPClientProtocolUpgrader\/upgrade(context:upgradeResponse:)","required":true,"kind":"symbol","url":"\/documentation\/niohttp1\/niohttpclientprotocolupgrader\/upgrade(context:upgraderesponse:)","title":"upgrade(context:upgradeResponse:)","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"upgrade","kind":"identifier"},{"text":"(","kind":"text"},{"text":"context","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"ChannelHandlerContext","preciseIdentifier":"s:7NIOCore21ChannelHandlerContextC","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"kind":"externalParam","text":"upgradeResponse"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:8NIOHTTP116HTTPResponseHeadV","text":"HTTPResponseHead"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","preciseIdentifier":"s:7NIOCore15EventLoopFutureC","text":"EventLoopFuture"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","preciseIdentifier":"s:s4Voida","text":"Void"},{"kind":"text","text":">"}]},"doc://co.pointfree.VaporRouting/documentation/NIOHTTP1/NIOHTTPClientProtocolUpgrader":{"kind":"symbol","url":"\/documentation\/niohttp1\/niohttpclientprotocolupgrader","navigatorTitle":[{"kind":"identifier","text":"NIOHTTPClientProtocolUpgrader"}],"abstract":[{"type":"text","text":"An object that implements "},{"type":"codeVoice","code":"NIOHTTPClientProtocolUpgrader"},{"type":"text","text":" knows how to handle HTTP upgrade to"},{"type":"text","text":" "},{"type":"text","text":"a protocol on a client-side channel."},{"type":"text","text":" "},{"type":"text","text":"It has the option of denying this upgrade based upon the server response."}],"role":"symbol","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"NIOHTTPClientProtocolUpgrader"}],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOHTTP1\/NIOHTTPClientProtocolUpgrader","type":"topic","title":"NIOHTTPClientProtocolUpgrader"},"doc://co.pointfree.VaporRouting/documentation/NIOHTTP1/NIOHTTPClientProtocolUpgrader/supportedProtocol":{"role":"symbol","abstract":[{"type":"text","text":"The protocol this upgrader knows how to support."}],"type":"topic","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOHTTP1\/NIOHTTPClientProtocolUpgrader\/supportedProtocol","required":true,"kind":"symbol","url":"\/documentation\/niohttp1\/niohttpclientprotocolupgrader\/supportedprotocol","title":"supportedProtocol","fragments":[{"text":"var","kind":"keyword"},{"text":" ","kind":"text"},{"text":"supportedProtocol","kind":"identifier"},{"text":": ","kind":"text"},{"text":"String","preciseIdentifier":"s:SS","kind":"typeIdentifier"}]},"doc://co.pointfree.VaporRouting/documentation/NIOHTTP1/NIOHTTPClientProtocolUpgrader/requiredUpgradeHeaders":{"type":"topic","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOHTTP1\/NIOHTTPClientProtocolUpgrader\/requiredUpgradeHeaders","abstract":[{"type":"text","text":"All the header fields the protocol requires in the request to successfully upgrade."},{"type":"text","text":" "},{"type":"text","text":"These header fields will be added to the outbound request’s “Connection” header field."},{"type":"text","text":" "},{"type":"text","text":"It is the responsibility of the custom headers call to actually add these required headers."}],"url":"\/documentation\/niohttp1\/niohttpclientprotocolupgrader\/requiredupgradeheaders","kind":"symbol","role":"symbol","required":true,"title":"requiredUpgradeHeaders","fragments":[{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"kind":"identifier","text":"requiredUpgradeHeaders"},{"kind":"text","text":": ["},{"preciseIdentifier":"s:SS","kind":"typeIdentifier","text":"String"},{"kind":"text","text":"]"}]},"doc://co.pointfree.VaporRouting/documentation/NIOHTTP1":{"title":"NIOHTTP1","role":"collection","type":"topic","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOHTTP1","kind":"symbol","url":"\/documentation\/niohttp1","abstract":[]}}}