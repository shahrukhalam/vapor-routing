{"hierarchy":{"paths":[["doc:\/\/co.pointfree.VaporRouting\/documentation\/Atomics","doc:\/\/co.pointfree.VaporRouting\/documentation\/Atomics\/AtomicRawRepresentableStorage"]]},"abstract":[{"type":"text","text":"Perform an atomic weak compare and exchange operation on the value"},{"type":"text","text":" "},{"type":"text","text":"referenced by "},{"type":"codeVoice","code":"pointer"},{"type":"text","text":", applying the specified success\/failure memory"},{"type":"text","text":" "},{"type":"text","text":"orderings. This compare-exchange variant is allowed to spuriously fail; it"},{"type":"text","text":" "},{"type":"text","text":"is designed to be called in a loop until it indicates a successful"},{"type":"text","text":" "},{"type":"text","text":"exchange has happened."}],"kind":"symbol","metadata":{"modules":[{"name":"Atomics"}],"role":"symbol","title":"atomicWeakCompareExchange(expected:desired:at:successOrdering:failureOrdering:)","roleHeading":"Type Method","fragments":[{"kind":"keyword","text":"static"},{"kind":"text","text":" "},{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"atomicWeakCompareExchange"},{"kind":"text","text":"("},{"kind":"externalParam","text":"expected"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Value"},{"kind":"text","text":", "},{"text":"desired","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"Value","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"at","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"UnsafeMutablePointer","preciseIdentifier":"s:Sp","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"text":"AtomicRawRepresentableStorage","preciseIdentifier":"s:7Atomics29AtomicRawRepresentableStorageV","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"text":"Value","kind":"typeIdentifier"},{"text":">>, ","kind":"text"},{"text":"successOrdering","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"AtomicUpdateOrdering","preciseIdentifier":"s:7Atomics20AtomicUpdateOrderingV","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"failureOrdering","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"AtomicLoadOrdering","preciseIdentifier":"s:7Atomics18AtomicLoadOrderingV","kind":"typeIdentifier"},{"text":") -> (exchanged","kind":"text"},{"text":": ","kind":"text"},{"text":"Bool","preciseIdentifier":"s:Sb","kind":"typeIdentifier"},{"text":", original","kind":"text"},{"text":": ","kind":"text"},{"text":"Value","kind":"typeIdentifier"},{"text":")","kind":"text"}],"symbolKind":"method","externalID":"s:7Atomics29AtomicRawRepresentableStorageV25atomicWeakCompareExchange8expected7desired2at15successOrdering07failureN0Sb9exchanged_x8originaltx_xSpyACyxGGAA0b6UpdateN0VAA0b4LoadN0VtFZ"},"sections":[],"schemaVersion":{"major":0,"minor":3,"patch":0},"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Atomics\/AtomicRawRepresentableStorage\/atomicWeakCompareExchange(expected:desired:at:successOrdering:failureOrdering:)"},"primaryContentSections":[{"declarations":[{"languages":["swift"],"platforms":["Linux"],"tokens":[{"kind":"keyword","text":"static"},{"kind":"text","text":" "},{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"atomicWeakCompareExchange"},{"kind":"text","text":"("},{"kind":"externalParam","text":"expected"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Value"},{"kind":"text","text":", "},{"kind":"externalParam","text":"desired"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Value"},{"kind":"text","text":", "},{"kind":"externalParam","text":"at"},{"kind":"text","text":" "},{"kind":"internalParam","text":"pointer"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:Sp","text":"UnsafeMutablePointer"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","preciseIdentifier":"s:7Atomics29AtomicRawRepresentableStorageV","text":"AtomicRawRepresentableStorage","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Atomics\/AtomicRawRepresentableStorage"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Value"},{"kind":"text","text":">>, "},{"kind":"externalParam","text":"successOrdering"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:7Atomics20AtomicUpdateOrderingV","text":"AtomicUpdateOrdering","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Atomics\/AtomicUpdateOrdering"},{"kind":"text","text":", "},{"kind":"externalParam","text":"failureOrdering"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:7Atomics18AtomicLoadOrderingV","text":"AtomicLoadOrdering","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Atomics\/AtomicLoadOrdering"},{"kind":"text","text":") -> (exchanged"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:Sb","text":"Bool"},{"kind":"text","text":", original"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Value"},{"kind":"text","text":")"}]}],"kind":"declarations"},{"parameters":[{"content":[{"inlineContent":[{"text":"The expected current value.","type":"text"}],"type":"paragraph"}],"name":"expected"},{"content":[{"type":"paragraph","inlineContent":[{"text":"The desired new value.","type":"text"}]}],"name":"desired"},{"content":[{"inlineContent":[{"type":"text","text":"A memory location previously initialized with a value"},{"type":"text","text":" "},{"type":"text","text":"returned by "},{"type":"codeVoice","code":"prepareAtomicRepresentation(for:)"},{"type":"text","text":"."}],"type":"paragraph"}],"name":"pointer"},{"content":[{"type":"paragraph","inlineContent":[{"text":"The memory ordering to apply if this","type":"text"},{"text":" ","type":"text"},{"text":"operation performs the exchange.","type":"text"}]}],"name":"successOrdering"},{"content":[{"inlineContent":[{"type":"text","text":"The memory ordering to apply on this"},{"type":"text","text":" "},{"type":"text","text":"operation does not perform the exchange."}],"type":"paragraph"}],"name":"failureOrdering"}],"kind":"parameters"},{"kind":"content","content":[{"type":"heading","text":"Return Value","level":2,"anchor":"return-value"},{"type":"paragraph","inlineContent":[{"text":"A tuple ","type":"text"},{"code":"(exchanged, original)","type":"codeVoice"},{"text":", where ","type":"text"},{"code":"exchanged","type":"codeVoice"},{"text":" is true if","type":"text"},{"text":" ","type":"text"},{"text":"the exchange was successful, and ","type":"text"},{"code":"original","type":"codeVoice"},{"text":" is the original value.","type":"text"}]}]},{"kind":"content","content":[{"type":"heading","text":"Discussion","level":2,"anchor":"discussion"},{"type":"paragraph","inlineContent":[{"type":"text","text":"This operation performs the following algorithm as a single atomic"},{"type":"text","text":" "},{"type":"text","text":"transaction:"}]},{"type":"codeListing","syntax":null,"code":["atomic(self) { currentValue in","  let original = currentValue","  guard original == expected else { return (false, original) }","  currentValue = desired","  return (true, original)","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"(In this weak form, transient conditions may cause the "},{"code":"original == expected","type":"codeVoice"},{"type":"text","text":" check to sometimes return false when the two values are in fact"},{"type":"text","text":" "},{"type":"text","text":"the same.)"}]},{"type":"paragraph","inlineContent":[{"text":"The ","type":"text"},{"type":"codeVoice","code":"successOrdering"},{"text":" argument specifies the memory ordering to use when the","type":"text"},{"text":" ","type":"text"},{"text":"operation manages to update the current value, while ","type":"text"},{"type":"codeVoice","code":"failureOrdering"},{"text":" ","type":"text"},{"text":"will be used when the operation leaves the value intact.","type":"text"}]}]}],"variants":[{"paths":["\/documentation\/atomics\/atomicrawrepresentablestorage\/atomicweakcompareexchange(expected:desired:at:successordering:failureordering:)"],"traits":[{"interfaceLanguage":"swift"}]}],"references":{"doc://co.pointfree.VaporRouting/documentation/Atomics/AtomicRawRepresentableStorage/atomicWeakCompareExchange(expected:desired:at:successOrdering:failureOrdering:)":{"type":"topic","abstract":[{"type":"text","text":"Perform an atomic weak compare and exchange operation on the value"},{"type":"text","text":" "},{"type":"text","text":"referenced by "},{"type":"codeVoice","code":"pointer"},{"type":"text","text":", applying the specified success\/failure memory"},{"type":"text","text":" "},{"type":"text","text":"orderings. This compare-exchange variant is allowed to spuriously fail; it"},{"type":"text","text":" "},{"type":"text","text":"is designed to be called in a loop until it indicates a successful"},{"type":"text","text":" "},{"type":"text","text":"exchange has happened."}],"kind":"symbol","url":"\/documentation\/atomics\/atomicrawrepresentablestorage\/atomicweakcompareexchange(expected:desired:at:successordering:failureordering:)","fragments":[{"text":"static","kind":"keyword"},{"text":" ","kind":"text"},{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"atomicWeakCompareExchange","kind":"identifier"},{"text":"(","kind":"text"},{"text":"expected","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"Value","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"desired","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"Value","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"at","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"UnsafeMutablePointer","preciseIdentifier":"s:Sp","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"text":"AtomicRawRepresentableStorage","preciseIdentifier":"s:7Atomics29AtomicRawRepresentableStorageV","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"text":"Value","kind":"typeIdentifier"},{"text":">>, ","kind":"text"},{"text":"successOrdering","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"AtomicUpdateOrdering","preciseIdentifier":"s:7Atomics20AtomicUpdateOrderingV","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"failureOrdering","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"AtomicLoadOrdering","preciseIdentifier":"s:7Atomics18AtomicLoadOrderingV","kind":"typeIdentifier"},{"text":") -> (exchanged","kind":"text"},{"text":": ","kind":"text"},{"text":"Bool","preciseIdentifier":"s:Sb","kind":"typeIdentifier"},{"text":", original","kind":"text"},{"text":": ","kind":"text"},{"text":"Value","kind":"typeIdentifier"},{"text":")","kind":"text"}],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Atomics\/AtomicRawRepresentableStorage\/atomicWeakCompareExchange(expected:desired:at:successOrdering:failureOrdering:)","role":"symbol","title":"atomicWeakCompareExchange(expected:desired:at:successOrdering:failureOrdering:)"},"doc://co.pointfree.VaporRouting/documentation/Atomics/AtomicRawRepresentableStorage":{"type":"topic","abstract":[{"type":"text","text":"The default atomic storage representation for an atomic "},{"type":"codeVoice","code":"RawRepresentable"},{"type":"text","text":" "},{"type":"text","text":"type whose "},{"type":"codeVoice","code":"RawValue"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"AtomicValue"},{"type":"text","text":"."}],"kind":"symbol","url":"\/documentation\/atomics\/atomicrawrepresentablestorage","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"AtomicRawRepresentableStorage","kind":"identifier"}],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Atomics\/AtomicRawRepresentableStorage","navigatorTitle":[{"text":"AtomicRawRepresentableStorage","kind":"identifier"}],"role":"symbol","title":"AtomicRawRepresentableStorage"},"doc://co.pointfree.VaporRouting/documentation/Atomics":{"url":"\/documentation\/atomics","kind":"symbol","type":"topic","abstract":[],"role":"collection","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Atomics","title":"Atomics"},"doc://co.pointfree.VaporRouting/documentation/Atomics/AtomicLoadOrdering":{"fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"AtomicLoadOrdering"}],"kind":"symbol","url":"\/documentation\/atomics\/atomicloadordering","role":"symbol","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Atomics\/AtomicLoadOrdering","type":"topic","title":"AtomicLoadOrdering","abstract":[{"text":"Specifies the memory ordering semantics of an atomic load operation.","type":"text"}],"navigatorTitle":[{"kind":"identifier","text":"AtomicLoadOrdering"}]},"doc://co.pointfree.VaporRouting/documentation/Atomics/AtomicUpdateOrdering":{"url":"\/documentation\/atomics\/atomicupdateordering","kind":"symbol","type":"topic","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"AtomicUpdateOrdering"}],"navigatorTitle":[{"kind":"identifier","text":"AtomicUpdateOrdering"}],"abstract":[{"type":"text","text":"Specifies the memory ordering semantics of an atomic read-modify-write"},{"type":"text","text":" "},{"type":"text","text":"operation."}],"role":"symbol","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Atomics\/AtomicUpdateOrdering","title":"AtomicUpdateOrdering"}}}