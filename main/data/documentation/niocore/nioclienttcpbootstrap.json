{"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/NIOClientTCPBootstrap"},"abstract":[{"type":"codeVoice","code":"NIOClientTCPBootstrap"},{"text":" is a bootstrap that allows you to bootstrap client TCP connections using NIO on BSD Sockets,","type":"text"},{"text":" ","type":"text"},{"text":"NIO Transport Services, or other ways.","type":"text"}],"metadata":{"modules":[{"name":"NIOCore"}],"title":"NIOClientTCPBootstrap","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"NIOClientTCPBootstrap","kind":"identifier"}],"role":"symbol","externalID":"s:7NIOCore21NIOClientTCPBootstrapV","roleHeading":"Structure","navigatorTitle":[{"text":"NIOClientTCPBootstrap","kind":"identifier"}],"symbolKind":"struct"},"topicSections":[{"identifiers":["doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/NIOClientTCPBootstrap\/init(_:tls:)"],"title":"Initializers"},{"identifiers":["doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/NIOClientTCPBootstrap\/underlyingBootstrap"],"title":"Instance Properties"},{"identifiers":["doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/NIOClientTCPBootstrap\/channelConvenienceOptions(_:)","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/NIOClientTCPBootstrap\/channelInitializer(_:)","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/NIOClientTCPBootstrap\/channelOption(_:value:)","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/NIOClientTCPBootstrap\/connect(host:port:)","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/NIOClientTCPBootstrap\/connect(to:)","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/NIOClientTCPBootstrap\/connect(unixDomainSocketPath:)","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/NIOClientTCPBootstrap\/connectTimeout(_:)","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/NIOClientTCPBootstrap\/enableTLS()"],"title":"Instance Methods"}],"schemaVersion":{"patch":0,"minor":3,"major":0},"primaryContentSections":[{"declarations":[{"platforms":["Linux"],"languages":["swift"],"tokens":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"NIOClientTCPBootstrap","kind":"identifier"}]}],"kind":"declarations"},{"content":[{"level":2,"anchor":"overview","type":"heading","text":"Overview"},{"type":"paragraph","inlineContent":[{"text":"Usually, to bootstrap a connection with SwiftNIO, you have to match the right ","type":"text"},{"type":"codeVoice","code":"EventLoopGroup"},{"text":", the right bootstrap,","type":"text"},{"text":" ","type":"text"},{"text":"and the right TLS implementation. Typical choices involve:","type":"text"}]},{"items":[{"content":[{"inlineContent":[{"type":"codeVoice","code":"MultiThreadedEventLoopGroup"},{"type":"text","text":", "},{"type":"codeVoice","code":"ClientBootstrap"},{"type":"text","text":", and "},{"type":"codeVoice","code":"NIOSSLClientHandler"},{"type":"text","text":" (from"},{"type":"text","text":" "},{"identifier":"https:\/\/github.com\/apple\/swift-nio-ssl","type":"reference","isActive":true},{"type":"text","text":") for NIO on BSD sockets."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"NIOTSEventLoopGroup"},{"type":"text","text":", "},{"type":"codeVoice","code":"NIOTSConnectionBootstrap"},{"type":"text","text":", and the Network.framework TLS implementation (all from"},{"type":"text","text":" "},{"type":"reference","identifier":"https:\/\/github.com\/apple\/swift-nio-transport-services","isActive":true},{"type":"text","text":"."}]}]}],"type":"unorderedList"},{"type":"paragraph","inlineContent":[{"text":"Bootstrapping connections that way works but is quite tedious for packages that support multiple ways of","type":"text"},{"text":" ","type":"text"},{"text":"bootstrapping. The idea behind ","type":"text"},{"type":"codeVoice","code":"NIOClientTCPBootstrap"},{"text":" is to do all configuration in one place (when you initialize","type":"text"},{"text":" ","type":"text"},{"text":"a ","type":"text"},{"type":"codeVoice","code":"NIOClientTCPBootstrap"},{"text":") and then have a common API that works for all use-cases.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"Example:","type":"text"}]},{"syntax":null,"code":["\/\/ This function combines the right pieces and returns you a \"universal client bootstrap\"","\/\/ (`NIOClientTCPBootstrap`). This allows you to bootstrap connections (with or without TLS) using either the","\/\/ NIO on sockets (`NIO`) or NIO on Network.framework (`NIOTransportServices`) stacks.","\/\/ The remainder of the code should be platform-independent.","func makeUniversalBootstrap(serverHostname: String) throws -> (NIOClientTCPBootstrap, EventLoopGroup) {","    func useNIOOnSockets() throws -> (NIOClientTCPBootstrap, EventLoopGroup) {","        let group = MultiThreadedEventLoopGroup(numberOfThreads: 1)","        let sslContext = try NIOSSLContext(configuration: TLSConfiguration.forClient())","        let bootstrap = try NIOClientTCPBootstrap(ClientBootstrap(group: group),","                                                  tls: NIOSSLClientTLSProvider(context: sslContext,","                                                                               serverHostname: serverHostname))","        return (bootstrap, group)","    }","","    #if canImport(Network)","    if #available(macOS 10.14, iOS 12, tvOS 12, watchOS 3, *) {","        \/\/ We run on a new-enough Darwin so we can use Network.framework","","        let group = NIOTSEventLoopGroup()","        let bootstrap = NIOClientTCPBootstrap(NIOTSConnectionBootstrap(group: group),","                                              tls: NIOTSClientTLSProvider())","        return (bootstrap, group)","    } else {","        \/\/ We're on Darwin but not new enough for Network.framework, so we fall back on NIO on BSD sockets.","        return try useNIOOnSockets()","    }","    #else","    \/\/ We are on a non-Darwin platform, so we'll use BSD sockets.","    return try useNIOOnSockets()","    #endif","}","","let (bootstrap, group) = try makeUniversalBootstrap(serverHostname: \"example.com\")","let connection = try bootstrap","        .channelInitializer { channel in","            channel.pipeline.addHandler(PrintEverythingHandler { _ in })","        }","        .enableTLS()","        .connect(host: \"example.com\", port: 443)","        .wait()"],"type":"codeListing"}],"kind":"content"}],"kind":"symbol","variants":[{"paths":["\/documentation\/niocore\/nioclienttcpbootstrap"],"traits":[{"interfaceLanguage":"swift"}]}],"hierarchy":{"paths":[["doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore"]]},"sections":[],"references":{"doc://co.pointfree.VaporRouting/documentation/NIOCore/NIOClientTCPBootstrap/connectTimeout(_:)":{"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/NIOClientTCPBootstrap\/connectTimeout(_:)","url":"\/documentation\/niocore\/nioclienttcpbootstrap\/connecttimeout(_:)","type":"topic","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"connectTimeout","kind":"identifier"},{"text":"(","kind":"text"},{"text":"TimeAmount","kind":"typeIdentifier","preciseIdentifier":"s:7NIOCore10TimeAmountV"},{"text":") -> ","kind":"text"},{"text":"NIOClientTCPBootstrap","kind":"typeIdentifier","preciseIdentifier":"s:7NIOCore21NIOClientTCPBootstrapV"}],"title":"connectTimeout(_:)","kind":"symbol","role":"symbol","abstract":[]},"https://github.com/apple/swift-nio-ssl":{"identifier":"https:\/\/github.com\/apple\/swift-nio-ssl","url":"https:\/\/github.com\/apple\/swift-nio-ssl","type":"link","titleInlineContent":[{"type":"codeVoice","code":"swift-nio-ssl"}],"title":"swift-nio-ssl"},"doc://co.pointfree.VaporRouting/documentation/NIOCore/NIOClientTCPBootstrap":{"type":"topic","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"NIOClientTCPBootstrap","kind":"identifier"}],"role":"symbol","url":"\/documentation\/niocore\/nioclienttcpbootstrap","title":"NIOClientTCPBootstrap","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/NIOClientTCPBootstrap","kind":"symbol","abstract":[{"type":"codeVoice","code":"NIOClientTCPBootstrap"},{"type":"text","text":" is a bootstrap that allows you to bootstrap client TCP connections using NIO on BSD Sockets,"},{"text":" ","type":"text"},{"text":"NIO Transport Services, or other ways.","type":"text"}],"navigatorTitle":[{"text":"NIOClientTCPBootstrap","kind":"identifier"}]},"doc://co.pointfree.VaporRouting/documentation/NIOCore/NIOClientTCPBootstrap/connect(unixDomainSocketPath:)":{"type":"topic","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"connect"},{"kind":"text","text":"("},{"kind":"externalParam","text":"unixDomainSocketPath"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"String","preciseIdentifier":"s:SS"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"EventLoopFuture","preciseIdentifier":"s:7NIOCore15EventLoopFutureC"},{"text":"<","kind":"text"},{"preciseIdentifier":"s:7NIOCore7ChannelP","text":"Channel","kind":"typeIdentifier"},{"text":">","kind":"text"}],"role":"symbol","url":"\/documentation\/niocore\/nioclienttcpbootstrap\/connect(unixdomainsocketpath:)","title":"connect(unixDomainSocketPath:)","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/NIOClientTCPBootstrap\/connect(unixDomainSocketPath:)","kind":"symbol","abstract":[{"type":"text","text":"Specify the "},{"code":"unixDomainSocket","type":"codeVoice"},{"text":" path to connect to for the UDS ","type":"text"},{"type":"codeVoice","code":"Channel"},{"text":" that will be established.","type":"text"}]},"doc://co.pointfree.VaporRouting/documentation/NIOCore/NIOClientTCPBootstrap/channelInitializer(_:)":{"kind":"symbol","role":"symbol","url":"\/documentation\/niocore\/nioclienttcpbootstrap\/channelinitializer(_:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"channelInitializer"},{"kind":"text","text":"(("},{"preciseIdentifier":"s:7NIOCore7ChannelP","kind":"typeIdentifier","text":"Channel"},{"kind":"text","text":") -> "},{"preciseIdentifier":"s:7NIOCore15EventLoopFutureC","kind":"typeIdentifier","text":"EventLoopFuture"},{"kind":"text","text":"<"},{"preciseIdentifier":"s:s4Voida","kind":"typeIdentifier","text":"Void"},{"kind":"text","text":">) -> "},{"preciseIdentifier":"s:7NIOCore21NIOClientTCPBootstrapV","kind":"typeIdentifier","text":"NIOClientTCPBootstrap"}],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/NIOClientTCPBootstrap\/channelInitializer(_:)","type":"topic","title":"channelInitializer(_:)","abstract":[{"type":"text","text":"Initialize the connected "},{"code":"SocketChannel","type":"codeVoice"},{"type":"text","text":" with "},{"code":"initializer","type":"codeVoice"},{"type":"text","text":". The most common task in initializer is to add"},{"type":"text","text":" "},{"code":"ChannelHandler","type":"codeVoice"},{"type":"text","text":"s to the "},{"code":"ChannelPipeline","type":"codeVoice"},{"type":"text","text":"."}]},"doc://co.pointfree.VaporRouting/documentation/NIOCore/NIOClientTCPBootstrap/connect(to:)":{"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/NIOClientTCPBootstrap\/connect(to:)","url":"\/documentation\/niocore\/nioclienttcpbootstrap\/connect(to:)","type":"topic","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"connect","kind":"identifier"},{"text":"(","kind":"text"},{"text":"to","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"SocketAddress","kind":"typeIdentifier","preciseIdentifier":"s:7NIOCore13SocketAddressO"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"EventLoopFuture","preciseIdentifier":"s:7NIOCore15EventLoopFutureC"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Channel","preciseIdentifier":"s:7NIOCore7ChannelP"},{"kind":"text","text":">"}],"title":"connect(to:)","kind":"symbol","role":"symbol","abstract":[{"text":"Specify the ","type":"text"},{"type":"codeVoice","code":"address"},{"text":" to connect to for the TCP ","type":"text"},{"type":"codeVoice","code":"Channel"},{"text":" that will be established.","type":"text"}]},"doc://co.pointfree.VaporRouting/documentation/NIOCore":{"type":"topic","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore","kind":"symbol","title":"NIOCore","abstract":[],"url":"\/documentation\/niocore","role":"collection"},"doc://co.pointfree.VaporRouting/documentation/NIOCore/NIOClientTCPBootstrap/channelConvenienceOptions(_:)":{"kind":"symbol","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/NIOClientTCPBootstrap\/channelConvenienceOptions(_:)","abstract":[{"text":"Specifies some ","type":"text"},{"code":"TCPConvenienceOption","type":"codeVoice"},{"text":"s to be applied to the channel.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"These are preferred over regular channel options as they are easier to use and restrict"},{"type":"text","text":" "},{"type":"text","text":"options to those which a normal user would consider."}],"title":"channelConvenienceOptions(_:)","url":"\/documentation\/niocore\/nioclienttcpbootstrap\/channelconvenienceoptions(_:)","role":"symbol","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"channelConvenienceOptions"},{"kind":"text","text":"("},{"kind":"typeIdentifier","text":"ChannelOptions","preciseIdentifier":"s:7NIOCore14ChannelOptionsV"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"TCPConvenienceOptions","preciseIdentifier":"s:7NIOCore14ChannelOptionsV014TCPConvenienceC0V"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"NIOClientTCPBootstrap","preciseIdentifier":"s:7NIOCore21NIOClientTCPBootstrapV"}],"type":"topic"},"doc://co.pointfree.VaporRouting/documentation/NIOCore/NIOClientTCPBootstrap/channelOption(_:value:)":{"abstract":[{"text":"Specifies a ","type":"text"},{"code":"ChannelOption","type":"codeVoice"},{"text":" to be applied to the ","type":"text"},{"code":"SocketChannel","type":"codeVoice"},{"text":".","type":"text"}],"type":"topic","url":"\/documentation\/niocore\/nioclienttcpbootstrap\/channeloption(_:value:)","kind":"symbol","title":"channelOption(_:value:)","role":"symbol","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/NIOClientTCPBootstrap\/channelOption(_:value:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"channelOption"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"Option"},{"kind":"text","text":">("},{"kind":"typeIdentifier","text":"Option"},{"text":", ","kind":"text"},{"text":"value","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"Option","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Value","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"text":"NIOClientTCPBootstrap","preciseIdentifier":"s:7NIOCore21NIOClientTCPBootstrapV","kind":"typeIdentifier"}]},"doc://co.pointfree.VaporRouting/documentation/NIOCore/NIOClientTCPBootstrap/enableTLS()":{"type":"topic","title":"enableTLS()","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"enableTLS"},{"kind":"text","text":"() -> "},{"kind":"typeIdentifier","preciseIdentifier":"s:7NIOCore21NIOClientTCPBootstrapV","text":"NIOClientTCPBootstrap"}],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/NIOClientTCPBootstrap\/enableTLS()","url":"\/documentation\/niocore\/nioclienttcpbootstrap\/enabletls()","abstract":[],"kind":"symbol","role":"symbol"},"doc://co.pointfree.VaporRouting/documentation/NIOCore/NIOClientTCPBootstrap/init(_:tls:)":{"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/NIOClientTCPBootstrap\/init(_:tls:)","title":"init(_:tls:)","abstract":[{"type":"text","text":"Initialize a "},{"type":"codeVoice","code":"NIOClientTCPBootstrap"},{"type":"text","text":" using the underlying "},{"type":"codeVoice","code":"Bootstrap"},{"type":"text","text":" alongside a compatible "},{"type":"codeVoice","code":"TLS"},{"text":" ","type":"text"},{"text":"implementation.","type":"text"}],"role":"symbol","type":"topic","kind":"symbol","url":"\/documentation\/niocore\/nioclienttcpbootstrap\/init(_:tls:)","fragments":[{"text":"init","kind":"identifier"},{"text":"<","kind":"text"},{"text":"Bootstrap","kind":"genericParameter"},{"text":", ","kind":"text"},{"text":"TLS","kind":"genericParameter"},{"text":">(","kind":"text"},{"text":"Bootstrap","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"tls","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"TLS","kind":"typeIdentifier"},{"text":")","kind":"text"}]},"doc://co.pointfree.VaporRouting/documentation/NIOCore/NIOClientTCPBootstrap/connect(host:port:)":{"type":"topic","title":"connect(host:port:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"connect"},{"kind":"text","text":"("},{"kind":"externalParam","text":"host"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"String","preciseIdentifier":"s:SS"},{"kind":"text","text":", "},{"kind":"externalParam","text":"port"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Int","preciseIdentifier":"s:Si"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"EventLoopFuture","preciseIdentifier":"s:7NIOCore15EventLoopFutureC"},{"kind":"text","text":"<"},{"text":"Channel","kind":"typeIdentifier","preciseIdentifier":"s:7NIOCore7ChannelP"},{"text":">","kind":"text"}],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/NIOClientTCPBootstrap\/connect(host:port:)","url":"\/documentation\/niocore\/nioclienttcpbootstrap\/connect(host:port:)","abstract":[{"type":"text","text":"Specify the "},{"type":"codeVoice","code":"host"},{"type":"text","text":" and "},{"type":"codeVoice","code":"port"},{"type":"text","text":" to connect to for the TCP "},{"type":"codeVoice","code":"Channel"},{"type":"text","text":" that will be established."}],"kind":"symbol","role":"symbol"},"doc://co.pointfree.VaporRouting/documentation/NIOCore/NIOClientTCPBootstrap/underlyingBootstrap":{"abstract":[],"url":"\/documentation\/niocore\/nioclienttcpbootstrap\/underlyingbootstrap","kind":"symbol","type":"topic","role":"symbol","fragments":[{"kind":"keyword","text":"let"},{"kind":"text","text":" "},{"kind":"identifier","text":"underlyingBootstrap"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"NIOClientTCPBootstrapProtocol","preciseIdentifier":"s:7NIOCore29NIOClientTCPBootstrapProtocolP"}],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/NIOClientTCPBootstrap\/underlyingBootstrap","title":"underlyingBootstrap"},"https://github.com/apple/swift-nio-transport-services":{"url":"https:\/\/github.com\/apple\/swift-nio-transport-services","title":"swift-nio-transport-services","identifier":"https:\/\/github.com\/apple\/swift-nio-transport-services","type":"link","titleInlineContent":[{"type":"codeVoice","code":"swift-nio-transport-services"}]}}}