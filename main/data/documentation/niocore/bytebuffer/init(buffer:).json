{"hierarchy":{"paths":[["doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/ByteBuffer"]]},"abstract":[{"type":"text","text":"Create a fresh "},{"code":"ByteBuffer","type":"codeVoice"},{"type":"text","text":" containing the readable bytes of "},{"code":"buffer","type":"codeVoice"},{"type":"text","text":"."}],"variants":[{"paths":["\/documentation\/niocore\/bytebuffer\/init(buffer:)"],"traits":[{"interfaceLanguage":"swift"}]}],"identifier":{"url":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/ByteBuffer\/init(buffer:)","interfaceLanguage":"swift"},"kind":"symbol","primaryContentSections":[{"kind":"declarations","declarations":[{"languages":["swift"],"tokens":[{"text":"init","kind":"keyword"},{"text":"(","kind":"text"},{"text":"buffer","kind":"externalParam"},{"text":": ","kind":"text"},{"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/ByteBuffer","text":"ByteBuffer","kind":"typeIdentifier","preciseIdentifier":"s:7NIOCore10ByteBufferV"},{"text":")","kind":"text"}],"platforms":["Linux"]}]},{"content":[{"type":"heading","text":"Discussion","level":2,"anchor":"discussion"},{"type":"paragraph","inlineContent":[{"text":"This may allocate a new ","type":"text"},{"code":"ByteBuffer","type":"codeVoice"},{"text":" with enough space to fit ","type":"text"},{"code":"buffer","type":"codeVoice"},{"text":" and potentially some extra space using","type":"text"},{"text":" ","type":"text"},{"text":"the default allocator.","type":"text"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"info: If you have access to a "},{"type":"codeVoice","code":"Channel"},{"type":"text","text":", "},{"type":"codeVoice","code":"ChannelHandlerContext"},{"type":"text","text":", or "},{"type":"codeVoice","code":"ByteBufferAllocator"},{"type":"text","text":" we"},{"type":"text","text":" "},{"type":"text","text":"recommend using "},{"type":"codeVoice","code":"channel.allocator.buffer(buffer:)"},{"type":"text","text":". Or if you want to write multiple items into the"},{"type":"text","text":" "},{"type":"text","text":"buffer use "},{"type":"codeVoice","code":"channel.allocator.buffer(capacity: ...)"},{"type":"text","text":" to allocate a "},{"type":"codeVoice","code":"ByteBuffer"},{"type":"text","text":" of the right"},{"type":"text","text":" "},{"type":"text","text":"size followed by a "},{"type":"codeVoice","code":"writeImmutableBuffer"},{"type":"text","text":" instead of using this method. This allows SwiftNIO to do"},{"type":"text","text":" "},{"type":"text","text":"accounting and optimisations of resources acquired for operations on a given "},{"type":"codeVoice","code":"Channel"},{"type":"text","text":" in the future."}]}]}]},{"type":"aside","style":"note","content":[{"inlineContent":[{"type":"text","text":"Use this method only if you deliberately want to reallocate a potentially smaller "},{"type":"codeVoice","code":"ByteBuffer"},{"type":"text","text":" than the"},{"type":"text","text":" "},{"type":"text","text":"one you already have. Given that "},{"type":"codeVoice","code":"ByteBuffer"},{"type":"text","text":" is a value type, defensive copies are not necessary. If"},{"type":"text","text":" "},{"type":"text","text":"you have a "},{"type":"codeVoice","code":"ByteBuffer"},{"type":"text","text":" but would like the "},{"type":"codeVoice","code":"readerIndex"},{"type":"text","text":" to start at "},{"type":"codeVoice","code":"0"},{"type":"text","text":", consider "},{"type":"codeVoice","code":"readSlice"},{"type":"text","text":" instead."}],"type":"paragraph"}],"name":"Note"}],"kind":"content"}],"sections":[],"schemaVersion":{"minor":3,"patch":0,"major":0},"metadata":{"modules":[{"name":"NIOCore"}],"fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"("},{"text":"buffer","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"ByteBuffer","kind":"typeIdentifier","preciseIdentifier":"s:7NIOCore10ByteBufferV"},{"text":")","kind":"text"}],"roleHeading":"Initializer","role":"symbol","symbolKind":"init","title":"init(buffer:)","externalID":"s:7NIOCore10ByteBufferV6bufferA2C_tcfc","extendedModule":"NIOCore"},"references":{"doc://co.pointfree.VaporRouting/documentation/NIOCore":{"type":"topic","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore","kind":"symbol","title":"NIOCore","abstract":[],"url":"\/documentation\/niocore","role":"collection"},"doc://co.pointfree.VaporRouting/documentation/NIOCore/ByteBuffer/init(buffer:)":{"fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"("},{"kind":"externalParam","text":"buffer"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"ByteBuffer","preciseIdentifier":"s:7NIOCore10ByteBufferV"},{"kind":"text","text":")"}],"type":"topic","url":"\/documentation\/niocore\/bytebuffer\/init(buffer:)","role":"symbol","title":"init(buffer:)","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/ByteBuffer\/init(buffer:)","kind":"symbol","abstract":[{"text":"Create a fresh ","type":"text"},{"code":"ByteBuffer","type":"codeVoice"},{"text":" containing the readable bytes of ","type":"text"},{"code":"buffer","type":"codeVoice"},{"text":".","type":"text"}]},"doc://co.pointfree.VaporRouting/documentation/NIOCore/ByteBuffer":{"kind":"symbol","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/ByteBuffer","navigatorTitle":[{"kind":"identifier","text":"ByteBuffer"}],"title":"ByteBuffer","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"ByteBuffer"}],"role":"symbol","url":"\/documentation\/niocore\/bytebuffer","abstract":[{"code":"ByteBuffer","type":"codeVoice"},{"type":"text","text":" stores contiguously allocated raw bytes. It is a random and sequential accessible sequence of zero or"},{"type":"text","text":" "},{"type":"text","text":"more bytes (octets)."}],"type":"topic"}}}