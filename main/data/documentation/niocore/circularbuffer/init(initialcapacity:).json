{"variants":[{"paths":["\/documentation\/niocore\/circularbuffer\/init(initialcapacity:)"],"traits":[{"interfaceLanguage":"swift"}]}],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/CircularBuffer\/init(initialCapacity:)"},"hierarchy":{"paths":[["doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/CircularBuffer"]]},"abstract":[{"text":"Allocates a buffer that can hold up to ","type":"text"},{"code":"initialCapacity","type":"codeVoice"},{"text":" elements and initialise an empty ring backed by","type":"text"},{"text":" ","type":"text"},{"text":"the buffer. When the ring grows to more than ","type":"text"},{"code":"initialCapacity","type":"codeVoice"},{"text":" elements the buffer will be expanded.","type":"text"}],"metadata":{"title":"init(initialCapacity:)","role":"symbol","fragments":[{"text":"init","kind":"identifier"},{"text":"(","kind":"text"},{"text":"initialCapacity","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"Int","preciseIdentifier":"s:Si","kind":"typeIdentifier"},{"text":")","kind":"text"}],"extendedModule":"NIOCore","modules":[{"name":"NIOCore"}],"externalID":"s:7NIOCore14CircularBufferV15initialCapacityACyxGSi_tcfc","symbolKind":"init","roleHeading":"Initializer"},"schemaVersion":{"patch":0,"minor":3,"major":0},"kind":"symbol","sections":[],"primaryContentSections":[{"kind":"declarations","declarations":[{"tokens":[{"text":"init","kind":"keyword"},{"text":"(","kind":"text"},{"text":"initialCapacity","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"Int","kind":"typeIdentifier","preciseIdentifier":"s:Si"},{"text":")","kind":"text"}],"languages":["swift"],"platforms":["Linux"]}]}],"references":{"doc://co.pointfree.VaporRouting/documentation/NIOCore":{"type":"topic","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore","kind":"symbol","title":"NIOCore","abstract":[],"url":"\/documentation\/niocore","role":"collection"},"doc://co.pointfree.VaporRouting/documentation/NIOCore/CircularBuffer":{"role":"symbol","kind":"symbol","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/CircularBuffer","title":"CircularBuffer","type":"topic","url":"\/documentation\/niocore\/circularbuffer","abstract":[{"type":"text","text":"An automatically expanding ring buffer implementation backed by a "},{"type":"codeVoice","code":"ContiguousArray"},{"type":"text","text":". Even though this implementation"},{"type":"text","text":" "},{"type":"text","text":"will automatically expand if more elements than "},{"type":"codeVoice","code":"initialCapacity"},{"text":" are stored, itâ€™s advantageous to prevent","type":"text"},{"text":" ","type":"text"},{"text":"expansions from happening frequently. Expansions will always force an allocation and a copy to happen.","type":"text"}],"navigatorTitle":[{"kind":"identifier","text":"CircularBuffer"}],"fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"CircularBuffer"}]},"doc://co.pointfree.VaporRouting/documentation/NIOCore/CircularBuffer/init(initialCapacity:)":{"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/CircularBuffer\/init(initialCapacity:)","type":"topic","abstract":[{"text":"Allocates a buffer that can hold up to ","type":"text"},{"code":"initialCapacity","type":"codeVoice"},{"text":" elements and initialise an empty ring backed by","type":"text"},{"text":" ","type":"text"},{"text":"the buffer. When the ring grows to more than ","type":"text"},{"code":"initialCapacity","type":"codeVoice"},{"text":" elements the buffer will be expanded.","type":"text"}],"kind":"symbol","title":"init(initialCapacity:)","role":"symbol","fragments":[{"text":"init","kind":"identifier"},{"text":"(","kind":"text"},{"text":"initialCapacity","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"Int","kind":"typeIdentifier","preciseIdentifier":"s:Si"},{"text":")","kind":"text"}],"url":"\/documentation\/niocore\/circularbuffer\/init(initialcapacity:)"}}}