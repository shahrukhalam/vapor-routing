{"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/ChannelCore\/tryUnwrapData(_:as:)"},"schemaVersion":{"patch":0,"major":0,"minor":3},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/niocore\/channelcore\/tryunwrapdata(_:as:)"]}],"sections":[],"metadata":{"title":"tryUnwrapData(_:as:)","roleHeading":"Instance Method","extendedModule":"NIOCore","fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"tryUnwrapData"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"T"},{"kind":"text","text":">("},{"kind":"typeIdentifier","text":"NIOAny","preciseIdentifier":"s:7NIOCore6NIOAnyV"},{"kind":"text","text":", "},{"kind":"externalParam","text":"as"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":".Type) -> "},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":"?"}],"role":"symbol","externalID":"s:7NIOCore11ChannelCorePAAE13tryUnwrapData_2asqd__SgAA6NIOAnyV_qd__mtlF","symbolKind":"method","modules":[{"name":"NIOCore"}]},"hierarchy":{"paths":[["doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/ChannelCore"]]},"abstract":[{"text":"Attempts to unwrap the given ","type":"text"},{"code":"NIOAny","type":"codeVoice"},{"text":" as a specific concrete type.","type":"text"}],"primaryContentSections":[{"declarations":[{"languages":["swift"],"tokens":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"tryUnwrapData","kind":"identifier"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"T"},{"kind":"text","text":">("},{"kind":"externalParam","text":"_"},{"kind":"text","text":" "},{"kind":"internalParam","text":"data"},{"kind":"text","text":": "},{"kind":"typeIdentifier","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/NIOAny","text":"NIOAny","preciseIdentifier":"s:7NIOCore6NIOAnyV"},{"kind":"text","text":", "},{"kind":"externalParam","text":"as"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":".Type = T.self) -> "},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":"?"}],"platforms":["Linux"]}],"kind":"declarations"},{"parameters":[{"content":[{"inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"NIOAny"},{"type":"text","text":" to unwrap."}],"type":"paragraph"}],"name":"data"},{"content":[{"type":"paragraph","inlineContent":[{"text":"The type to extract from the ","type":"text"},{"code":"NIOAny","type":"codeVoice"},{"text":".","type":"text"}]}],"name":"as"}],"kind":"parameters"},{"content":[{"level":2,"anchor":"return-value","text":"Return Value","type":"heading"},{"inlineContent":[{"type":"text","text":"The content of the "},{"type":"codeVoice","code":"NIOAny"},{"type":"text","text":", or "},{"type":"codeVoice","code":"nil"},{"type":"text","text":" if the type is incorrect."}],"type":"paragraph"}],"kind":"content"},{"content":[{"anchor":"discussion","level":2,"type":"heading","text":"Discussion"},{"inlineContent":[{"text":"This method is intended for use when writing custom ","type":"text"},{"type":"codeVoice","code":"ChannelCore"},{"text":" implementations.","type":"text"},{"text":" ","type":"text"},{"text":"This can safely be called in methods like ","type":"text"},{"type":"codeVoice","code":"write0"},{"text":" to extract data from the ","type":"text"},{"type":"codeVoice","code":"NIOAny"},{"text":" ","type":"text"},{"text":"provided in those cases.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"If the unwrap fails, this will return "},{"type":"codeVoice","code":"nil"},{"type":"text","text":". "},{"type":"codeVoice","code":"ChannelCore"},{"type":"text","text":" implementations should almost"},{"type":"text","text":" "},{"type":"text","text":"always support only one runtime type, so in general they should avoid using this and prefer"},{"type":"text","text":" "},{"type":"text","text":"using "},{"type":"codeVoice","code":"unwrapData"},{"type":"text","text":" instead. This method exists for rare use-cases where tolerating type"},{"type":"text","text":" "},{"type":"text","text":"mismatches is acceptable."}],"type":"paragraph"},{"content":[{"inlineContent":[{"text":"If you are implementing a ","type":"text"},{"type":"codeVoice","code":"ChannelCore"},{"text":", you should use ","type":"text"},{"type":"codeVoice","code":"unwrapData"},{"text":" unless you","type":"text"},{"text":" ","type":"text"},{"text":"are doing something ","type":"text"},{"inlineContent":[{"type":"text","text":"extremely"}],"type":"emphasis"},{"text":" unusual.","type":"text"}],"type":"paragraph"}],"name":"Warning","style":"warning","type":"aside"}],"kind":"content"}],"kind":"symbol","references":{"doc://co.pointfree.VaporRouting/documentation/NIOCore":{"type":"topic","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore","kind":"symbol","title":"NIOCore","abstract":[],"url":"\/documentation\/niocore","role":"collection"},"doc://co.pointfree.VaporRouting/documentation/NIOCore/ChannelCore":{"type":"topic","kind":"symbol","role":"symbol","title":"ChannelCore","url":"\/documentation\/niocore\/channelcore","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"ChannelCore"}],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/ChannelCore","abstract":[{"type":"text","text":"The core "},{"type":"codeVoice","code":"Channel"},{"type":"text","text":" methods that are for internal use of the "},{"type":"codeVoice","code":"Channel"},{"type":"text","text":" implementation only."}],"navigatorTitle":[{"kind":"identifier","text":"ChannelCore"}]},"doc://co.pointfree.VaporRouting/documentation/NIOCore/ChannelCore/tryUnwrapData(_:as:)":{"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/ChannelCore\/tryUnwrapData(_:as:)","kind":"symbol","type":"topic","url":"\/documentation\/niocore\/channelcore\/tryunwrapdata(_:as:)","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"tryUnwrapData","kind":"identifier"},{"text":"<","kind":"text"},{"text":"T","kind":"genericParameter"},{"text":">(","kind":"text"},{"text":"NIOAny","kind":"typeIdentifier","preciseIdentifier":"s:7NIOCore6NIOAnyV"},{"kind":"text","text":", "},{"kind":"externalParam","text":"as"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":".Type) -> "},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":"?"}],"title":"tryUnwrapData(_:as:)","role":"symbol","abstract":[{"text":"Attempts to unwrap the given ","type":"text"},{"code":"NIOAny","type":"codeVoice"},{"text":" as a specific concrete type.","type":"text"}]},"doc://co.pointfree.VaporRouting/documentation/NIOCore/NIOAny":{"kind":"symbol","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/NIOAny","url":"\/documentation\/niocore\/nioany","type":"topic","title":"NIOAny","role":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"NIOAny","kind":"identifier"}],"navigatorTitle":[{"text":"NIOAny","kind":"identifier"}],"abstract":[{"code":"NIOAny","type":"codeVoice"},{"text":" is an opaque container for values of ","type":"text"},{"inlineContent":[{"text":"any","type":"text"}],"type":"emphasis"},{"text":" type, similar to Swiftâ€™s builtin ","type":"text"},{"code":"Any","type":"codeVoice"},{"text":" type. Contrary to","type":"text"},{"text":" ","type":"text"},{"code":"Any","type":"codeVoice"},{"text":" the overhead of ","type":"text"},{"code":"NIOAny","type":"codeVoice"},{"text":" depends on the the type of the wrapped value. Certain types that are important","type":"text"},{"text":" ","type":"text"},{"text":"for the performance of a SwiftNIO application like ","type":"text"},{"code":"ByteBuffer","type":"codeVoice"},{"text":", ","type":"text"},{"code":"FileRegion","type":"codeVoice"},{"text":" and ","type":"text"},{"code":"AddressEnvelope<ByteBuffer>","type":"codeVoice"},{"text":" can be expected","type":"text"},{"text":" ","type":"text"},{"text":"to be wrapped almost without overhead. All others will have similar performance as if they were passed as an ","type":"text"},{"code":"Any","type":"codeVoice"},{"text":" as","type":"text"},{"text":" ","type":"text"},{"code":"NIOAny","type":"codeVoice"},{"text":" just like ","type":"text"},{"code":"Any","type":"codeVoice"},{"text":" will contain them within an existential container.","type":"text"}]}}}