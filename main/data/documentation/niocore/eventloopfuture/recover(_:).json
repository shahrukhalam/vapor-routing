{"schemaVersion":{"patch":0,"minor":3,"major":0},"primaryContentSections":[{"declarations":[{"platforms":["Linux"],"languages":["swift"],"tokens":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"recover","kind":"identifier"},{"text":"(","kind":"text"},{"text":"_","kind":"externalParam"},{"text":" ","kind":"text"},{"text":"callback","kind":"internalParam"},{"text":": ","kind":"text"},{"text":"@escaping","kind":"keyword"},{"text":" (","kind":"text"},{"preciseIdentifier":"s:s5ErrorP","text":"Error","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"text":"Value","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"preciseIdentifier":"s:7NIOCore15EventLoopFutureC","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/EventLoopFuture","text":"EventLoopFuture","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"text":"Value","kind":"typeIdentifier"},{"text":">","kind":"text"}]}],"kind":"declarations"},{"parameters":[{"name":"callback","content":[{"type":"paragraph","inlineContent":[{"text":"Function that will receive the error value of this ","type":"text"},{"code":"EventLoopFuture","type":"codeVoice"},{"text":" and return","type":"text"},{"text":" ","type":"text"},{"text":"a new value lifted into a new ","type":"text"},{"code":"EventLoopFuture","type":"codeVoice"},{"text":".","type":"text"}]}]}],"kind":"parameters"},{"kind":"content","content":[{"type":"heading","level":2,"anchor":"return-value","text":"Return Value"},{"inlineContent":[{"text":"A future that will receive the recovered value.","type":"text"}],"type":"paragraph"}]},{"kind":"content","content":[{"anchor":"discussion","type":"heading","level":2,"text":"Discussion"},{"inlineContent":[{"text":"Operations performed in ","type":"text"},{"code":"recover","type":"codeVoice"},{"text":" should not block, or they will block the entire","type":"text"},{"text":" ","type":"text"},{"text":"event loop. ","type":"text"},{"code":"recover","type":"codeVoice"},{"text":" is intended for use when you have the ability to synchronously","type":"text"},{"text":" ","type":"text"},{"text":"recover from errors.","type":"text"}],"type":"paragraph"}]}],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/EventLoopFuture\/recover(_:)"},"hierarchy":{"paths":[["doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/EventLoopFuture"]]},"variants":[{"paths":["\/documentation\/niocore\/eventloopfuture\/recover(_:)"],"traits":[{"interfaceLanguage":"swift"}]}],"metadata":{"extendedModule":"NIOCore","title":"recover(_:)","externalID":"s:7NIOCore15EventLoopFutureC7recoveryACyxGxs5Error_pcF","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"recover","kind":"identifier"},{"text":"((","kind":"text"},{"text":"Error","preciseIdentifier":"s:s5ErrorP","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"text":"Value","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"text":"EventLoopFuture","preciseIdentifier":"s:7NIOCore15EventLoopFutureC","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"text":"Value","kind":"typeIdentifier"},{"text":">","kind":"text"}],"modules":[{"name":"NIOCore"}],"roleHeading":"Instance Method","role":"symbol","symbolKind":"method"},"abstract":[{"type":"text","text":"When the current "},{"code":"EventLoopFuture<Value>","type":"codeVoice"},{"type":"text","text":" is in an error state, run the provided callback, which"},{"type":"text","text":" "},{"type":"text","text":"can recover from the error and return a new value of type "},{"code":"Value","type":"codeVoice"},{"type":"text","text":". The provided callback may not "},{"code":"throw","type":"codeVoice"},{"type":"text","text":","},{"type":"text","text":" "},{"text":"so this function should be used when the error is always recoverable.","type":"text"}],"sections":[],"kind":"symbol","references":{"doc://co.pointfree.VaporRouting/documentation/NIOCore/EventLoopFuture":{"url":"\/documentation\/niocore\/eventloopfuture","kind":"symbol","type":"topic","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"EventLoopFuture"}],"navigatorTitle":[{"kind":"identifier","text":"EventLoopFuture"}],"abstract":[{"type":"text","text":"Holder for a result that will be provided later."}],"role":"symbol","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/EventLoopFuture","title":"EventLoopFuture"},"doc://co.pointfree.VaporRouting/documentation/NIOCore/EventLoopFuture/recover(_:)":{"type":"topic","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/EventLoopFuture\/recover(_:)","role":"symbol","url":"\/documentation\/niocore\/eventloopfuture\/recover(_:)","title":"recover(_:)","abstract":[{"type":"text","text":"When the current "},{"type":"codeVoice","code":"EventLoopFuture<Value>"},{"type":"text","text":" is in an error state, run the provided callback, which"},{"type":"text","text":" "},{"type":"text","text":"can recover from the error and return a new value of type "},{"type":"codeVoice","code":"Value"},{"type":"text","text":". The provided callback may not "},{"type":"codeVoice","code":"throw"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"so this function should be used when the error is always recoverable."}],"fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"recover","kind":"identifier"},{"text":"((","kind":"text"},{"text":"Error","preciseIdentifier":"s:s5ErrorP","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"text":"Value","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"text":"EventLoopFuture","kind":"typeIdentifier","preciseIdentifier":"s:7NIOCore15EventLoopFutureC"},{"text":"<","kind":"text"},{"text":"Value","kind":"typeIdentifier"},{"text":">","kind":"text"}],"kind":"symbol"},"doc://co.pointfree.VaporRouting/documentation/NIOCore":{"type":"topic","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore","kind":"symbol","title":"NIOCore","abstract":[],"url":"\/documentation\/niocore","role":"collection"}}}