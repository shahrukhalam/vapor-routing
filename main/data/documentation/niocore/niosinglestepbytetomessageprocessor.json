{"identifier":{"url":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/NIOSingleStepByteToMessageProcessor","interfaceLanguage":"swift"},"kind":"symbol","metadata":{"modules":[{"name":"NIOCore"}],"title":"NIOSingleStepByteToMessageProcessor","role":"symbol","externalID":"s:7NIOCore35NIOSingleStepByteToMessageProcessorC","navigatorTitle":[{"kind":"identifier","text":"NIOSingleStepByteToMessageProcessor"}],"roleHeading":"Class","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"NIOSingleStepByteToMessageProcessor"}],"symbolKind":"class"},"schemaVersion":{"patch":0,"major":0,"minor":3},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/niocore\/niosinglestepbytetomessageprocessor"]}],"abstract":[{"code":"NIOSingleStepByteToMessageProcessor","type":"codeVoice"},{"type":"text","text":" uses a "},{"code":"NIOSingleStepByteToMessageDecoder","type":"codeVoice"},{"type":"text","text":" to produce messages"},{"type":"text","text":" "},{"type":"text","text":"from a stream of incoming bytes. It works like "},{"code":"ByteToMessageHandler","type":"codeVoice"},{"type":"text","text":" but may be used outside of the channel pipeline. This allows"},{"type":"text","text":" "},{"type":"text","text":"processing of wrapped protocols in a general way."}],"topicSections":[{"identifiers":["doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/NIOSingleStepByteToMessageProcessor\/init(_:maximumBufferSize:)"],"title":"Initializers"},{"identifiers":["doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/NIOSingleStepByteToMessageProcessor\/finishProcessing(seenEOF:_:)","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/NIOSingleStepByteToMessageProcessor\/process(buffer:_:)"],"title":"Instance Methods"}],"sections":[],"hierarchy":{"paths":[["doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore"]]},"primaryContentSections":[{"kind":"declarations","declarations":[{"tokens":[{"kind":"keyword","text":"final"},{"kind":"text","text":" "},{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"NIOSingleStepByteToMessageProcessor"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"Decoder"},{"kind":"text","text":"> "},{"kind":"keyword","text":"where"},{"kind":"text","text":" "},{"kind":"typeIdentifier","text":"Decoder"},{"kind":"text","text":" : "},{"preciseIdentifier":"s:7NIOCore33NIOSingleStepByteToMessageDecoderP","kind":"typeIdentifier","text":"NIOSingleStepByteToMessageDecoder","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/NIOSingleStepByteToMessageDecoder"}],"languages":["swift"],"platforms":["Linux"]}]},{"content":[{"anchor":"overview","level":2,"type":"heading","text":"Overview"},{"inlineContent":[{"type":"text","text":"A "},{"type":"codeVoice","code":"NIOSingleStepByteToMessageProcessor"},{"type":"text","text":" is first initialized with a "},{"type":"codeVoice","code":"NIOSingleStepByteToMessageDecoder"},{"type":"text","text":". Then"},{"type":"text","text":" "},{"type":"text","text":"call "},{"type":"codeVoice","code":"process"},{"type":"text","text":" as each "},{"type":"codeVoice","code":"ByteBuffer"},{"type":"text","text":" is received from the stream. The closure is called repeatedly with each message produced by"},{"type":"text","text":" "},{"type":"text","text":"the decoder."}],"type":"paragraph"},{"inlineContent":[{"text":"When your stream ends, call ","type":"text"},{"code":"finishProcessing","type":"codeVoice"},{"text":" to ensure all buffered data is passed to your decoder. This will call ","type":"text"},{"code":"decodeLast","type":"codeVoice"},{"text":" ","type":"text"},{"text":"one or more times with any remaining data.","type":"text"}],"type":"paragraph"},{"anchor":"Example","level":3,"type":"heading","text":"Example"},{"inlineContent":[{"text":"Below is an example of a protocol decoded by ","type":"text"},{"type":"codeVoice","code":"TwoByteStringCodec"},{"text":" that is sent over HTTP. ","type":"text"},{"type":"codeVoice","code":"RawBodyMessageHandler"},{"text":" forwards the headers","type":"text"},{"text":" ","type":"text"},{"text":"and trailers directly and uses ","type":"text"},{"type":"codeVoice","code":"NIOSingleStepByteToMessageProcessor"},{"text":" to send whole decoded messages.","type":"text"}],"type":"paragraph"},{"syntax":null,"type":"codeListing","code":["class TwoByteStringCodec: NIOSingleStepByteToMessageDecoder {","    typealias InboundOut = String","","    public func decode(buffer: inout ByteBuffer) throws -> InboundOut? {","        return buffer.readString(length: 2)","    }","","    public func decodeLast(buffer: inout ByteBuffer, seenEOF: Bool) throws -> InboundOut? {","        return try self.decode(buffer: &buffer)","    }","}","","class RawBodyMessageHandler: ChannelInboundHandler {","    typealias InboundIn = HTTPServerRequestPart \/\/ alias for HTTPPart<HTTPRequestHead, ByteBuffer>","    \/\/ This converts the body from ByteBuffer to String, our message type","    typealias InboundOut = HTTPPart<HTTPRequestHead, String>","","    private var messageProcessor: NIOSingleStepByteToMessageProcessor<TwoByteStringCodec>? = nil","","    func channelRead(context: ChannelHandlerContext, data: NIOAny) {","        let req = self.unwrapInboundIn(data)","        do {","            switch req {","            case .head(let head):","                \/\/ simply forward on the head","                context.fireChannelRead(self.wrapInboundOut(.head(head)))","            case .body(let body):","                if self.messageProcessor == nil {","                    self.messageProcessor = NIOSingleStepByteToMessageProcessor(TwoByteStringCodec())","                }","                try self.messageProcessor!.process(buffer: body) { message in","                    self.channelReadMessage(context: context, message: message)","                }","            case .end(let trailers):","                \/\/ Forward on any remaining messages and the trailers","                try self.messageProcessor?.finishProcessing(seenEOF: false) { message in","                    self.channelReadMessage(context: context, message: message)","                }","                context.fireChannelRead(self.wrapInboundOut(.end(trailers)))","            }","        } catch {","            context.fireErrorCaught(error)","        }","    }","","    \/\/ Forward on the body messages as whole messages","    func channelReadMessage(context: ChannelHandlerContext, message: String) {","        context.fireChannelRead(self.wrapInboundOut(.body(message)))","    }","}","","private class DecodedBodyHTTPHandler: ChannelInboundHandler {","    typealias InboundIn = HTTPPart<HTTPRequestHead, String>","    typealias OutboundOut = HTTPServerResponsePart","","    var msgs: [String] = []","","    func channelRead(context: ChannelHandlerContext, data: NIOAny) {","        let message = self.unwrapInboundIn(data)","","        switch message {","        case .head(let head):","            print(\"head: \\(head)\")","        case .body(let msg):","            self.msgs.append(msg)","        case .end(let trailers):","            print(\"trailers: \\(trailers)\")","            var responseBuffer = context.channel.allocator.buffer(capacity: 32)","            for msg in msgs {","                responseBuffer.writeString(msg)","                responseBuffer.writeStaticString(\"\\n\")","            }","            var headers = HTTPHeaders()","            headers.add(name: \"content-length\", value: String(responseBuffer.readableBytes))","","            context.write(self.wrapOutboundOut(HTTPServerResponsePart.head(","                HTTPResponseHead(version: .http1_1,","                                 status: .ok, headers: headers))), promise: nil)","","            context.write(self.wrapOutboundOut(HTTPServerResponsePart.body(","                .byteBuffer(responseBuffer))), promise: nil)","            context.writeAndFlush(self.wrapOutboundOut(HTTPServerResponsePart.end(nil)), promise: nil)","        }","    }","}","","let group = MultiThreadedEventLoopGroup(numberOfThreads: 1)","let bootstrap = ServerBootstrap(group: group).childChannelInitializer({channel in","    channel.pipeline.configureHTTPServerPipeline(withPipeliningAssistance: true, withErrorHandling: true).flatMap { _ in","        channel.pipeline.addHandlers([RawBodyMessageHandler(), DecodedBodyHTTPHandler()])","    }","})","let channelFuture = bootstrap.bind(host: \"127.0.0.1\", port: 0)"]}],"kind":"content"}],"references":{"doc://co.pointfree.VaporRouting/documentation/NIOCore":{"type":"topic","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore","kind":"symbol","title":"NIOCore","abstract":[],"url":"\/documentation\/niocore","role":"collection"},"doc://co.pointfree.VaporRouting/documentation/NIOCore/NIOSingleStepByteToMessageProcessor/init(_:maximumBufferSize:)":{"type":"topic","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/NIOSingleStepByteToMessageProcessor\/init(_:maximumBufferSize:)","kind":"symbol","role":"symbol","title":"init(_:maximumBufferSize:)","url":"\/documentation\/niocore\/niosinglestepbytetomessageprocessor\/init(_:maximumbuffersize:)","abstract":[{"type":"text","text":"Initialize a "},{"code":"NIOSingleStepByteToMessageProcessor","type":"codeVoice"},{"type":"text","text":"."}],"fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"("},{"kind":"typeIdentifier","text":"Decoder"},{"kind":"text","text":", "},{"kind":"externalParam","text":"maximumBufferSize"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Int","preciseIdentifier":"s:Si"},{"kind":"text","text":"?)"}]},"doc://co.pointfree.VaporRouting/documentation/NIOCore/NIOSingleStepByteToMessageProcessor":{"role":"symbol","kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"NIOSingleStepByteToMessageProcessor"}],"abstract":[{"type":"codeVoice","code":"NIOSingleStepByteToMessageProcessor"},{"type":"text","text":" uses a "},{"type":"codeVoice","code":"NIOSingleStepByteToMessageDecoder"},{"type":"text","text":" to produce messages"},{"type":"text","text":" "},{"type":"text","text":"from a stream of incoming bytes. It works like "},{"code":"ByteToMessageHandler","type":"codeVoice"},{"type":"text","text":" but may be used outside of the channel pipeline. This allows"},{"type":"text","text":" "},{"type":"text","text":"processing of wrapped protocols in a general way."}],"fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"NIOSingleStepByteToMessageProcessor"}],"type":"topic","title":"NIOSingleStepByteToMessageProcessor","url":"\/documentation\/niocore\/niosinglestepbytetomessageprocessor","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/NIOSingleStepByteToMessageProcessor"},"doc://co.pointfree.VaporRouting/documentation/NIOCore/NIOSingleStepByteToMessageProcessor/process(buffer:_:)":{"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/NIOSingleStepByteToMessageProcessor\/process(buffer:_:)","url":"\/documentation\/niocore\/niosinglestepbytetomessageprocessor\/process(buffer:_:)","type":"topic","title":"process(buffer:_:)","role":"symbol","conformance":{"constraints":[{"type":"codeVoice","code":"Decoder"},{"text":" conforms to ","type":"text"},{"code":"NIOSingleStepByteToMessageDecoder","type":"codeVoice"},{"text":".","type":"text"}],"availabilityPrefix":[{"type":"text","text":"Available when"}],"conformancePrefix":[{"type":"text","text":"Conforms when"}]},"kind":"symbol","abstract":[{"type":"text","text":"Feed data into the "},{"type":"codeVoice","code":"NIOSingleStepByteToMessageProcessor"}],"fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"process"},{"kind":"text","text":"("},{"kind":"externalParam","text":"buffer"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"ByteBuffer","preciseIdentifier":"s:7NIOCore10ByteBufferV"},{"kind":"text","text":", ("},{"kind":"typeIdentifier","text":"Decoder"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"InboundOut"},{"kind":"text","text":") "},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"Void","preciseIdentifier":"s:s4Voida"},{"kind":"text","text":") "},{"kind":"keyword","text":"throws"}]},"doc://co.pointfree.VaporRouting/documentation/NIOCore/NIOSingleStepByteToMessageProcessor/finishProcessing(seenEOF:_:)":{"conformance":{"conformancePrefix":[{"text":"Conforms when","type":"text"}],"availabilityPrefix":[{"text":"Available when","type":"text"}],"constraints":[{"code":"Decoder","type":"codeVoice"},{"text":" conforms to ","type":"text"},{"code":"NIOSingleStepByteToMessageDecoder","type":"codeVoice"},{"text":".","type":"text"}]},"kind":"symbol","type":"topic","title":"finishProcessing(seenEOF:_:)","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/NIOSingleStepByteToMessageProcessor\/finishProcessing(seenEOF:_:)","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"finishProcessing","kind":"identifier"},{"text":"(","kind":"text"},{"text":"seenEOF","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"Bool","kind":"typeIdentifier","preciseIdentifier":"s:Sb"},{"text":", (","kind":"text"},{"text":"Decoder","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"InboundOut","kind":"typeIdentifier"},{"text":") ","kind":"text"},{"text":"throws","kind":"keyword"},{"text":" -> ","kind":"text"},{"text":"Void","kind":"typeIdentifier","preciseIdentifier":"s:s4Voida"},{"text":") ","kind":"text"},{"text":"throws","kind":"keyword"}],"url":"\/documentation\/niocore\/niosinglestepbytetomessageprocessor\/finishprocessing(seeneof:_:)","role":"symbol","abstract":[{"text":"Call when there is no data left in the stream. Calls ","type":"text"},{"code":"Decoder","type":"codeVoice"},{"text":".","type":"text"},{"code":"decodeLast","type":"codeVoice"},{"text":" one or more times. If there is no data left","type":"text"},{"text":" ","type":"text"},{"code":"decodeLast","type":"codeVoice"},{"text":" will be called one time with an empty ","type":"text"},{"code":"ByteBuffer","type":"codeVoice"},{"text":".","type":"text"}]},"doc://co.pointfree.VaporRouting/documentation/NIOCore/NIOSingleStepByteToMessageDecoder":{"type":"topic","kind":"symbol","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"NIOSingleStepByteToMessageDecoder","kind":"identifier"}],"abstract":[{"type":"text","text":"A simplified version of "},{"type":"codeVoice","code":"ByteToMessageDecoder"},{"type":"text","text":" that can generate zero or one messages for each invocation of "},{"type":"codeVoice","code":"decode"},{"type":"text","text":" or "},{"type":"codeVoice","code":"decodeLast"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"Having "},{"type":"codeVoice","code":"decode"},{"type":"text","text":" and "},{"type":"codeVoice","code":"decodeLast"},{"type":"text","text":" return an optional message avoids re-entrancy problems, since the functions relinquish exclusive access"},{"type":"text","text":" "},{"type":"text","text":"to the "},{"type":"codeVoice","code":"ByteBuffer"},{"type":"text","text":" when returning. This allows for greatly simplified processing."}],"role":"symbol","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/NIOSingleStepByteToMessageDecoder","url":"\/documentation\/niocore\/niosinglestepbytetomessagedecoder","navigatorTitle":[{"text":"NIOSingleStepByteToMessageDecoder","kind":"identifier"}],"title":"NIOSingleStepByteToMessageDecoder"}}}