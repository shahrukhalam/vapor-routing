{"hierarchy":{"paths":[["doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/EventLoopGroup"]]},"sections":[],"kind":"symbol","schemaVersion":{"minor":3,"major":0,"patch":0},"abstract":[{"type":"text","text":"Returns any "},{"type":"codeVoice","code":"EventLoop"},{"type":"text","text":" from the "},{"type":"codeVoice","code":"EventLoopGroup"},{"type":"text","text":", a common choice is the current "},{"type":"codeVoice","code":"EventLoop"},{"type":"text","text":"."}],"identifier":{"url":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/EventLoopGroup\/any()-2lpuq","interfaceLanguage":"swift"},"primaryContentSections":[{"declarations":[{"tokens":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"any","kind":"identifier"},{"text":"() -> ","kind":"text"},{"preciseIdentifier":"s:7NIOCore9EventLoopP","text":"EventLoop","kind":"typeIdentifier","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/EventLoop"}],"platforms":["Linux"],"languages":["swift"]}],"kind":"declarations"},{"content":[{"type":"heading","level":2,"text":"Discussion","anchor":"discussion"},{"style":"warning","type":"aside","name":"Warning","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"You cannot rely on the returned "},{"type":"codeVoice","code":"EventLoop"},{"type":"text","text":" being the current one, not all "},{"type":"codeVoice","code":"EventLoopGroup"},{"type":"text","text":"s support"},{"type":"text","text":" "},{"type":"text","text":"choosing the current one. Use this method only if you are truly happy with "},{"type":"emphasis","inlineContent":[{"type":"text","text":"any"}]},{"type":"text","text":" "},{"type":"codeVoice","code":"EventLoop"},{"type":"text","text":" of this"},{"type":"text","text":" "},{"type":"codeVoice","code":"EventLoopGroup"},{"type":"text","text":" instance."}]}]},{"style":"note","type":"aside","name":"Note","content":[{"inlineContent":[{"text":"You will only receive the current ","type":"text"},{"type":"codeVoice","code":"EventLoop"},{"text":" here iff the current ","type":"text"},{"type":"codeVoice","code":"EventLoop"},{"text":" belongs to the","type":"text"},{"text":" ","type":"text"},{"type":"codeVoice","code":"EventLoopGroup"},{"text":" you call ","type":"text"},{"type":"codeVoice","code":"any()"},{"text":" on.","type":"text"}],"type":"paragraph"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This method is useful having access to an "},{"type":"codeVoice","code":"EventLoopGroup"},{"type":"text","text":" without the knowledge of which "},{"type":"codeVoice","code":"EventLoop"},{"type":"text","text":" would be"},{"type":"text","text":" "},{"type":"text","text":"the best one to select to create a new "},{"type":"codeVoice","code":"EventLoopFuture"},{"type":"text","text":". This commonly happens in libraries where the user"},{"type":"text","text":" "},{"type":"text","text":"cannot indicate what "},{"type":"codeVoice","code":"EventLoop"},{"type":"text","text":" they would like their futures on."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Typically, it is faster to kick off a new operation on the "},{"type":"emphasis","inlineContent":[{"type":"text","text":"current"}]},{"type":"text","text":" "},{"type":"codeVoice","code":"EventLoop"},{"type":"text","text":" because that minimised thread"},{"type":"text","text":" "},{"type":"text","text":"switches. Hence, if situations where you don’t need precise knowledge of what "},{"type":"codeVoice","code":"EventLoop"},{"type":"text","text":" some code is running"},{"type":"text","text":" "},{"type":"text","text":"on, use "},{"type":"codeVoice","code":"any()"},{"type":"text","text":" to indicate this."}]},{"type":"paragraph","inlineContent":[{"text":"The rule of thumb is: If you are trying to do ","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"load balancing"}]},{"text":", use ","type":"text"},{"code":"next()","type":"codeVoice"},{"text":". If you just want to create a new","type":"text"},{"text":" ","type":"text"},{"text":"future or kick off some operation, use ","type":"text"},{"code":"any()","type":"codeVoice"},{"text":".","type":"text"}]}],"kind":"content"}],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/niocore\/eventloopgroup\/any()-2lpuq"]}],"metadata":{"modules":[{"name":"NIOCore"}],"roleHeading":"Instance Method","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"any"},{"kind":"text","text":"() -> "},{"kind":"typeIdentifier","text":"EventLoop","preciseIdentifier":"s:7NIOCore9EventLoopP"}],"role":"symbol","title":"any()","externalID":"s:7NIOCore14EventLoopGroupP3anyAA0bC0_pyF","symbolKind":"method","required":true},"defaultImplementationsSections":[{"title":"EventLoop Implementations","identifiers":["doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/EventLoop\/any()"]},{"title":"EventLoopGroup Implementations","identifiers":["doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/EventLoopGroup\/any()-7m1zy"]}],"references":{"doc://co.pointfree.VaporRouting/documentation/NIOCore/EventLoopGroup":{"role":"symbol","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/EventLoopGroup","navigatorTitle":[{"text":"EventLoopGroup","kind":"identifier"}],"title":"EventLoopGroup","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"EventLoopGroup","kind":"identifier"}],"url":"\/documentation\/niocore\/eventloopgroup","kind":"symbol","type":"topic","abstract":[{"type":"text","text":"Provides an endless stream of "},{"type":"codeVoice","code":"EventLoop"},{"type":"text","text":"s to use."}]},"doc://co.pointfree.VaporRouting/documentation/NIOCore/EventLoop":{"abstract":[{"type":"text","text":"An EventLoop processes IO \/ tasks in an endless loop for "},{"type":"codeVoice","code":"Channel"},{"type":"text","text":"s until it’s closed."}],"url":"\/documentation\/niocore\/eventloop","type":"topic","title":"EventLoop","role":"symbol","navigatorTitle":[{"text":"EventLoop","kind":"identifier"}],"fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"EventLoop","kind":"identifier"}],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/EventLoop","kind":"symbol"},"doc://co.pointfree.VaporRouting/documentation/NIOCore/EventLoopGroup/any()-7m1zy":{"url":"\/documentation\/niocore\/eventloopgroup\/any()-7m1zy","title":"any()","kind":"symbol","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/EventLoopGroup\/any()-7m1zy","type":"topic","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"any"},{"kind":"text","text":"() -> "},{"kind":"typeIdentifier","text":"EventLoop","preciseIdentifier":"s:7NIOCore9EventLoopP"}],"abstract":[{"text":"The default implementation of ","type":"text"},{"code":"any()","type":"codeVoice"},{"text":" just returns the ","type":"text"},{"code":"next()","type":"codeVoice"},{"text":" EventLoop but it’s highly recommended to","type":"text"},{"text":" ","type":"text"},{"text":"override this and return the current ","type":"text"},{"code":"EventLoop","type":"codeVoice"},{"text":" if possible.","type":"text"}],"role":"symbol"},"doc://co.pointfree.VaporRouting/documentation/NIOCore":{"type":"topic","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore","kind":"symbol","title":"NIOCore","abstract":[],"url":"\/documentation\/niocore","role":"collection"},"doc://co.pointfree.VaporRouting/documentation/NIOCore/EventLoop/any()":{"url":"\/documentation\/niocore\/eventloop\/any()","abstract":[{"type":"text","text":"An "},{"type":"codeVoice","code":"EventLoop"},{"type":"text","text":" forms a singular "},{"type":"codeVoice","code":"EventLoopGroup"},{"type":"text","text":", returning itself as ‘any’ "},{"type":"codeVoice","code":"EventLoop"},{"type":"text","text":"."}],"kind":"symbol","role":"symbol","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/EventLoop\/any()","title":"any()","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"any"},{"kind":"text","text":"() -> "},{"kind":"typeIdentifier","text":"EventLoop","preciseIdentifier":"s:7NIOCore9EventLoopP"}],"type":"topic"},"doc://co.pointfree.VaporRouting/documentation/NIOCore/EventLoopGroup/any()-2lpuq":{"url":"\/documentation\/niocore\/eventloopgroup\/any()-2lpuq","title":"any()","kind":"symbol","required":true,"defaultImplementations":2,"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/EventLoopGroup\/any()-2lpuq","type":"topic","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"any"},{"kind":"text","text":"() -> "},{"kind":"typeIdentifier","text":"EventLoop","preciseIdentifier":"s:7NIOCore9EventLoopP"}],"abstract":[{"text":"Returns any ","type":"text"},{"code":"EventLoop","type":"codeVoice"},{"text":" from the ","type":"text"},{"code":"EventLoopGroup","type":"codeVoice"},{"text":", a common choice is the current ","type":"text"},{"code":"EventLoop","type":"codeVoice"},{"text":".","type":"text"}],"role":"symbol"}}}