{"schemaVersion":{"major":0,"minor":3,"patch":0},"hierarchy":{"paths":[["doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore"]]},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/niocore\/channeloutboundhandler"]}],"topicSections":[{"identifiers":["doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/ChannelOutboundHandler\/OutboundIn"],"title":"Associated Types"},{"identifiers":["doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/ChannelOutboundHandler\/unwrapOutboundIn(_:)-7u2n"],"title":"Instance Methods"}],"relationshipsSections":[{"identifiers":["doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/ChannelHandler"],"kind":"relationships","type":"inheritsFrom","title":"Inherits From"},{"identifiers":["doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/AcceptBackoffHandler","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/BackPressureHandler","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/ByteToMessageHandler","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOExtras\/DebugOutboundEventsHandler","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOHTTP2\/HTTP2FramePayloadToHTTP1ClientCodec","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOHTTP2\/HTTP2FramePayloadToHTTP1ServerCodec","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOHTTP2\/HTTP2StreamMultiplexer","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOHTTP2\/HTTP2ToHTTP1ClientCodec","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOHTTP2\/HTTP2ToHTTP1ServerCodec","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOHTTP1\/HTTPRequestEncoder","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOHTTPCompression\/HTTPResponseCompressor","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOHTTP1\/HTTPResponseEncoder","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOHTTP1\/HTTPServerPipelineHandler","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOHTTP1\/HTTPServerProtocolErrorHandler","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/IdleStateHandler","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOExtras\/LengthFieldPrepender","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/MessageToByteHandler","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOTransportServices\/NIOFilterEmptyWritesHandler","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOHTTP2\/NIOHTTP2Handler","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOHTTP1\/NIOHTTPClientUpgradeHandler","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOHTTPCompression\/NIOHTTPRequestCompressor","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOHTTPCompression\/NIOHTTPRequestDecompressor","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOHTTP1\/NIOHTTPRequestHeadersValidator","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOHTTPCompression\/NIOHTTPResponseDecompressor","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOHTTP1\/NIOHTTPResponseHeadersValidator","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOExtras\/NIOJSONRPCFraming\/ContentLengthHeaderFrameEncoder","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOSSL\/NIOSSLClientHandler","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOSSL\/NIOSSLHandler","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOSSL\/NIOSSLServerHandler","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOExtras\/NIOWritePCAPHandler","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOExtras\/RequestResponseHandler","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOSOCKS\/SOCKSClientHandler","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOSOCKS\/SOCKSServerHandshakeHandler","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOWebSocket\/WebSocketFrameEncoder"],"kind":"relationships","type":"conformingTypes","title":"Conforming Types"}],"abstract":[{"code":"ChannelHandler","type":"codeVoice"},{"type":"text","text":" which handles outbound I\/O events or intercept an outbound I\/O operation for a "},{"code":"Channel","type":"codeVoice"},{"type":"text","text":"."}],"metadata":{"navigatorTitle":[{"text":"ChannelOutboundHandler","kind":"identifier"}],"roleHeading":"Protocol","modules":[{"name":"NIOCore"}],"symbolKind":"protocol","role":"symbol","externalID":"s:7NIOCore22ChannelOutboundHandlerP","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"text":"ChannelOutboundHandler","kind":"identifier"}],"title":"ChannelOutboundHandler"},"kind":"symbol","sections":[],"primaryContentSections":[{"declarations":[{"languages":["swift"],"tokens":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"ChannelOutboundHandler"},{"kind":"text","text":" : "},{"kind":"typeIdentifier","text":"_ChannelOutboundHandler"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"_EmittingChannelHandler"}],"platforms":["Linux"]}],"kind":"declarations"},{"kind":"content","content":[{"anchor":"overview","level":2,"text":"Overview","type":"heading"},{"inlineContent":[{"type":"text","text":"Please refer to "},{"code":"_ChannelOutboundHandler","type":"codeVoice"},{"type":"text","text":" and "},{"code":"_EmittingChannelHandler","type":"codeVoice"},{"type":"text","text":" for more details on the provided methods."}],"type":"paragraph"}]}],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/ChannelOutboundHandler"},"references":{"doc://co.pointfree.VaporRouting/documentation/NIOCore/IdleStateHandler":{"navigatorTitle":[{"kind":"identifier","text":"IdleStateHandler"}],"url":"\/documentation\/niocore\/idlestatehandler","title":"IdleStateHandler","abstract":[{"text":"Triggers an IdleStateEvent when a Channel has not performed read, write, or both operation for a while.","type":"text"}],"type":"topic","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"IdleStateHandler"}],"kind":"symbol","role":"symbol","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/IdleStateHandler"},"doc://co.pointfree.VaporRouting/documentation/NIOSOCKS/ClientMessage":{"navigatorTitle":[{"kind":"identifier","text":"ClientMessage"}],"url":"\/documentation\/niosocks\/clientmessage","title":"ClientMessage","abstract":[{"text":"Sent by the client and received by the server.","type":"text"}],"type":"topic","fragments":[{"kind":"keyword","text":"enum"},{"kind":"text","text":" "},{"kind":"identifier","text":"ClientMessage"}],"kind":"symbol","role":"symbol","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOSOCKS\/ClientMessage"},"doc://co.pointfree.VaporRouting/documentation/NIOWebSocket/WebSocketFrameEncoder":{"navigatorTitle":[{"kind":"identifier","text":"WebSocketFrameEncoder"}],"url":"\/documentation\/niowebsocket\/websocketframeencoder","title":"WebSocketFrameEncoder","abstract":[{"text":"An inbound ","type":"text"},{"code":"ChannelHandler","type":"codeVoice"},{"text":" that serializes structured websocket frames into a byte stream","type":"text"},{"text":" ","type":"text"},{"text":"for sending on the network.","type":"text"}],"type":"topic","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"WebSocketFrameEncoder"}],"kind":"symbol","role":"symbol","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOWebSocket\/WebSocketFrameEncoder"},"doc://co.pointfree.VaporRouting/documentation/NIOCore/ChannelHandler":{"navigatorTitle":[{"kind":"identifier","text":"ChannelHandler"}],"url":"\/documentation\/niocore\/channelhandler","title":"ChannelHandler","abstract":[{"text":"You should ","type":"text"},{"inlineContent":[{"type":"text","text":"never"}],"type":"emphasis"},{"text":" implement this protocol directly. Please implement one of its sub-protocols.","type":"text"}],"type":"topic","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"ChannelHandler"}],"kind":"symbol","role":"symbol","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/ChannelHandler"},"doc://co.pointfree.VaporRouting/documentation/NIOCore":{"type":"topic","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore","kind":"symbol","title":"NIOCore","abstract":[],"url":"\/documentation\/niocore","role":"collection"},"doc://co.pointfree.VaporRouting/documentation/NIOExtras/DebugInboundEventsHandler":{"navigatorTitle":[{"kind":"identifier","text":"DebugInboundEventsHandler"}],"url":"\/documentation\/nioextras\/debuginboundeventshandler","title":"DebugInboundEventsHandler","abstract":[{"code":"ChannelInboundHandler","type":"codeVoice"},{"text":" that prints all inbound events that pass through the pipeline by default,","type":"text"},{"text":" ","type":"text"},{"text":"overridable by providing your own closure for custom logging. See ","type":"text"},{"isActive":true,"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOExtras\/DebugOutboundEventsHandler","type":"reference"},{"text":" for outbound events.","type":"text"}],"type":"topic","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"DebugInboundEventsHandler"}],"kind":"symbol","role":"symbol","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOExtras\/DebugInboundEventsHandler"},"doc://co.pointfree.VaporRouting/documentation/NIOHTTP2/NIOHTTP2Handler":{"navigatorTitle":[{"kind":"identifier","text":"NIOHTTP2Handler"}],"url":"\/documentation\/niohttp2\/niohttp2handler","title":"NIOHTTP2Handler","abstract":[{"isActive":true,"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOHTTP2\/NIOHTTP2Handler","type":"reference"},{"text":" implements the HTTP\/2 protocol for a single connection.","type":"text"}],"type":"topic","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"NIOHTTP2Handler"}],"kind":"symbol","role":"symbol","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOHTTP2\/NIOHTTP2Handler"},"doc://co.pointfree.VaporRouting/documentation/NIOSSL/NIOSSLClientHandler":{"navigatorTitle":[{"kind":"identifier","text":"NIOSSLClientHandler"}],"url":"\/documentation\/niossl\/niosslclienthandler","title":"NIOSSLClientHandler","abstract":[{"text":"A channel handler that wraps a channel in TLS using NIOSSL.","type":"text"},{"text":" ","type":"text"},{"text":"This handler can be used in channels that are acting as the client","type":"text"},{"text":" ","type":"text"},{"text":"in the TLS dialog. For server connections, use the ","type":"text"},{"isActive":true,"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOSSL\/NIOSSLServerHandler","type":"reference"},{"text":".","type":"text"}],"type":"topic","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"NIOSSLClientHandler"}],"kind":"symbol","role":"symbol","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOSSL\/NIOSSLClientHandler"},"doc://co.pointfree.VaporRouting/documentation/NIOExtras/DebugOutboundEventsHandler":{"navigatorTitle":[{"kind":"identifier","text":"DebugOutboundEventsHandler"}],"url":"\/documentation\/nioextras\/debugoutboundeventshandler","title":"DebugOutboundEventsHandler","abstract":[{"text":"ChannelOutboundHandler that prints all outbound events that pass through the pipeline by default,","type":"text"},{"text":" ","type":"text"},{"text":"overridable by providing your own closure for custom logging. See ","type":"text"},{"isActive":true,"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOExtras\/DebugInboundEventsHandler","type":"reference"},{"text":" for inbound events.","type":"text"}],"type":"topic","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"DebugOutboundEventsHandler"}],"kind":"symbol","role":"symbol","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOExtras\/DebugOutboundEventsHandler"},"doc://co.pointfree.VaporRouting/documentation/NIOSSL/NIOSSLHandler":{"navigatorTitle":[{"kind":"identifier","text":"NIOSSLHandler"}],"url":"\/documentation\/niossl\/niosslhandler","title":"NIOSSLHandler","abstract":[{"text":"The base class for all NIOSSL handlers.","type":"text"}],"type":"topic","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"NIOSSLHandler"}],"kind":"symbol","role":"symbol","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOSSL\/NIOSSLHandler"},"doc://co.pointfree.VaporRouting/documentation/NIOSOCKS/SOCKSClientHandler":{"navigatorTitle":[{"kind":"identifier","text":"SOCKSClientHandler"}],"url":"\/documentation\/niosocks\/socksclienthandler","title":"SOCKSClientHandler","abstract":[{"text":"Connects to a SOCKS server to establish a proxied connection","type":"text"},{"text":" ","type":"text"},{"text":"to a host. This handler should be inserted at the beginning of a","type":"text"},{"text":" ","type":"text"},{"text":"channel’s pipeline. Note that SOCKS only supports fully-qualified","type":"text"},{"text":" ","type":"text"},{"text":"domain names and IPv4 or IPv6 sockets, and not UNIX sockets.","type":"text"}],"type":"topic","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"SOCKSClientHandler"}],"kind":"symbol","role":"symbol","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOSOCKS\/SOCKSClientHandler"},"doc://co.pointfree.VaporRouting/documentation/NIOHTTP1/HTTPServerPipelineHandler":{"navigatorTitle":[{"kind":"identifier","text":"HTTPServerPipelineHandler"}],"url":"\/documentation\/niohttp1\/httpserverpipelinehandler","title":"HTTPServerPipelineHandler","abstract":[{"text":"A ","type":"text"},{"code":"ChannelHandler","type":"codeVoice"},{"text":" that handles HTTP pipelining by buffering inbound data until a","type":"text"},{"text":" ","type":"text"},{"text":"response has been sent.","type":"text"}],"type":"topic","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"HTTPServerPipelineHandler"}],"kind":"symbol","role":"symbol","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOHTTP1\/HTTPServerPipelineHandler"},"doc://co.pointfree.VaporRouting/documentation/NIOCore/ByteToMessageHandler":{"navigatorTitle":[{"kind":"identifier","text":"ByteToMessageHandler"}],"url":"\/documentation\/niocore\/bytetomessagehandler","title":"ByteToMessageHandler","abstract":[{"text":"A handler which turns a given ","type":"text"},{"code":"ByteToMessageDecoder","type":"codeVoice"},{"text":" into a ","type":"text"},{"code":"ChannelInboundHandler","type":"codeVoice"},{"text":" that can then be added to a","type":"text"},{"text":" ","type":"text"},{"code":"ChannelPipeline","type":"codeVoice"},{"text":".","type":"text"}],"type":"topic","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"ByteToMessageHandler"}],"kind":"symbol","role":"symbol","conformance":{"conformancePrefix":[{"text":"Conforms when","type":"text"}],"availabilityPrefix":[{"text":"Available when","type":"text"}],"constraints":[{"code":"Decoder","type":"codeVoice"},{"text":" conforms to ","type":"text"},{"code":"WriteObservingByteToMessageDecoder","type":"codeVoice"},{"text":".","type":"text"}]},"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/ByteToMessageHandler"},"doc://co.pointfree.VaporRouting/documentation/NIOHTTP2/HTTP2FramePayloadToHTTP1ServerCodec":{"navigatorTitle":[{"kind":"identifier","text":"HTTP2FramePayloadToHTTP1ServerCodec"}],"url":"\/documentation\/niohttp2\/http2framepayloadtohttp1servercodec","title":"HTTP2FramePayloadToHTTP1ServerCodec","abstract":[{"text":"A simple channel handler that translates HTTP\/2 concepts into HTTP\/1 data types,","type":"text"},{"text":" ","type":"text"},{"text":"and vice versa, for use on the server side.","type":"text"}],"type":"topic","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"HTTP2FramePayloadToHTTP1ServerCodec"}],"kind":"symbol","role":"symbol","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOHTTP2\/HTTP2FramePayloadToHTTP1ServerCodec"},"doc://co.pointfree.VaporRouting/documentation/NIOSOCKS/SOCKSServerHandshakeHandler":{"navigatorTitle":[{"kind":"identifier","text":"SOCKSServerHandshakeHandler"}],"url":"\/documentation\/niosocks\/socksserverhandshakehandler","title":"SOCKSServerHandshakeHandler","abstract":[{"text":"Add this handshake handler to the front of your channel, closest to the network.","type":"text"},{"text":" ","type":"text"},{"text":"The handler will receive bytes from the network and run them through a state machine","type":"text"},{"text":" ","type":"text"},{"text":"and parser to enforce SOCKSv5 protocol correctness. Inbound bytes will by parsed into","type":"text"},{"text":" ","type":"text"},{"isActive":true,"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOSOCKS\/ClientMessage","type":"reference"},{"text":" for downstream consumption. Send ","type":"text"},{"isActive":true,"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOSOCKS\/ServerMessage","type":"reference"},{"text":" to this","type":"text"},{"text":" ","type":"text"},{"text":"handler.","type":"text"}],"type":"topic","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"SOCKSServerHandshakeHandler"}],"kind":"symbol","role":"symbol","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOSOCKS\/SOCKSServerHandshakeHandler"},"doc://co.pointfree.VaporRouting/documentation/NIOHTTP2/HTTP2StreamMultiplexer":{"kind":"symbol","abstract":[{"type":"text","text":"A channel handler that creates a child channel for each HTTP\/2 stream."}],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOHTTP2\/HTTP2StreamMultiplexer","type":"topic","title":"HTTP2StreamMultiplexer","url":"\/documentation\/niohttp2\/http2streammultiplexer","role":"symbol","navigatorTitle":[{"kind":"identifier","text":"HTTP2StreamMultiplexer"}],"fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"HTTP2StreamMultiplexer"}]},"doc://co.pointfree.VaporRouting/documentation/NIOHTTPCompression/NIOHTTPResponseDecompressor":{"kind":"symbol","abstract":[{"type":"text","text":"Duplex channel handler which will accept deflate and gzip encoded responses and decompress them."}],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOHTTPCompression\/NIOHTTPResponseDecompressor","type":"topic","title":"NIOHTTPResponseDecompressor","url":"\/documentation\/niohttpcompression\/niohttpresponsedecompressor","role":"symbol","navigatorTitle":[{"kind":"identifier","text":"NIOHTTPResponseDecompressor"}],"fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"NIOHTTPResponseDecompressor"}]},"doc://co.pointfree.VaporRouting/documentation/NIOCore/BackPressureHandler":{"kind":"symbol","abstract":[{"type":"text","text":"ChannelHandler implementation which enforces back-pressure by stopping to read from the remote peer when it cannot write back fast enough."},{"type":"text","text":" "},{"type":"text","text":"It will start reading again once pending data was written."}],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/BackPressureHandler","type":"topic","title":"BackPressureHandler","url":"\/documentation\/niocore\/backpressurehandler","role":"symbol","navigatorTitle":[{"kind":"identifier","text":"BackPressureHandler"}],"fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"BackPressureHandler"}]},"doc://co.pointfree.VaporRouting/documentation/NIOHTTPCompression/NIOHTTPRequestDecompressor":{"kind":"symbol","abstract":[{"type":"text","text":"Channel hander to decompress incoming HTTP data."}],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOHTTPCompression\/NIOHTTPRequestDecompressor","type":"topic","title":"NIOHTTPRequestDecompressor","url":"\/documentation\/niohttpcompression\/niohttprequestdecompressor","role":"symbol","navigatorTitle":[{"text":"NIOHTTPRequestDecompressor","kind":"identifier"}],"fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"text":"NIOHTTPRequestDecompressor","kind":"identifier"}]},"doc://co.pointfree.VaporRouting/documentation/NIOHTTPCompression/HTTPResponseCompressor":{"kind":"symbol","abstract":[{"type":"text","text":"A "},{"type":"reference","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOHTTPCompression\/HTTPResponseCompressor","isActive":true},{"type":"text","text":" is a duplex channel handler that handles automatic streaming compression of"},{"type":"text","text":" "},{"type":"text","text":"HTTP responses. It respects the client’s Accept-Encoding preferences, including q-values if present,"},{"type":"text","text":" "},{"type":"text","text":"and ensures that clients are served the compression algorithm that works best for them."}],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOHTTPCompression\/HTTPResponseCompressor","type":"topic","title":"HTTPResponseCompressor","url":"\/documentation\/niohttpcompression\/httpresponsecompressor","role":"symbol","navigatorTitle":[{"text":"HTTPResponseCompressor","kind":"identifier"}],"fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"HTTPResponseCompressor","kind":"identifier"}]},"doc://co.pointfree.VaporRouting/documentation/NIOHTTP2/HTTP2FramePayloadToHTTP1ClientCodec":{"kind":"symbol","abstract":[{"type":"text","text":"A simple channel handler that translates HTTP\/2 concepts into HTTP\/1 data types,"},{"type":"text","text":" "},{"type":"text","text":"and vice versa, for use on the client side."}],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOHTTP2\/HTTP2FramePayloadToHTTP1ClientCodec","type":"topic","title":"HTTP2FramePayloadToHTTP1ClientCodec","url":"\/documentation\/niohttp2\/http2framepayloadtohttp1clientcodec","role":"symbol","navigatorTitle":[{"kind":"identifier","text":"HTTP2FramePayloadToHTTP1ClientCodec"}],"fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"HTTP2FramePayloadToHTTP1ClientCodec"}]},"doc://co.pointfree.VaporRouting/documentation/NIOHTTPCompression/NIOHTTPRequestCompressor":{"kind":"symbol","abstract":[{"type":"reference","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOHTTPCompression\/NIOHTTPRequestCompressor","isActive":true},{"type":"text","text":" is an outbound channel handler that handles automatic streaming compression of"},{"type":"text","text":" "},{"type":"text","text":"HTTP requests."}],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOHTTPCompression\/NIOHTTPRequestCompressor","type":"topic","title":"NIOHTTPRequestCompressor","url":"\/documentation\/niohttpcompression\/niohttprequestcompressor","role":"symbol","navigatorTitle":[{"kind":"identifier","text":"NIOHTTPRequestCompressor"}],"fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"NIOHTTPRequestCompressor"}]},"doc://co.pointfree.VaporRouting/documentation/NIOExtras/RequestResponseHandler":{"kind":"symbol","abstract":[{"type":"reference","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOExtras\/RequestResponseHandler","isActive":true},{"type":"text","text":" receives a "},{"type":"codeVoice","code":"Request"},{"type":"text","text":" alongside an "},{"code":"EventLoopPromise<Response>","type":"codeVoice"},{"type":"text","text":" from the "},{"code":"Channel","type":"codeVoice"},{"type":"text","text":"‘s"},{"type":"text","text":" "},{"type":"text","text":"outbound side. It will fulfill the promise with the "},{"type":"codeVoice","code":"Response"},{"type":"text","text":" once it’s received from the "},{"type":"codeVoice","code":"Channel"},{"type":"text","text":"’s inbound"},{"type":"text","text":" "},{"type":"text","text":"side."}],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOExtras\/RequestResponseHandler","type":"topic","title":"RequestResponseHandler","url":"\/documentation\/nioextras\/requestresponsehandler","role":"symbol","navigatorTitle":[{"text":"RequestResponseHandler","kind":"identifier"}],"fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"RequestResponseHandler","kind":"identifier"}]},"doc://co.pointfree.VaporRouting/documentation/NIOCore/AcceptBackoffHandler":{"navigatorTitle":[{"kind":"identifier","text":"AcceptBackoffHandler"}],"abstract":[{"type":"text","text":"A "},{"code":"ChannelHandler","type":"codeVoice"},{"type":"text","text":" that implements a backoff for a "},{"type":"codeVoice","code":"ServerChannel"},{"type":"text","text":" when accept produces an "},{"type":"codeVoice","code":"IOError"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"These errors are often recoverable by reducing the rate at which we call accept."}],"role":"symbol","title":"AcceptBackoffHandler","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/AcceptBackoffHandler","kind":"symbol","type":"topic","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"AcceptBackoffHandler"}],"url":"\/documentation\/niocore\/acceptbackoffhandler"},"doc://co.pointfree.VaporRouting/documentation/NIOExtras/NIOWritePCAPHandler":{"navigatorTitle":[{"kind":"identifier","text":"NIOWritePCAPHandler"}],"abstract":[{"type":"text","text":"A "},{"code":"ChannelHandler","type":"codeVoice"},{"type":"text","text":" that can write a "},{"identifier":"https:\/\/en.wikipedia.org\/wiki\/Pcap","type":"reference","isActive":true},{"type":"text","text":" containing the send\/received"},{"type":"text","text":" "},{"type":"text","text":"data as synthesized TCP packet captures."}],"role":"symbol","title":"NIOWritePCAPHandler","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOExtras\/NIOWritePCAPHandler","kind":"symbol","type":"topic","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"NIOWritePCAPHandler"}],"url":"\/documentation\/nioextras\/niowritepcaphandler"},"doc://co.pointfree.VaporRouting/documentation/NIOSSL/NIOSSLServerHandler":{"navigatorTitle":[{"kind":"identifier","text":"NIOSSLServerHandler"}],"abstract":[{"type":"text","text":"A channel handler that wraps a channel in TLS using NIOSSL. This"},{"type":"text","text":" "},{"type":"text","text":"handler can be used in channels that are acting as the server in"},{"type":"text","text":" "},{"type":"text","text":"the TLS dialog. For client connections, use the "},{"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOSSL\/NIOSSLClientHandler","type":"reference","isActive":true},{"type":"text","text":"."}],"role":"symbol","title":"NIOSSLServerHandler","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOSSL\/NIOSSLServerHandler","kind":"symbol","type":"topic","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"NIOSSLServerHandler"}],"url":"\/documentation\/niossl\/niosslserverhandler"},"doc://co.pointfree.VaporRouting/documentation/NIOCore/ChannelOutboundHandler":{"navigatorTitle":[{"kind":"identifier","text":"ChannelOutboundHandler"}],"abstract":[{"code":"ChannelHandler","type":"codeVoice"},{"type":"text","text":" which handles outbound I\/O events or intercept an outbound I\/O operation for a "},{"code":"Channel","type":"codeVoice"},{"type":"text","text":"."}],"role":"symbol","title":"ChannelOutboundHandler","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/ChannelOutboundHandler","kind":"symbol","type":"topic","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"ChannelOutboundHandler"}],"url":"\/documentation\/niocore\/channeloutboundhandler"},"doc://co.pointfree.VaporRouting/documentation/NIOSOCKS/ServerMessage":{"navigatorTitle":[{"kind":"identifier","text":"ServerMessage"}],"abstract":[{"type":"text","text":"Sent by the server and received by the client."}],"role":"symbol","title":"ServerMessage","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOSOCKS\/ServerMessage","kind":"symbol","type":"topic","fragments":[{"text":"enum","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"ServerMessage"}],"url":"\/documentation\/niosocks\/servermessage"},"doc://co.pointfree.VaporRouting/documentation/NIOExtras/NIOJSONRPCFraming/ContentLengthHeaderFrameEncoder":{"navigatorTitle":[{"kind":"identifier","text":"ContentLengthHeaderFrameEncoder"}],"abstract":[{"type":"reference","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOExtras\/NIOJSONRPCFraming\/ContentLengthHeaderFrameEncoder","isActive":true},{"type":"text","text":" is responsible for emitting JSON-RPC wire protocol with ‘Content-Length’"},{"type":"text","text":" "},{"type":"text","text":"HTTP-like headers as used by for example by LSP (Language Server Protocol)."}],"role":"symbol","title":"NIOJSONRPCFraming.ContentLengthHeaderFrameEncoder","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOExtras\/NIOJSONRPCFraming\/ContentLengthHeaderFrameEncoder","kind":"symbol","type":"topic","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"ContentLengthHeaderFrameEncoder"}],"url":"\/documentation\/nioextras\/niojsonrpcframing\/contentlengthheaderframeencoder"},"doc://co.pointfree.VaporRouting/documentation/NIOHTTP1/HTTPRequestEncoder":{"navigatorTitle":[{"kind":"identifier","text":"HTTPRequestEncoder"}],"abstract":[{"type":"text","text":"A "},{"code":"ChannelOutboundHandler","type":"codeVoice"},{"type":"text","text":" that can serialize HTTP requests."}],"role":"symbol","title":"HTTPRequestEncoder","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOHTTP1\/HTTPRequestEncoder","kind":"symbol","type":"topic","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"HTTPRequestEncoder"}],"url":"\/documentation\/niohttp1\/httprequestencoder"},"doc://co.pointfree.VaporRouting/documentation/NIOTransportServices/NIOFilterEmptyWritesHandler":{"navigatorTitle":[{"kind":"identifier","text":"NIOFilterEmptyWritesHandler"}],"abstract":[{"type":"text","text":"A "},{"code":"ChannelHandler","type":"codeVoice"},{"type":"text","text":" that checks for outbound writes of zero length, which are then dropped. This is"},{"type":"text","text":" "},{"type":"text","text":"due to a bug in "},{"type":"codeVoice","code":"Network Framework"},{"type":"text","text":", where zero byte TCP writes lead to stalled connections."},{"type":"text","text":" "},{"type":"text","text":"Write promises are confirmed in the correct order."}],"role":"symbol","title":"NIOFilterEmptyWritesHandler","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOTransportServices\/NIOFilterEmptyWritesHandler","kind":"symbol","type":"topic","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"NIOFilterEmptyWritesHandler"}],"url":"\/documentation\/niotransportservices\/niofilteremptywriteshandler"},"doc://co.pointfree.VaporRouting/documentation/NIOHTTP1/NIOHTTPResponseHeadersValidator":{"abstract":[{"type":"text","text":"A ChannelHandler to validate that outbound response headers are spec-compliant."}],"navigatorTitle":[{"kind":"identifier","text":"NIOHTTPResponseHeadersValidator"}],"url":"\/documentation\/niohttp1\/niohttpresponseheadersvalidator","role":"symbol","kind":"symbol","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"NIOHTTPResponseHeadersValidator"}],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOHTTP1\/NIOHTTPResponseHeadersValidator","type":"topic","title":"NIOHTTPResponseHeadersValidator"},"doc://co.pointfree.VaporRouting/documentation/NIOHTTP1/NIOHTTPRequestHeadersValidator":{"kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"NIOHTTPRequestHeadersValidator"}],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOHTTP1\/NIOHTTPRequestHeadersValidator","type":"topic","url":"\/documentation\/niohttp1\/niohttprequestheadersvalidator","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"NIOHTTPRequestHeadersValidator"}],"title":"NIOHTTPRequestHeadersValidator","abstract":[{"type":"text","text":"A ChannelHandler to validate that outbound request headers are spec-compliant."}],"role":"symbol"},"doc://co.pointfree.VaporRouting/documentation/NIOHTTP1/HTTPServerProtocolErrorHandler":{"abstract":[{"type":"text","text":"A simple channel handler that catches errors emitted by parsing HTTP requests"},{"type":"text","text":" "},{"type":"text","text":"and sends 400 Bad Request responses."}],"navigatorTitle":[{"text":"HTTPServerProtocolErrorHandler","kind":"identifier"}],"url":"\/documentation\/niohttp1\/httpserverprotocolerrorhandler","role":"symbol","kind":"symbol","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"text":"HTTPServerProtocolErrorHandler","kind":"identifier"}],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOHTTP1\/HTTPServerProtocolErrorHandler","type":"topic","title":"HTTPServerProtocolErrorHandler"},"doc://co.pointfree.VaporRouting/documentation/NIOHTTP2/HTTP2ToHTTP1ClientCodec":{"kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"HTTP2ToHTTP1ClientCodec"}],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOHTTP2\/HTTP2ToHTTP1ClientCodec","type":"topic","deprecated":true,"url":"\/documentation\/niohttp2\/http2tohttp1clientcodec","fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"HTTP2ToHTTP1ClientCodec"}],"title":"HTTP2ToHTTP1ClientCodec","abstract":[{"type":"text","text":"A simple channel handler that translates HTTP\/2 concepts into HTTP\/1 data types,"},{"type":"text","text":" "},{"type":"text","text":"and vice versa, for use on the client side."}],"role":"symbol"},"doc://co.pointfree.VaporRouting/documentation/NIOCore/MessageToByteHandler":{"abstract":[{"type":"text","text":"A handler which turns a given "},{"code":"MessageToByteEncoder","type":"codeVoice"},{"type":"text","text":" into a "},{"code":"ChannelOutboundHandler","type":"codeVoice"},{"type":"text","text":" that can then be added to a"},{"type":"text","text":" "},{"type":"codeVoice","code":"ChannelPipeline"},{"type":"text","text":"."}],"navigatorTitle":[{"text":"MessageToByteHandler","kind":"identifier"}],"url":"\/documentation\/niocore\/messagetobytehandler","role":"symbol","kind":"symbol","fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"MessageToByteHandler","kind":"identifier"}],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/MessageToByteHandler","type":"topic","title":"MessageToByteHandler"},"doc://co.pointfree.VaporRouting/documentation/NIOExtras/LengthFieldPrepender":{"kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"LengthFieldPrepender"}],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOExtras\/LengthFieldPrepender","type":"topic","url":"\/documentation\/nioextras\/lengthfieldprepender","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"LengthFieldPrepender"}],"title":"LengthFieldPrepender","abstract":[{"type":"text","text":"An encoder that takes a "},{"type":"codeVoice","code":"ByteBuffer"},{"type":"text","text":" message and prepends the number of bytes in the message."},{"type":"text","text":" "},{"type":"text","text":"The length field is always the same fixed length specified on construction."},{"type":"text","text":" "},{"type":"text","text":"These bytes contain a binary specification of the message size."}],"role":"symbol"},"doc://co.pointfree.VaporRouting/documentation/NIOCore/ChannelOutboundHandler/OutboundIn":{"abstract":[{"type":"text","text":"The type of the outbound data which is wrapped in "},{"code":"NIOAny","type":"codeVoice"},{"type":"text","text":"."}],"required":true,"url":"\/documentation\/niocore\/channeloutboundhandler\/outboundin","role":"symbol","kind":"symbol","fragments":[{"kind":"keyword","text":"associatedtype"},{"kind":"text","text":" "},{"text":"OutboundIn","kind":"identifier"}],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/ChannelOutboundHandler\/OutboundIn","type":"topic","title":"OutboundIn"},"doc://co.pointfree.VaporRouting/documentation/NIOHTTP1/HTTPResponseEncoder":{"title":"HTTPResponseEncoder","url":"\/documentation\/niohttp1\/httpresponseencoder","type":"topic","role":"symbol","abstract":[{"text":"A ","type":"text"},{"type":"codeVoice","code":"ChannelOutboundHandler"},{"text":" that can serialize HTTP responses.","type":"text"}],"kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"HTTPResponseEncoder"}],"fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"HTTPResponseEncoder"}],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOHTTP1\/HTTPResponseEncoder"},"doc://co.pointfree.VaporRouting/documentation/NIOHTTP1/NIOHTTPClientUpgradeHandler":{"kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"NIOHTTPClientUpgradeHandler"}],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOHTTP1\/NIOHTTPClientUpgradeHandler","type":"topic","url":"\/documentation\/niohttp1\/niohttpclientupgradehandler","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"NIOHTTPClientUpgradeHandler"}],"title":"NIOHTTPClientUpgradeHandler","abstract":[{"type":"text","text":"A client-side channel handler that sends a HTTP upgrade handshake request to perform a HTTP-upgrade."},{"type":"text","text":" "},{"type":"text","text":"When the first HTTP request is sent, this handler will add all appropriate headers to perform an upgrade to"},{"type":"text","text":" "},{"type":"text","text":"the a protocol. It may add headers for a set of protocols in preference order."},{"type":"text","text":" "},{"type":"text","text":"If the upgrade fails (i.e. response is not 101 Switching Protocols), this handler simply"},{"type":"text","text":" "},{"type":"text","text":"removes itself from the pipeline. If the upgrade is successful, it upgrades the pipeline to the new protocol."}],"role":"symbol"},"doc://co.pointfree.VaporRouting/documentation/NIOCore/ChannelOutboundHandler/unwrapOutboundIn(_:)-7u2n":{"type":"topic","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/ChannelOutboundHandler\/unwrapOutboundIn(_:)-7u2n","required":true,"defaultImplementations":1,"kind":"symbol","url":"\/documentation\/niocore\/channeloutboundhandler\/unwrapoutboundin(_:)-7u2n","abstract":[{"type":"text","text":"Unwrap the provided "},{"type":"codeVoice","code":"NIOAny"},{"type":"text","text":" that was passed to "},{"type":"codeVoice","code":"write"},{"type":"text","text":"."}],"title":"unwrapOutboundIn(_:)","role":"symbol","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"unwrapOutboundIn"},{"kind":"text","text":"("},{"kind":"typeIdentifier","text":"NIOAny","preciseIdentifier":"s:7NIOCore6NIOAnyV"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"OutboundIn"}]},"https://en.wikipedia.org/wiki/Pcap":{"type":"link","identifier":"https:\/\/en.wikipedia.org\/wiki\/Pcap","titleInlineContent":[{"type":"codeVoice","code":".pcap"},{"type":"text","text":" file"}],"url":"https:\/\/en.wikipedia.org\/wiki\/Pcap","title":".pcap file"},"doc://co.pointfree.VaporRouting/documentation/NIOHTTP2/HTTP2ToHTTP1ServerCodec":{"type":"topic","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOHTTP2\/HTTP2ToHTTP1ServerCodec","deprecated":true,"kind":"symbol","url":"\/documentation\/niohttp2\/http2tohttp1servercodec","abstract":[{"type":"text","text":"A simple channel handler that translates HTTP\/2 concepts into HTTP\/1 data types,"},{"type":"text","text":" "},{"type":"text","text":"and vice versa, for use on the server side."}],"navigatorTitle":[{"kind":"identifier","text":"HTTP2ToHTTP1ServerCodec"}],"title":"HTTP2ToHTTP1ServerCodec","role":"symbol","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"HTTP2ToHTTP1ServerCodec"}]}}}