{"kind":"symbol","schemaVersion":{"major":0,"minor":3,"patch":0},"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/Parse"},"primaryContentSections":[{"kind":"declarations","declarations":[{"languages":["swift"],"tokens":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"Parse"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"Parsers"},{"kind":"text","text":"> "},{"kind":"keyword","text":"where"},{"kind":"text","text":" "},{"kind":"typeIdentifier","text":"Parsers"},{"kind":"text","text":" : "},{"kind":"typeIdentifier","text":"Parser","preciseIdentifier":"s:7Parsing6ParserP","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/Parser"}],"platforms":["Linux"]}]},{"content":[{"type":"heading","text":"Overview","level":2,"anchor":"overview"},{"inlineContent":[{"type":"text","text":"A general entry point into "},{"type":"reference","isActive":true,"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/ParserBuilder"},{"type":"text","text":" syntax, which can be used to build complex parsers"},{"type":"text","text":" "},{"type":"text","text":"from simpler ones."}],"type":"paragraph"},{"type":"codeListing","code":["let point = Parse {","  \"(\"","  Int.parser()","  \",\"","  Int.parser()","  \")\"","}","","try point.parse(\"(2,-4)\")  \/\/ (2, -4)","","try point.parse(\"(42,blob)\")","\/\/ error: unexpected input","\/\/  --> input:1:5","\/\/ 1 | (42,blob)","\/\/   |     ^ expected integer"],"syntax":"swift"}],"kind":"content"}],"relationshipsSections":[{"identifiers":["doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/Parser","doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/ParserPrinter"],"type":"conformsTo","kind":"relationships","title":"Conforms To"}],"hierarchy":{"paths":[["doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing"]]},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/parsing\/parse"]}],"abstract":[{"type":"text","text":"A parser that attempts to run a number of parsers to accumulate their outputs."}],"metadata":{"symbolKind":"struct","externalID":"s:7Parsing5ParseV","modules":[{"name":"Parsing"}],"roleHeading":"Structure","navigatorTitle":[{"kind":"identifier","text":"Parse"}],"role":"symbol","title":"Parse","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"Parse"}]},"sections":[],"topicSections":[{"identifiers":["doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/Parse\/init(_:)","doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/Parse\/init(_:with:)-3vq0d","doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/Parse\/init(_:with:)-7mnz8","doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/Parse\/init(_:with:)-87urg","doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/Parse\/init(with:)"],"title":"Initializers"},{"identifiers":["doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/Parse\/parsers"],"title":"Instance Properties"},{"identifiers":["doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/Parse\/parse(_:)"],"title":"Instance Methods"},{"identifiers":["doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/Parse\/Parser-Implementations","doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/Parse\/ParserPrinter-Implementations"],"generated":true,"title":"Default Implementations"}],"references":{"doc://co.pointfree.VaporRouting/documentation/Parsing/Parse/Parser-Implementations":{"kind":"article","abstract":[],"role":"collectionGroup","type":"topic","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/Parse\/Parser-Implementations","title":"Parser Implementations","url":"\/documentation\/parsing\/parse\/parser-implementations"},"doc://co.pointfree.VaporRouting/documentation/Parsing/Parser":{"title":"Parser","role":"symbol","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/Parser","navigatorTitle":[{"text":"Parser","kind":"identifier"}],"kind":"symbol","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Parser","kind":"identifier"}],"type":"topic","url":"\/documentation\/parsing\/parser","abstract":[{"text":"Declares a type that can incrementally parse an ","type":"text"},{"code":"Output","type":"codeVoice"},{"text":" value from an ","type":"text"},{"code":"Input","type":"codeVoice"},{"text":" value.","type":"text"}]},"doc://co.pointfree.VaporRouting/documentation/Parsing":{"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing","kind":"symbol","role":"collection","type":"topic","abstract":[],"title":"Parsing","url":"\/documentation\/parsing"},"doc://co.pointfree.VaporRouting/documentation/Parsing/Parse/init(_:with:)-3vq0d":{"title":"init(_:with:)","abstract":[{"text":"A parser builder that bakes in a transformation of the tuple output.","type":"text"}],"fragments":[{"text":"init","kind":"identifier"},{"text":"<","kind":"text"},{"text":"Upstream","kind":"genericParameter"},{"text":", ","kind":"text"},{"text":"NewOutput","kind":"genericParameter"},{"text":">((","kind":"text"},{"text":"Upstream","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Output","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"text":"NewOutput","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"with","kind":"externalParam"},{"text":": () -> ","kind":"text"},{"text":"Upstream","kind":"typeIdentifier"},{"text":")","kind":"text"}],"kind":"symbol","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/Parse\/init(_:with:)-3vq0d","role":"symbol","url":"\/documentation\/parsing\/parse\/init(_:with:)-3vq0d","type":"topic"},"doc://co.pointfree.VaporRouting/documentation/Parsing/Parse/init(with:)":{"abstract":[{"type":"text","text":"An entry point into "},{"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/ParserBuilder","type":"reference","isActive":true},{"type":"text","text":" syntax."}],"type":"topic","url":"\/documentation\/parsing\/parse\/init(with:)","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/Parse\/init(with:)","role":"symbol","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"("},{"kind":"externalParam","text":"with"},{"kind":"text","text":": () -> "},{"kind":"typeIdentifier","text":"Parsers"},{"kind":"text","text":")"}],"title":"init(with:)","kind":"symbol"},"doc://co.pointfree.VaporRouting/documentation/Parsing/ParserBuilder":{"kind":"symbol","abstract":[{"type":"text","text":"A custom parameter attribute that constructs parsers from closures. The constructed parser"},{"type":"text","text":" "},{"type":"text","text":"runs a number of parsers, one after the other, and accumulates their outputs."}],"fragments":[{"kind":"keyword","text":"enum"},{"kind":"text","text":" "},{"kind":"identifier","text":"ParserBuilder"}],"role":"symbol","type":"topic","title":"ParserBuilder","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/ParserBuilder","navigatorTitle":[{"kind":"identifier","text":"ParserBuilder"}],"url":"\/documentation\/parsing\/parserbuilder"},"doc://co.pointfree.VaporRouting/documentation/Parsing/ParserPrinter":{"url":"\/documentation\/parsing\/parserprinter","kind":"symbol","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"ParserPrinter"}],"navigatorTitle":[{"kind":"identifier","text":"ParserPrinter"}],"conformance":{"availabilityPrefix":[{"text":"Available when","type":"text"}],"conformancePrefix":[{"text":"Conforms when","type":"text"}],"constraints":[{"code":"Parsers","type":"codeVoice"},{"text":" conforms to ","type":"text"},{"code":"ParserPrinter","type":"codeVoice"},{"text":".","type":"text"}]},"role":"symbol","abstract":[{"type":"text","text":"A "},{"type":"reference","isActive":true,"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/Parser"},{"type":"text","text":" that can incrementally “print” an output value back into an input."}],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/ParserPrinter","type":"topic","title":"ParserPrinter"},"doc://co.pointfree.VaporRouting/documentation/Parsing/Parse/parsers":{"url":"\/documentation\/parsing\/parse\/parsers","kind":"symbol","fragments":[{"kind":"keyword","text":"let"},{"kind":"text","text":" "},{"kind":"identifier","text":"parsers"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Parsers"}],"role":"symbol","abstract":[],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/Parse\/parsers","type":"topic","title":"parsers"},"doc://co.pointfree.VaporRouting/documentation/Parsing/Parse/init(_:)":{"url":"\/documentation\/parsing\/parse\/init(_:)","role":"symbol","kind":"symbol","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/Parse\/init(_:)","conformance":{"availabilityPrefix":[{"type":"text","text":"Available when"}],"conformancePrefix":[{"type":"text","text":"Conforms when"}],"constraints":[{"code":"Parsers","type":"codeVoice"},{"type":"text","text":" conforms to "},{"code":"Parser","type":"codeVoice"},{"type":"text","text":"."}]},"abstract":[],"type":"topic","fragments":[{"text":"init","kind":"identifier"},{"text":"<","kind":"text"},{"text":"Downstream","kind":"genericParameter"},{"text":">(","kind":"text"},{"text":"Downstream","kind":"typeIdentifier"},{"text":")","kind":"text"}],"title":"init(_:)"},"doc://co.pointfree.VaporRouting/documentation/Parsing/Parse/ParserPrinter-Implementations":{"kind":"article","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/Parse\/ParserPrinter-Implementations","url":"\/documentation\/parsing\/parse\/parserprinter-implementations","type":"topic","title":"ParserPrinter Implementations","role":"collectionGroup","abstract":[]},"doc://co.pointfree.VaporRouting/documentation/Parsing/Parse/init(_:with:)-7mnz8":{"role":"symbol","type":"topic","abstract":[{"text":"A parser builder that bakes in a conversion of the tuple output.","type":"text"}],"kind":"symbol","fragments":[{"text":"init","kind":"identifier"},{"text":"<","kind":"text"},{"text":"Upstream","kind":"genericParameter"},{"text":", ","kind":"text"},{"text":"Downstream","kind":"genericParameter"},{"text":">(","kind":"text"},{"text":"Downstream","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"with","kind":"externalParam"},{"text":": () -> ","kind":"text"},{"text":"Upstream","kind":"typeIdentifier"},{"text":")","kind":"text"}],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/Parse\/init(_:with:)-7mnz8","url":"\/documentation\/parsing\/parse\/init(_:with:)-7mnz8","title":"init(_:with:)"},"doc://co.pointfree.VaporRouting/documentation/Parsing/Parse/parse(_:)":{"url":"\/documentation\/parsing\/parse\/parse(_:)","role":"symbol","kind":"symbol","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/Parse\/parse(_:)","abstract":[{"text":"Attempts to parse a nebulous piece of data into something more well-structured. Typically","type":"text"},{"text":" ","type":"text"},{"text":"you only call this from other ","type":"text"},{"code":"Parser","type":"codeVoice"},{"text":" conformances, not when you want to parse a concrete","type":"text"},{"text":" ","type":"text"},{"text":"input.","type":"text"}],"type":"topic","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"parse","kind":"identifier"},{"text":"(","kind":"text"},{"text":"inout","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Parsers","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Input","kind":"typeIdentifier"},{"text":") ","kind":"text"},{"text":"rethrows","kind":"keyword"},{"text":" -> ","kind":"text"},{"text":"Parsers","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Output","kind":"typeIdentifier"}],"title":"parse(_:)"},"doc://co.pointfree.VaporRouting/documentation/Parsing/Parse":{"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Parse","kind":"identifier"}],"url":"\/documentation\/parsing\/parse","abstract":[{"type":"text","text":"A parser that attempts to run a number of parsers to accumulate their outputs."}],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/Parse","type":"topic","title":"Parse","role":"symbol","navigatorTitle":[{"text":"Parse","kind":"identifier"}],"kind":"symbol"},"doc://co.pointfree.VaporRouting/documentation/Parsing/Parse/init(_:with:)-87urg":{"role":"symbol","kind":"symbol","title":"init(_:with:)","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/Parse\/init(_:with:)-87urg","url":"\/documentation\/parsing\/parse\/init(_:with:)-87urg","type":"topic","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"Upstream"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"NewOutput"},{"kind":"text","text":">("},{"kind":"typeIdentifier","text":"NewOutput"},{"kind":"text","text":", "},{"kind":"externalParam","text":"with"},{"kind":"text","text":": () -> "},{"kind":"typeIdentifier","text":"Upstream"},{"kind":"text","text":")"}],"abstract":[{"type":"text","text":"A parser builder that replaces a void output with a given value."}]}}}