{"variants":[{"paths":["\/documentation\/parsing\/optionally"],"traits":[{"interfaceLanguage":"swift"}]}],"kind":"symbol","schemaVersion":{"minor":3,"major":0,"patch":0},"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/Optionally"},"primaryContentSections":[{"kind":"declarations","declarations":[{"tokens":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"Optionally"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"Wrapped"},{"kind":"text","text":"> "},{"kind":"keyword","text":"where"},{"kind":"text","text":" "},{"kind":"typeIdentifier","text":"Wrapped"},{"kind":"text","text":" : "},{"kind":"typeIdentifier","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/Parser","text":"Parser","preciseIdentifier":"s:7Parsing6ParserP"}],"languages":["swift"],"platforms":["Linux"]}]},{"kind":"content","content":[{"type":"heading","level":2,"text":"Overview","anchor":"overview"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Use this parser when you are parsing into an output data model that contains "},{"type":"codeVoice","code":"nil"},{"type":"text","text":"."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"When the wrapped parser fails "},{"type":"reference","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/Optionally","isActive":true},{"type":"text","text":" will backtrack any consumption of the input so"},{"type":"text","text":" "},{"type":"text","text":"that later parsers can attempt to parser the input:"}]},{"syntax":"swift","type":"codeListing","code":["let parser = Parse {","  \"Hello,\"","  Optionally { \" \"; Bool.parser() }","  \" world!\"","}","","try parser.parse(\"Hello, world!\")      \/\/ nil 1️⃣","try parser.parse(\"Hello, true world!\") \/\/ true"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"If "},{"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/Optionally","isActive":true,"type":"reference"},{"type":"text","text":" did not backtrack then 1️⃣ would fail because it would consume a space,"},{"type":"text","text":" "},{"type":"text","text":"causing the "},{"type":"codeVoice","code":"\" world!\""},{"type":"text","text":" parser to fail since there is no longer any space to consume."},{"type":"text","text":" "},{"type":"text","text":"Read the article "},{"type":"text","text":"doc:Backtracking"},{"type":"text","text":" to learn more about how backtracking works."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"If you are optionally parsing input that should coalesce into some default, you can skip the"},{"type":"text","text":" "},{"type":"text","text":"optionality and instead use "},{"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/Optionally\/replaceError(with:)","type":"reference","isActive":true},{"type":"text","text":" with a default:"}]},{"syntax":"swift","type":"codeListing","code":["Optionally { Int.parser() }","  .map { $0 ?? 0 }","","\/\/ vs.","","Int.parser()","  .replaceError(with: 0)"]}]}],"relationshipsSections":[{"kind":"relationships","type":"conformsTo","title":"Conforms To","identifiers":["doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/Parser","doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/ParserPrinter"]}],"topicSections":[{"title":"Initializers","identifiers":["doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/Optionally\/init(_:)"]},{"title":"Instance Properties","identifiers":["doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/Optionally\/wrapped"]},{"title":"Instance Methods","identifiers":["doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/Optionally\/parse(_:)"]},{"generated":true,"title":"Default Implementations","identifiers":["doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/Optionally\/Parser-Implementations","doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/Optionally\/ParserPrinter-Implementations"]}],"metadata":{"modules":[{"name":"Parsing"}],"role":"symbol","navigatorTitle":[{"kind":"identifier","text":"Optionally"}],"title":"Optionally","roleHeading":"Structure","externalID":"s:7Parsing10OptionallyV","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"Optionally"}],"symbolKind":"struct"},"hierarchy":{"paths":[["doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing"]]},"abstract":[{"type":"text","text":"A parser that runs the given parser and succeeds with "},{"type":"codeVoice","code":"nil"},{"type":"text","text":" if it fails."}],"sections":[],"references":{"doc://co.pointfree.VaporRouting/documentation/Parsing/ParserPrinter":{"url":"\/documentation\/parsing\/parserprinter","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/ParserPrinter","conformance":{"constraints":[{"type":"codeVoice","code":"Wrapped"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"ParserPrinter"},{"type":"text","text":"."}],"availabilityPrefix":[{"type":"text","text":"Available when"}],"conformancePrefix":[{"type":"text","text":"Conforms when"}]},"type":"topic","navigatorTitle":[{"kind":"identifier","text":"ParserPrinter"}],"abstract":[{"type":"text","text":"A "},{"type":"reference","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/Parser","isActive":true},{"type":"text","text":" that can incrementally “print” an output value back into an input."}],"fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"ParserPrinter"}],"kind":"symbol","title":"ParserPrinter","role":"symbol"},"doc://co.pointfree.VaporRouting/documentation/Parsing":{"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing","kind":"symbol","role":"collection","type":"topic","abstract":[],"title":"Parsing","url":"\/documentation\/parsing"},"doc://co.pointfree.VaporRouting/documentation/Parsing/Optionally/wrapped":{"title":"wrapped","abstract":[],"fragments":[{"text":"let","kind":"keyword"},{"text":" ","kind":"text"},{"text":"wrapped","kind":"identifier"},{"text":": ","kind":"text"},{"text":"Wrapped","kind":"typeIdentifier"}],"url":"\/documentation\/parsing\/optionally\/wrapped","type":"topic","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/Optionally\/wrapped","role":"symbol","kind":"symbol"},"doc://co.pointfree.VaporRouting/documentation/Parsing/Optionally/replaceError(with:)":{"kind":"symbol","url":"\/documentation\/parsing\/optionally\/replaceerror(with:)","title":"replaceError(with:)","type":"topic","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/Optionally\/replaceError(with:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"replaceError"},{"kind":"text","text":"("},{"kind":"externalParam","text":"with"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Output"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Parsers","preciseIdentifier":"s:7Parsing7ParsersO"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"ReplaceError","preciseIdentifier":"s:7Parsing7ParsersO12ReplaceErrorV"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":">"}],"role":"symbol","abstract":[{"text":"A parser that replaces its error with a provided output.","type":"text"}]},"doc://co.pointfree.VaporRouting/documentation/Parsing/Optionally/Parser-Implementations":{"type":"topic","title":"Parser Implementations","role":"collectionGroup","kind":"article","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/Optionally\/Parser-Implementations","abstract":[],"url":"\/documentation\/parsing\/optionally\/parser-implementations"},"doc://co.pointfree.VaporRouting/documentation/Parsing/Optionally/init(_:)":{"role":"symbol","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/Optionally\/init(_:)","url":"\/documentation\/parsing\/optionally\/init(_:)","abstract":[],"kind":"symbol","fragments":[{"text":"init","kind":"identifier"},{"text":"(() -> ","kind":"text"},{"text":"Wrapped","kind":"typeIdentifier"},{"text":")","kind":"text"}],"type":"topic","title":"init(_:)"},"doc://co.pointfree.VaporRouting/documentation/Parsing/Optionally/ParserPrinter-Implementations":{"type":"topic","role":"collectionGroup","abstract":[],"kind":"article","url":"\/documentation\/parsing\/optionally\/parserprinter-implementations","title":"ParserPrinter Implementations","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/Optionally\/ParserPrinter-Implementations"},"doc://co.pointfree.VaporRouting/documentation/Parsing/Parser":{"title":"Parser","role":"symbol","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/Parser","navigatorTitle":[{"text":"Parser","kind":"identifier"}],"kind":"symbol","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Parser","kind":"identifier"}],"type":"topic","url":"\/documentation\/parsing\/parser","abstract":[{"text":"Declares a type that can incrementally parse an ","type":"text"},{"code":"Output","type":"codeVoice"},{"text":" value from an ","type":"text"},{"code":"Input","type":"codeVoice"},{"text":" value.","type":"text"}]},"doc://co.pointfree.VaporRouting/documentation/Parsing/Optionally":{"type":"topic","title":"Optionally","navigatorTitle":[{"text":"Optionally","kind":"identifier"}],"role":"symbol","kind":"symbol","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/Optionally","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Optionally","kind":"identifier"}],"abstract":[{"text":"A parser that runs the given parser and succeeds with ","type":"text"},{"code":"nil","type":"codeVoice"},{"text":" if it fails.","type":"text"}],"url":"\/documentation\/parsing\/optionally"},"doc://co.pointfree.VaporRouting/documentation/Parsing/Optionally/parse(_:)":{"abstract":[{"text":"Attempts to parse a nebulous piece of data into something more well-structured. Typically","type":"text"},{"text":" ","type":"text"},{"text":"you only call this from other ","type":"text"},{"type":"codeVoice","code":"Parser"},{"text":" conformances, not when you want to parse a concrete","type":"text"},{"text":" ","type":"text"},{"text":"input.","type":"text"}],"kind":"symbol","role":"symbol","title":"parse(_:)","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/Optionally\/parse(_:)","url":"\/documentation\/parsing\/optionally\/parse(_:)","type":"topic","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"parse"},{"kind":"text","text":"("},{"kind":"keyword","text":"inout"},{"kind":"text","text":" "},{"text":"Wrapped","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Input","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"text":"Wrapped","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Output","kind":"typeIdentifier"},{"text":"?","kind":"text"}]}}}