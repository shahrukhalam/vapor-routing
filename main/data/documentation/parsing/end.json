{"sections":[],"abstract":[{"type":"text","text":"A parser that succeeds if the input is empty, and fails otherwise."}],"primaryContentSections":[{"declarations":[{"tokens":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"End","kind":"identifier"},{"text":"<","kind":"text"},{"text":"Input","kind":"genericParameter"},{"text":"> ","kind":"text"},{"text":"where","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Input","kind":"typeIdentifier"},{"text":" : ","kind":"text"},{"text":"Collection","preciseIdentifier":"s:Sl","kind":"typeIdentifier"}],"languages":["swift"],"platforms":["Linux"]}],"kind":"declarations"},{"content":[{"type":"heading","level":2,"anchor":"overview","text":"Overview"},{"type":"paragraph","inlineContent":[{"text":"Useful as a final parser in a long sequence of parsers to guarantee that all input has been","type":"text"},{"text":" ","type":"text"},{"text":"consumed, especially as ","type":"text"},{"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/Many","isActive":true,"type":"reference"},{"text":"’s terminal parser.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This parser will fail if there are input elements that have not been consumed:"}]},{"type":"codeListing","code":["input = \"Hello, Blob!!\"","try parser.parse(&input)","\/\/ error: unexpected input","\/\/  --> input:1:13","\/\/ 1 | Hello, Blob!!","\/\/   |             ^ expected end of input"],"syntax":"swift"},{"style":"note","type":"aside","name":"Note","content":[{"inlineContent":[{"text":"This parser is automatically inserted when you invoke the non-incremental","type":"text"},{"text":" ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/Parser\/parse(_:)-6h1d0"},{"text":" and ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/Parser\/parse(_:)-2wzcq"},{"text":" methods.","type":"text"}],"type":"paragraph"}]}],"kind":"content"}],"relationshipsSections":[{"title":"Conforms To","identifiers":["doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/Parser","doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/ParserPrinter"],"type":"conformsTo","kind":"relationships"}],"kind":"symbol","topicSections":[{"title":"Initializers","identifiers":["doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/End\/init()-2egll","doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/End\/init()-7gmzt","doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/End\/init()-8lvil"]},{"title":"Instance Methods","identifiers":["doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/End\/parse(_:)","doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/End\/print(_:into:)"]},{"title":"Default Implementations","identifiers":["doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/End\/Parser-Implementations","doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/End\/ParserPrinter-Implementations"],"generated":true}],"schemaVersion":{"minor":3,"major":0,"patch":0},"metadata":{"navigatorTitle":[{"text":"End","kind":"identifier"}],"title":"End","role":"symbol","roleHeading":"Structure","externalID":"s:7Parsing3EndV","symbolKind":"struct","modules":[{"name":"Parsing"}],"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"End","kind":"identifier"}]},"hierarchy":{"paths":[["doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing"]]},"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/End"},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/parsing\/end"]}],"references":{"doc://co.pointfree.VaporRouting/documentation/Parsing/End/init()-8lvil":{"abstract":[],"title":"init()","fragments":[{"text":"init","kind":"identifier"},{"text":"()","kind":"text"}],"role":"symbol","kind":"symbol","url":"\/documentation\/parsing\/end\/init()-8lvil","conformance":{"conformancePrefix":[{"text":"Conforms when","type":"text"}],"constraints":[{"type":"codeVoice","code":"Input"},{"text":" is ","type":"text"},{"type":"codeVoice","code":"Substring"},{"text":".","type":"text"}],"availabilityPrefix":[{"text":"Available when","type":"text"}]},"type":"topic","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/End\/init()-8lvil"},"doc://co.pointfree.VaporRouting/documentation/Parsing/End/Parser-Implementations":{"kind":"article","abstract":[],"role":"collectionGroup","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/End\/Parser-Implementations","type":"topic","title":"Parser Implementations","url":"\/documentation\/parsing\/end\/parser-implementations"},"doc://co.pointfree.VaporRouting/documentation/Parsing/Parser":{"title":"Parser","role":"symbol","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/Parser","navigatorTitle":[{"text":"Parser","kind":"identifier"}],"kind":"symbol","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Parser","kind":"identifier"}],"type":"topic","url":"\/documentation\/parsing\/parser","abstract":[{"text":"Declares a type that can incrementally parse an ","type":"text"},{"code":"Output","type":"codeVoice"},{"text":" value from an ","type":"text"},{"code":"Input","type":"codeVoice"},{"text":" value.","type":"text"}]},"doc://co.pointfree.VaporRouting/documentation/Parsing":{"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing","kind":"symbol","role":"collection","type":"topic","abstract":[],"title":"Parsing","url":"\/documentation\/parsing"},"doc://co.pointfree.VaporRouting/documentation/Parsing/End/init()-7gmzt":{"abstract":[],"title":"init()","fragments":[{"text":"init","kind":"identifier"},{"text":"()","kind":"text"}],"role":"symbol","kind":"symbol","url":"\/documentation\/parsing\/end\/init()-7gmzt","type":"topic","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/End\/init()-7gmzt"},"doc://co.pointfree.VaporRouting/documentation/Parsing/End":{"kind":"symbol","abstract":[{"text":"A parser that succeeds if the input is empty, and fails otherwise.","type":"text"}],"role":"symbol","navigatorTitle":[{"kind":"identifier","text":"End"}],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/End","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"End"}],"type":"topic","title":"End","url":"\/documentation\/parsing\/end"},"doc://co.pointfree.VaporRouting/documentation/Parsing/ParserPrinter":{"fragments":[{"kind":"keyword","text":"protocol"},{"text":" ","kind":"text"},{"text":"ParserPrinter","kind":"identifier"}],"url":"\/documentation\/parsing\/parserprinter","abstract":[{"type":"text","text":"A "},{"isActive":true,"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/Parser","type":"reference"},{"type":"text","text":" that can incrementally “print” an output value back into an input."}],"role":"symbol","title":"ParserPrinter","type":"topic","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/ParserPrinter","navigatorTitle":[{"text":"ParserPrinter","kind":"identifier"}],"kind":"symbol"},"doc://co.pointfree.VaporRouting/documentation/Parsing/End/init()-2egll":{"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/End\/init()-2egll","title":"init()","url":"\/documentation\/parsing\/end\/init()-2egll","role":"symbol","conformance":{"availabilityPrefix":[{"type":"text","text":"Available when"}],"constraints":[{"type":"codeVoice","code":"Input"},{"type":"text","text":" is "},{"type":"codeVoice","code":"Substring.UTF8View"},{"type":"text","text":"."}],"conformancePrefix":[{"type":"text","text":"Conforms when"}]},"type":"topic","kind":"symbol","fragments":[{"text":"init","kind":"identifier"},{"text":"()","kind":"text"}],"abstract":[]},"doc://co.pointfree.VaporRouting/documentation/Parsing/End/ParserPrinter-Implementations":{"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/End\/ParserPrinter-Implementations","kind":"article","title":"ParserPrinter Implementations","abstract":[],"url":"\/documentation\/parsing\/end\/parserprinter-implementations","role":"collectionGroup","type":"topic"},"doc://co.pointfree.VaporRouting/documentation/Parsing/Parser/parse(_:)-76tcw":{"fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"parse","kind":"identifier"},{"text":"(","kind":"text"},{"text":"inout","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Input","kind":"typeIdentifier"},{"text":") ","kind":"text"},{"text":"throws","kind":"keyword"},{"text":" -> ","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Output","kind":"typeIdentifier"}],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/Parser\/parse(_:)-76tcw","url":"\/documentation\/parsing\/parser\/parse(_:)-76tcw","kind":"symbol","abstract":[{"text":"Attempts to parse a nebulous piece of data into something more well-structured. Typically","type":"text"},{"text":" ","type":"text"},{"text":"you only call this from other ","type":"text"},{"type":"codeVoice","code":"Parser"},{"text":" conformances, not when you want to parse a concrete","type":"text"},{"text":" ","type":"text"},{"text":"input.","type":"text"}],"title":"parse(_:)","defaultImplementations":3,"role":"symbol","required":true,"type":"topic"},"doc://co.pointfree.VaporRouting/documentation/Parsing/End/print(_:into:)":{"url":"\/documentation\/parsing\/end\/print(_:into:)","title":"print(_:into:)","type":"topic","fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"text":"print","kind":"identifier"},{"text":"((), ","kind":"text"},{"text":"into","kind":"externalParam"},{"text":": ","kind":"text"},{"kind":"keyword","text":"inout"},{"kind":"text","text":" "},{"kind":"typeIdentifier","text":"Input"},{"kind":"text","text":") "},{"kind":"keyword","text":"throws"}],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/End\/print(_:into:)","abstract":[{"type":"text","text":"Attempts to print a well-structured piece of data into something more nebulous."}],"kind":"symbol","role":"symbol"},"doc://co.pointfree.VaporRouting/documentation/Parsing/Parser/parse(_:)-2wzcq":{"abstract":[{"text":"Parse a ","type":"text"},{"type":"codeVoice","code":"String"},{"text":" into an output using a UTF-8 parser. This method is more ergnomic to use","type":"text"},{"text":" ","type":"text"},{"text":"than ","type":"text"},{"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/Parser\/parse(_:)-76tcw","isActive":true,"type":"reference"},{"text":" because it accepts a plain string rather than a collection of","type":"text"},{"text":" ","type":"text"},{"text":"UTF-8 code units, and the input does not need to be ","type":"text"},{"type":"codeVoice","code":"inout"},{"text":".","type":"text"}],"role":"symbol","url":"\/documentation\/parsing\/parser\/parse(_:)-2wzcq","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"parse"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"S"},{"kind":"text","text":">("},{"kind":"typeIdentifier","text":"S"},{"kind":"text","text":") "},{"kind":"keyword","text":"rethrows"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Output"}],"title":"parse(_:)","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/Parser\/parse(_:)-2wzcq","kind":"symbol","type":"topic"},"doc://co.pointfree.VaporRouting/documentation/Parsing/Parser/parse(_:)-6h1d0":{"abstract":[{"type":"text","text":"Parse a collection into an output using a parser that works on the collection’s "},{"code":"SubSequence","type":"codeVoice"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"This method is more ergnomic to use than "},{"type":"reference","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/Parser\/parse(_:)-76tcw","isActive":true},{"type":"text","text":" because it accepts a"},{"type":"text","text":" "},{"type":"text","text":"collection directly rather than its subsequence, and the input does not need to be "},{"type":"codeVoice","code":"inout"},{"type":"text","text":"."}],"title":"parse(_:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"parse"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"C"},{"kind":"text","text":">("},{"kind":"typeIdentifier","text":"C"},{"kind":"text","text":") "},{"kind":"keyword","text":"rethrows"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Output"}],"role":"symbol","kind":"symbol","url":"\/documentation\/parsing\/parser\/parse(_:)-6h1d0","type":"topic","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/Parser\/parse(_:)-6h1d0"},"doc://co.pointfree.VaporRouting/documentation/Parsing/End/parse(_:)":{"title":"parse(_:)","type":"topic","role":"symbol","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/End\/parse(_:)","abstract":[{"text":"Attempts to parse a nebulous piece of data into something more well-structured. Typically","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"you only call this from other "},{"type":"codeVoice","code":"Parser"},{"type":"text","text":" conformances, not when you want to parse a concrete"},{"type":"text","text":" "},{"type":"text","text":"input."}],"kind":"symbol","url":"\/documentation\/parsing\/end\/parse(_:)","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"parse","kind":"identifier"},{"text":"(","kind":"text"},{"text":"inout","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Input","kind":"typeIdentifier"},{"text":") ","kind":"text"},{"kind":"keyword","text":"throws"}]},"doc://co.pointfree.VaporRouting/documentation/Parsing/Many":{"role":"symbol","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/Many","url":"\/documentation\/parsing\/many","kind":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Many","kind":"identifier"}],"navigatorTitle":[{"text":"Many","kind":"identifier"}],"type":"topic","title":"Many","abstract":[{"text":"A parser that attempts to run another parser as many times as specified, accumulating the result","type":"text"},{"text":" ","type":"text"},{"text":"of the outputs.","type":"text"}]}}}