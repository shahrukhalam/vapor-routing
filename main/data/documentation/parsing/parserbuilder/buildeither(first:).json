{"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/ParserBuilder\/buildEither(first:)"},"abstract":[{"text":"Provides support for ","type":"text"},{"type":"codeVoice","code":"if"},{"text":"-","type":"text"},{"type":"codeVoice","code":"else"},{"text":" statements in ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/ParserBuilder"},{"text":" blocks, producing a","type":"text"},{"text":" ","type":"text"},{"text":"conditional parser for the ","type":"text"},{"type":"codeVoice","code":"if"},{"text":" branch.","type":"text"}],"hierarchy":{"paths":[["doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing","doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/ParserBuilder"]]},"primaryContentSections":[{"kind":"declarations","declarations":[{"languages":["swift"],"platforms":["Linux"],"tokens":[{"text":"static","kind":"keyword"},{"text":" ","kind":"text"},{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"buildEither","kind":"identifier"},{"text":"<","kind":"text"},{"text":"TrueParser","kind":"genericParameter"},{"text":", ","kind":"text"},{"text":"FalseParser","kind":"genericParameter"},{"text":">(","kind":"text"},{"text":"first","kind":"externalParam"},{"text":" ","kind":"text"},{"kind":"internalParam","text":"parser"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"TrueParser"},{"kind":"text","text":") -> "},{"preciseIdentifier":"s:7Parsing7ParsersO","kind":"typeIdentifier","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/Parsers","text":"Parsers"},{"kind":"text","text":"."},{"preciseIdentifier":"s:7Parsing7ParsersO11ConditionalO","kind":"typeIdentifier","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/Parsers\/Conditional","text":"Conditional"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"TrueParser"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"FalseParser"},{"kind":"text","text":"> "},{"kind":"keyword","text":"where"},{"kind":"text","text":" "},{"kind":"typeIdentifier","text":"TrueParser"},{"kind":"text","text":" : "},{"preciseIdentifier":"s:7Parsing6ParserP","kind":"typeIdentifier","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/Parser","text":"Parser"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"FalseParser"},{"kind":"text","text":" : "},{"preciseIdentifier":"s:7Parsing6ParserP","kind":"typeIdentifier","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/Parser","text":"Parser"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"TrueParser"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Input"},{"kind":"text","text":" == "},{"kind":"typeIdentifier","text":"FalseParser"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Input"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"TrueParser"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Output"},{"kind":"text","text":" == "},{"kind":"typeIdentifier","text":"FalseParser"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Output"}]}]},{"content":[{"anchor":"discussion","level":2,"type":"heading","text":"Discussion"},{"type":"codeListing","syntax":"swift","code":["Parse {","  \"Hello\"","  if shouldParseComma {","    \", \"","  } else {","    \" \"","  }","  Rest()","}"]}],"kind":"content"}],"metadata":{"fragments":[{"kind":"keyword","text":"static"},{"kind":"text","text":" "},{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"buildEither"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"TrueParser"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"FalseParser"},{"kind":"text","text":">("},{"kind":"externalParam","text":"first"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"TrueParser"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Parsers","preciseIdentifier":"s:7Parsing7ParsersO"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Conditional","preciseIdentifier":"s:7Parsing7ParsersO11ConditionalO"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"TrueParser"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"FalseParser"},{"text":">","kind":"text"}],"modules":[{"name":"Parsing"}],"title":"buildEither(first:)","symbolKind":"method","externalID":"s:7Parsing13ParserBuilderO11buildEither5firstAA7ParsersO11ConditionalOy_xq_Gx_tAA0B0RzAaKR_5InputQy_ALRtz6OutputQy_AORtzr0_lFZ","role":"symbol","roleHeading":"Type Method"},"sections":[],"schemaVersion":{"minor":3,"major":0,"patch":0},"kind":"symbol","variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/parsing\/parserbuilder\/buildeither(first:)"]}],"references":{"doc://co.pointfree.VaporRouting/documentation/Parsing/Parsers/Conditional":{"kind":"symbol","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/Parsers\/Conditional","title":"Parsers.Conditional","type":"topic","navigatorTitle":[{"text":"Conditional","kind":"identifier"}],"abstract":[{"type":"text","text":"A parser that can parse output from two types of parsers."}],"fragments":[{"text":"enum","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Conditional","kind":"identifier"}],"role":"symbol","url":"\/documentation\/parsing\/parsers\/conditional"},"doc://co.pointfree.VaporRouting/documentation/Parsing/ParserBuilder/buildEither(first:)":{"abstract":[{"type":"text","text":"Provides support for "},{"type":"codeVoice","code":"if"},{"type":"text","text":"-"},{"type":"codeVoice","code":"else"},{"type":"text","text":" statements in "},{"type":"reference","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/ParserBuilder","isActive":true},{"type":"text","text":" blocks, producing a"},{"type":"text","text":" "},{"type":"text","text":"conditional parser for the "},{"type":"codeVoice","code":"if"},{"type":"text","text":" branch."}],"kind":"symbol","role":"symbol","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/ParserBuilder\/buildEither(first:)","title":"buildEither(first:)","fragments":[{"kind":"keyword","text":"static"},{"kind":"text","text":" "},{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"buildEither"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"TrueParser"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"FalseParser"},{"kind":"text","text":">("},{"kind":"externalParam","text":"first"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"TrueParser"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","preciseIdentifier":"s:7Parsing7ParsersO","text":"Parsers"},{"kind":"text","text":"."},{"kind":"typeIdentifier","preciseIdentifier":"s:7Parsing7ParsersO11ConditionalO","text":"Conditional"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"TrueParser"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"FalseParser"},{"kind":"text","text":">"}],"url":"\/documentation\/parsing\/parserbuilder\/buildeither(first:)","type":"topic"},"doc://co.pointfree.VaporRouting/documentation/Parsing/Parsers":{"type":"topic","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/Parsers","role":"symbol","navigatorTitle":[{"kind":"identifier","text":"Parsers"}],"title":"Parsers","url":"\/documentation\/parsing\/parsers","fragments":[{"kind":"keyword","text":"enum"},{"kind":"text","text":" "},{"kind":"identifier","text":"Parsers"}],"abstract":[{"type":"text","text":"A namespace for types that serve as parsers."}],"kind":"symbol"},"doc://co.pointfree.VaporRouting/documentation/Parsing/Parser":{"title":"Parser","role":"symbol","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/Parser","navigatorTitle":[{"text":"Parser","kind":"identifier"}],"kind":"symbol","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Parser","kind":"identifier"}],"type":"topic","url":"\/documentation\/parsing\/parser","abstract":[{"text":"Declares a type that can incrementally parse an ","type":"text"},{"code":"Output","type":"codeVoice"},{"text":" value from an ","type":"text"},{"code":"Input","type":"codeVoice"},{"text":" value.","type":"text"}]},"doc://co.pointfree.VaporRouting/documentation/Parsing":{"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing","kind":"symbol","role":"collection","type":"topic","abstract":[],"title":"Parsing","url":"\/documentation\/parsing"},"doc://co.pointfree.VaporRouting/documentation/Parsing/ParserBuilder":{"kind":"symbol","abstract":[{"type":"text","text":"A custom parameter attribute that constructs parsers from closures. The constructed parser"},{"type":"text","text":" "},{"type":"text","text":"runs a number of parsers, one after the other, and accumulates their outputs."}],"fragments":[{"kind":"keyword","text":"enum"},{"kind":"text","text":" "},{"kind":"identifier","text":"ParserBuilder"}],"role":"symbol","type":"topic","title":"ParserBuilder","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/ParserBuilder","navigatorTitle":[{"kind":"identifier","text":"ParserBuilder"}],"url":"\/documentation\/parsing\/parserbuilder"}}}