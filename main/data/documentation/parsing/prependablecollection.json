{"primaryContentSections":[{"declarations":[{"platforms":["Linux"],"languages":["swift"],"tokens":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"PrependableCollection"},{"kind":"text","text":" : "},{"kind":"typeIdentifier","text":"_EmptyInitializable"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Collection","preciseIdentifier":"s:Sl"}]}],"kind":"declarations"},{"content":[{"type":"heading","level":2,"text":"Overview","anchor":"overview"},{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"PrependableCollection"},{"type":"text","text":" is a specialized subset of "},{"type":"codeVoice","code":"RangeReplaceableCollection"},{"type":"text","text":" that is tuned to"},{"type":"text","text":" "},{"type":"text","text":"incremental printing."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"In fact, any "},{"type":"codeVoice","code":"RangeReplaceableCollection"},{"type":"text","text":" can get a conformance for free:"}]},{"type":"codeListing","syntax":"swift","code":["extension MyRangeReplaceableCollection: PrependableCollection {}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Because it is also less strict than "},{"code":"RangeReplaceableCollection","type":"codeVoice"},{"type":"text","text":", it is an appropriate protocol"},{"type":"text","text":" "},{"type":"text","text":"to conform to for types that cannot and should not conform to "},{"code":"RangeReplaceableCollection","type":"codeVoice"},{"type":"text","text":" "},{"type":"text","text":"directly."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"For example, "},{"type":"codeVoice","code":"Substring.UTF8View"},{"type":"text","text":" is a common input for string parsers to parse from, but it"},{"type":"text","text":" "},{"type":"text","text":"does not conform to "},{"type":"codeVoice","code":"RangeReplaceableCollection"},{"type":"text","text":". It does, however, conform to"},{"type":"text","text":" "},{"type":"codeVoice","code":"PrependableCollection"},{"type":"text","text":" by validating and prepending the given UTF-8 bytes to its underlying"},{"type":"text","text":" "},{"type":"text","text":"substring. So in order to write a parser against generic sequences of UTF-8 bytes, you would"},{"type":"text","text":" "},{"type":"text","text":"constrain its input against "},{"type":"codeVoice","code":"PrependableCollection"},{"type":"text","text":"."}]},{"type":"paragraph","inlineContent":[{"text":"For example the following ","type":"text"},{"code":"Digits","type":"codeVoice"},{"text":" parser is generic over an ","type":"text"},{"code":"Collection","type":"codeVoice"},{"text":" of bytes, and its","type":"text"},{"text":" ","type":"text"},{"text":"printer conformance further constraints its input to be prependable.","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["struct Digits<Input: Collection>: Parser","where","  Input.Element == UTF8.CodeUnit,  \/\/ Required for working with a collection of bytes (`UInt8`)","  Input.SubSequence == Input       \/\/ Required for the parser to consume from input","{","  func parse(_ input: inout Input) throws -> Int {","    \/\/ Collect all bytes between ASCII \"0\" and \"9\"","    let prefix = input.prefix(while: { $0 >= .init(ascii: \"0\") && $0 <= .init(ascii: \"9\") })","","    \/\/ Attempt to convert to an `Int`","    guard let int = Int(prefix) else {","      struct ParseError: Error {}","      throw ParseError()","    }","","    \/\/ Incrementally consume bytes from input","    input.removeFirst(prefix.count)","","    return int","  }","}","","extension Digits: ParserPrinter where Input: PrependableCollection {","  func print(_ output: Int, into input: inout Input) {","    \/\/ Convert `Int` to string's underlying bytes","    let bytes = String(output).utf8","","    \/\/ Prepend bytes using `PrependableCollection` conformance.","    input.prepend(contentsOf: bytes)","  }","}"]},{"type":"paragraph","inlineContent":[{"text":"The ","type":"text"},{"type":"codeVoice","code":"Digits"},{"text":" parser-printer now works on any collection of UTF-8 code units, including","type":"text"},{"text":" ","type":"text"},{"type":"codeVoice","code":"UTF8View"},{"text":" and ","type":"text"},{"type":"codeVoice","code":"ArraySlice<UInt8>"},{"text":":","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["var input = \"123\"[...].utf8","try Digits().parse(&input) \/\/ 123","try Digits().print(123, into: &input)","Substring(input) \/\/ \"123\""]},{"type":"codeListing","syntax":"swift","code":["var input = ArraySlice(\"123\"[...].utf8)","try Digits().parse(&input) \/\/ 123","try Digits().print(123, into: &input)","Substring(decoding: input, as: UTF8.self) \/\/ \"123\""]}],"kind":"content"}],"hierarchy":{"paths":[["doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing"]]},"sections":[],"schemaVersion":{"major":0,"minor":3,"patch":0},"kind":"symbol","identifier":{"url":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/PrependableCollection","interfaceLanguage":"swift"},"topicSections":[{"identifiers":["doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/PrependableCollection\/init(_:)"],"title":"Initializers"},{"identifiers":["doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/PrependableCollection\/prepend(_:)","doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/PrependableCollection\/prepend(contentsOf:)"],"title":"Instance Methods"}],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/parsing\/prependablecollection"]}],"relationshipsSections":[{"type":"inheritsFrom","identifiers":["doc:\/\/co.pointfree.VaporRouting\/Sl","doc:\/\/co.pointfree.VaporRouting\/ST"],"title":"Inherits From","kind":"relationships"}],"metadata":{"modules":[{"name":"Parsing"}],"roleHeading":"Protocol","symbolKind":"protocol","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"text":"PrependableCollection","kind":"identifier"}],"role":"symbol","title":"PrependableCollection","navigatorTitle":[{"text":"PrependableCollection","kind":"identifier"}],"externalID":"s:7Parsing21PrependableCollectionP"},"abstract":[{"type":"text","text":"A collection that supports empty initialization and the ability to prepend a sequence of"},{"type":"text","text":" "},{"type":"text","text":"elements of elements to itself."}],"references":{"doc://co.pointfree.VaporRouting/documentation/Parsing/PrependableCollection":{"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/PrependableCollection","role":"symbol","navigatorTitle":[{"kind":"identifier","text":"PrependableCollection"}],"kind":"symbol","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"PrependableCollection"}],"type":"topic","title":"PrependableCollection","abstract":[{"type":"text","text":"A collection that supports empty initialization and the ability to prepend a sequence of"},{"type":"text","text":" "},{"type":"text","text":"elements of elements to itself."}],"url":"\/documentation\/parsing\/prependablecollection"},"doc://co.pointfree.VaporRouting/ST":{"type":"unresolvable","title":"Swift.Sequence","identifier":"doc:\/\/co.pointfree.VaporRouting\/ST"},"doc://co.pointfree.VaporRouting/documentation/Parsing":{"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing","kind":"symbol","role":"collection","type":"topic","abstract":[],"title":"Parsing","url":"\/documentation\/parsing"},"doc://co.pointfree.VaporRouting/Sl":{"type":"unresolvable","title":"Swift.Collection","identifier":"doc:\/\/co.pointfree.VaporRouting\/Sl"},"doc://co.pointfree.VaporRouting/documentation/Parsing/PrependableCollection/prepend(contentsOf:)":{"abstract":[{"type":"text","text":"Inserts the elements of a sequence or collection to the beginning of this collection."}],"role":"symbol","kind":"symbol","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/PrependableCollection\/prepend(contentsOf:)","required":true,"type":"topic","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"prepend"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"S"},{"kind":"text","text":">("},{"kind":"externalParam","text":"contentsOf"},{"text":": ","kind":"text"},{"text":"S","kind":"typeIdentifier"},{"text":")","kind":"text"}],"url":"\/documentation\/parsing\/prependablecollection\/prepend(contentsof:)","title":"prepend(contentsOf:)"},"doc://co.pointfree.VaporRouting/documentation/Parsing/PrependableCollection/init(_:)":{"type":"topic","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/PrependableCollection\/init(_:)","kind":"symbol","url":"\/documentation\/parsing\/prependablecollection\/init(_:)","title":"init(_:)","role":"symbol","abstract":[{"text":"Creates a new instance of a collection containing the elements of a sequence.","type":"text"}],"fragments":[{"text":"init","kind":"identifier"},{"text":"<","kind":"text"},{"text":"S","kind":"genericParameter"},{"text":">(","kind":"text"},{"text":"S","kind":"typeIdentifier"},{"text":")","kind":"text"}]},"doc://co.pointfree.VaporRouting/documentation/Parsing/PrependableCollection/prepend(_:)":{"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/PrependableCollection\/prepend(_:)","abstract":[{"type":"text","text":"Adds an element to the beginning of the collection."}],"title":"prepend(_:)","role":"symbol","type":"topic","kind":"symbol","url":"\/documentation\/parsing\/prependablecollection\/prepend(_:)","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"prepend","kind":"identifier"},{"text":"(","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Element","kind":"typeIdentifier"},{"text":")","kind":"text"}]}}}