{"relationshipsSections":[{"identifiers":["doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/Parser","doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/ParserPrinter"],"type":"conformsTo","title":"Conforms To","kind":"relationships"}],"primaryContentSections":[{"declarations":[{"tokens":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"OneOf","kind":"identifier"},{"text":"<","kind":"text"},{"text":"Parsers","kind":"genericParameter"},{"text":"> ","kind":"text"},{"text":"where","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Parsers","kind":"typeIdentifier"},{"text":" : ","kind":"text"},{"text":"Parser","kind":"typeIdentifier","preciseIdentifier":"s:7Parsing6ParserP","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/Parser"}],"platforms":["Linux"],"languages":["swift"]}],"kind":"declarations"},{"content":[{"level":2,"text":"Overview","anchor":"overview","type":"heading"},{"inlineContent":[{"type":"text","text":"Use this parser to list out a number of parsers in a "},{"type":"reference","isActive":true,"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/OneOfBuilder"},{"type":"text","text":" result builder block."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"The following example uses "},{"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/OneOf","type":"reference","isActive":true},{"type":"text","text":" to parse an enum value. To do so, it spells out a list of"},{"type":"text","text":" "},{"type":"text","text":"parsers to "},{"type":"codeVoice","code":"OneOf"},{"type":"text","text":", one for each case:"}],"type":"paragraph"},{"syntax":"swift","code":["enum Currency { case eur, gbp, usd }","","let currency = OneOf {","  \"€\".map { Currency.eur }","  \"£\".map { Currency.gbp }","  \"$\".map { Currency.usd }","}"],"type":"codeListing"},{"inlineContent":[{"type":"text","text":"This parser fails if every parser inside fails:"}],"type":"paragraph"},{"syntax":"swift","code":["var input = \"London, Hello!\"[...]","try OneOf { \"New York\"; \"Berlin\" }.parse(&input)","","\/\/ error: multiple failures occurred","\/\/","\/\/ error: unexpected input","\/\/  --> input:1:1","\/\/ 1 | London, Hello!","\/\/   | ^ expected \"New York\"","\/\/   | ^ expected \"Berlin\""],"type":"codeListing"},{"inlineContent":[{"type":"text","text":"If you are parsing input that should coalesce into some default, avoid using a final "},{"isActive":true,"type":"reference","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/Always"},{"type":"text","text":" "},{"type":"text","text":"parser, and instead opt for a trailing "},{"isActive":true,"type":"reference","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/OneOf\/replaceError(with:)"},{"type":"text","text":", which returns a parser that"},{"type":"text","text":" "},{"type":"text","text":"cannot fail:"}],"type":"paragraph"},{"syntax":"swift","code":["enum Currency { case eur, gbp, usd, unknown }","","let currency = OneOf {","  \"€\".map { Currency.eur }","  \"£\".map { Currency.gbp }","  \"$\".map { Currency.usd }","}",".replaceError(with: Currency.unknown)","","currency.parse(\"$\")  \/\/ Currency.usd","currency.parse(\"฿\")  \/\/ Currency.unknown"],"type":"codeListing"},{"level":2,"text":"Specificity","anchor":"Specificity","type":"heading"},{"inlineContent":[{"type":"text","text":"The order of the parsers in the above "},{"type":"reference","isActive":true,"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/OneOf"},{"type":"text","text":" does not matter because each of “€”, “£” and “$”"},{"type":"text","text":" "},{"type":"text","text":"are mutually exclusive, i.e. at most one will succeed on any given input."}],"type":"paragraph"},{"inlineContent":[{"text":"However, that is not always true, and when the parsers are not mutually exclusive (i.e. multiple","type":"text"},{"text":" ","type":"text"},{"text":"can succeed on a given input) you must order them from most specific to least specific. That is,","type":"text"},{"text":" ","type":"text"},{"text":"the first parser should succeed on the fewest number of inputs and the last parser should","type":"text"},{"text":" ","type":"text"},{"text":"succeed on the most number of inputs.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"For example, suppose you wanted to parse a simple CSV format into a doubly-nested array of"},{"type":"text","text":" "},{"type":"text","text":"strings, and the fields in the CSV are allowed to contain commas themselves as long as they"},{"type":"text","text":" "},{"type":"text","text":"are quoted:"}],"type":"paragraph"},{"syntax":"swift","code":["let input = #\"\"\"","lastName,firstName","McBlob,Blob","\"McBlob, Esq.\",Blob Jr.","\"McBlob, MD\",Blob Sr.","\"\"\"#"],"type":"codeListing"},{"inlineContent":[{"type":"text","text":"Here we have a list of last and first names separated by a comma, and some of the last names are"},{"type":"text","text":" "},{"type":"text","text":"quoted because they contain commas."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"In order to safely parse this we must first try parsing a field as a quoted field, and then only"},{"type":"text","text":" "},{"type":"text","text":"if that fails we can parse a plain field that takes everything up until the next comma or"},{"type":"text","text":" "},{"type":"text","text":"newline:"}],"type":"paragraph"},{"syntax":"swift","code":["let quotedField = Parse {","  \"\\\"\"","  Prefix { $0 != \"\\\"\" }","  \"\\\"\"","}","let plainField = Prefix { $0 != \",\" && $0 != \"\\n\" }","","let field = OneOf {","  quotedField","  plainField","}"],"type":"codeListing"},{"inlineContent":[{"type":"text","text":"Then we can parse many fields to form an array of fields making up a line, and then parse many"},{"type":"text","text":" "},{"type":"text","text":"lines to make up a full, doubly-nested array for the CSV:"}],"type":"paragraph"},{"syntax":"swift","code":["let line = Many { field } separator: { \",\" }","let csv = Many { line } separator: { \"\\n\" }"],"type":"codeListing"},{"inlineContent":[{"text":"Running this parser on the input shows that it properly isolates each field of the CSV, even","type":"text"},{"text":" ","type":"text"},{"text":"fields that are quoted and contain a comma:","type":"text"}],"type":"paragraph"},{"syntax":"swift","code":["XCTAssertEqual(","  try csv.parse(input),","  [","    [\"lastName\", \"firstName\"],","    [\"McBlob\", \"Blob\"],","    [\"McBlob, Esq.\", \"Blob Jr.\"],","    [\"McBlob, MD\", \"Blob Sr.\"],","  ]",")","\/\/ ✅"],"type":"codeListing"},{"inlineContent":[{"type":"text","text":"The reason this parser works is because the "},{"type":"codeVoice","code":"quotedField"},{"type":"text","text":" and "},{"type":"codeVoice","code":"plainField"},{"type":"text","text":" parsers are listed in"},{"type":"text","text":" "},{"type":"text","text":"a very specific order inside the "},{"type":"codeVoice","code":"OneOf"},{"type":"text","text":":"}],"type":"paragraph"},{"syntax":"swift","code":["let field = OneOf {","  quotedField","  plainField","}"],"type":"codeListing"},{"inlineContent":[{"text":"The ","type":"text"},{"type":"codeVoice","code":"quotedField"},{"text":" parser is a ","type":"text"},{"inlineContent":[{"type":"text","text":"more"}],"type":"emphasis"},{"text":" specific parser in that it will succeed on fewer inputs","type":"text"},{"text":" ","type":"text"},{"text":"than the ","type":"text"},{"type":"codeVoice","code":"plainField"},{"text":" parser does. For example:","type":"text"}],"type":"paragraph"},{"syntax":"swift","code":["try quotedField.parse(\"Blob Jr.\") \/\/ ❌","try plainField.parse(\"Blob Jr.\")  \/\/ ✅"],"type":"codeListing"},{"inlineContent":[{"text":"Whereas the ","type":"text"},{"type":"codeVoice","code":"plainField"},{"text":" parser will happily succeed on anything the ","type":"text"},{"type":"codeVoice","code":"quotedField"},{"text":" parser will","type":"text"},{"text":" ","type":"text"},{"text":"succeed on:","type":"text"}],"type":"paragraph"},{"syntax":"swift","code":["try quotedField.parse(\"\\\"Blob, Esq\\\"\") \/\/ ✅","try plainField.parse(\"\\\"Blob, Esq\\\"\")  \/\/ ✅"],"type":"codeListing"},{"inlineContent":[{"type":"text","text":"For this reason the "},{"type":"codeVoice","code":"quotedField"},{"type":"text","text":" parser must be listed first so that it can try its logic"},{"type":"text","text":" "},{"type":"text","text":"first, which succeeds less frequently, before then trying the "},{"type":"codeVoice","code":"plainField"},{"type":"text","text":" parser, which"},{"type":"text","text":" "},{"type":"text","text":"succeeds more often."}],"type":"paragraph"},{"level":2,"text":"Backtracking","anchor":"Backtracking","type":"heading"},{"inlineContent":[{"type":"text","text":"The "},{"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/OneOf","isActive":true,"type":"reference"},{"type":"text","text":" parser is the primary tool for introducing backtracking into your parsers,"},{"type":"text","text":" "},{"type":"text","text":"which means to undo the consumption of a parser when it fails. For more information, see the"},{"type":"text","text":" "},{"type":"text","text":"article "},{"type":"text","text":"doc:Backtracking"},{"type":"text","text":"."}],"type":"paragraph"}],"kind":"content"}],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/parsing\/oneof"]}],"hierarchy":{"paths":[["doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing"]]},"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/OneOf"},"sections":[],"metadata":{"roleHeading":"Structure","modules":[{"name":"Parsing"}],"role":"symbol","externalID":"s:7Parsing5OneOfV","title":"OneOf","symbolKind":"struct","navigatorTitle":[{"kind":"identifier","text":"OneOf"}],"fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"OneOf"}]},"abstract":[{"text":"A parser that attempts to run a number of parsers till one succeeds.","type":"text"}],"schemaVersion":{"minor":3,"patch":0,"major":0},"topicSections":[{"identifiers":["doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/OneOf\/init(_:)"],"title":"Initializers"},{"identifiers":["doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/OneOf\/parsers"],"title":"Instance Properties"},{"identifiers":["doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/OneOf\/parse(_:)"],"title":"Instance Methods"},{"identifiers":["doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/OneOf\/Parser-Implementations","doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/OneOf\/ParserPrinter-Implementations"],"title":"Default Implementations","generated":true}],"kind":"symbol","references":{"doc://co.pointfree.VaporRouting/documentation/Parsing/Always":{"type":"topic","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/Always","role":"symbol","navigatorTitle":[{"kind":"identifier","text":"Always"}],"title":"Always","url":"\/documentation\/parsing\/always","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"Always"}],"abstract":[{"type":"text","text":"A parser that always succeeds with the given value, and does not consume any input."}],"kind":"symbol"},"doc://co.pointfree.VaporRouting/documentation/Parsing/ParserPrinter":{"url":"\/documentation\/parsing\/parserprinter","kind":"symbol","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"ParserPrinter"}],"navigatorTitle":[{"kind":"identifier","text":"ParserPrinter"}],"conformance":{"availabilityPrefix":[{"text":"Available when","type":"text"}],"conformancePrefix":[{"text":"Conforms when","type":"text"}],"constraints":[{"code":"Parsers","type":"codeVoice"},{"text":" conforms to ","type":"text"},{"code":"ParserPrinter","type":"codeVoice"},{"text":".","type":"text"}]},"role":"symbol","abstract":[{"type":"text","text":"A "},{"type":"reference","isActive":true,"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/Parser"},{"type":"text","text":" that can incrementally “print” an output value back into an input."}],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/ParserPrinter","type":"topic","title":"ParserPrinter"},"doc://co.pointfree.VaporRouting/documentation/Parsing/OneOf/Parser-Implementations":{"type":"topic","title":"Parser Implementations","role":"collectionGroup","kind":"article","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/OneOf\/Parser-Implementations","abstract":[],"url":"\/documentation\/parsing\/oneof\/parser-implementations"},"doc://co.pointfree.VaporRouting/documentation/Parsing/OneOf":{"type":"topic","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"OneOf"}],"abstract":[{"type":"text","text":"A parser that attempts to run a number of parsers till one succeeds."}],"role":"symbol","url":"\/documentation\/parsing\/oneof","title":"OneOf","kind":"symbol","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/OneOf","navigatorTitle":[{"kind":"identifier","text":"OneOf"}]},"doc://co.pointfree.VaporRouting/documentation/Parsing/OneOf/parsers":{"role":"symbol","type":"topic","fragments":[{"text":"let","kind":"keyword"},{"text":" ","kind":"text"},{"text":"parsers","kind":"identifier"},{"text":": ","kind":"text"},{"text":"Parsers","kind":"typeIdentifier"}],"url":"\/documentation\/parsing\/oneof\/parsers","title":"parsers","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/OneOf\/parsers","abstract":[],"kind":"symbol"},"doc://co.pointfree.VaporRouting/documentation/Parsing/OneOf/replaceError(with:)":{"role":"symbol","url":"\/documentation\/parsing\/oneof\/replaceerror(with:)","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/OneOf\/replaceError(with:)","type":"topic","title":"replaceError(with:)","kind":"symbol","abstract":[{"text":"A parser that replaces its error with a provided output.","type":"text"}],"fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"replaceError"},{"kind":"text","text":"("},{"kind":"externalParam","text":"with"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Output"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","preciseIdentifier":"s:7Parsing7ParsersO","text":"Parsers"},{"kind":"text","text":"."},{"kind":"typeIdentifier","preciseIdentifier":"s:7Parsing7ParsersO12ReplaceErrorV","text":"ReplaceError"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":">"}]},"doc://co.pointfree.VaporRouting/documentation/Parsing/OneOf/parse(_:)":{"type":"topic","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"parse"},{"kind":"text","text":"("},{"kind":"keyword","text":"inout"},{"kind":"text","text":" "},{"text":"Parsers","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Input","kind":"typeIdentifier"},{"text":") ","kind":"text"},{"text":"rethrows","kind":"keyword"},{"text":" -> ","kind":"text"},{"text":"Parsers","kind":"typeIdentifier"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Output"}],"abstract":[{"type":"text","text":"Attempts to parse a nebulous piece of data into something more well-structured. Typically"},{"type":"text","text":" "},{"type":"text","text":"you only call this from other "},{"type":"codeVoice","code":"Parser"},{"type":"text","text":" conformances, not when you want to parse a concrete"},{"type":"text","text":" "},{"type":"text","text":"input."}],"role":"symbol","url":"\/documentation\/parsing\/oneof\/parse(_:)","title":"parse(_:)","kind":"symbol","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/OneOf\/parse(_:)"},"doc://co.pointfree.VaporRouting/documentation/Parsing/OneOf/init(_:)":{"type":"topic","url":"\/documentation\/parsing\/oneof\/init(_:)","kind":"symbol","abstract":[],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/OneOf\/init(_:)","title":"init(_:)","role":"symbol","fragments":[{"text":"init","kind":"identifier"},{"text":"(() -> ","kind":"text"},{"text":"Parsers","kind":"typeIdentifier"},{"text":")","kind":"text"}]},"doc://co.pointfree.VaporRouting/documentation/Parsing/Parser":{"title":"Parser","role":"symbol","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/Parser","navigatorTitle":[{"text":"Parser","kind":"identifier"}],"kind":"symbol","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Parser","kind":"identifier"}],"type":"topic","url":"\/documentation\/parsing\/parser","abstract":[{"text":"Declares a type that can incrementally parse an ","type":"text"},{"code":"Output","type":"codeVoice"},{"text":" value from an ","type":"text"},{"code":"Input","type":"codeVoice"},{"text":" value.","type":"text"}]},"doc://co.pointfree.VaporRouting/documentation/Parsing":{"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing","kind":"symbol","role":"collection","type":"topic","abstract":[],"title":"Parsing","url":"\/documentation\/parsing"},"doc://co.pointfree.VaporRouting/documentation/Parsing/OneOf/ParserPrinter-Implementations":{"title":"ParserPrinter Implementations","type":"topic","kind":"article","abstract":[],"role":"collectionGroup","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/OneOf\/ParserPrinter-Implementations","url":"\/documentation\/parsing\/oneof\/parserprinter-implementations"},"doc://co.pointfree.VaporRouting/documentation/Parsing/OneOfBuilder":{"kind":"symbol","abstract":[{"type":"text","text":"A custom parameter attribute that constructs parsers from closures. The constructed parser"},{"type":"text","text":" "},{"type":"text","text":"runs each parser in the closure, one after another, till one succeeds with an output."}],"fragments":[{"text":"enum","kind":"keyword"},{"text":" ","kind":"text"},{"text":"OneOfBuilder","kind":"identifier"}],"role":"symbol","type":"topic","title":"OneOfBuilder","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/OneOfBuilder","navigatorTitle":[{"text":"OneOfBuilder","kind":"identifier"}],"url":"\/documentation\/parsing\/oneofbuilder"}}}