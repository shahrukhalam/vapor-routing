{"primaryContentSections":[{"declarations":[{"platforms":["Linux"],"tokens":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"suffix","kind":"identifier"},{"text":"(","kind":"text"},{"text":"while","kind":"externalParam"},{"text":" ","kind":"text"},{"text":"predicate","kind":"internalParam"},{"text":": (","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Element","kind":"typeIdentifier"},{"text":") ","kind":"text"},{"text":"throws","kind":"keyword"},{"text":" -> ","kind":"text"},{"text":"Bool","preciseIdentifier":"s:Sb","kind":"typeIdentifier"},{"text":") ","kind":"text"},{"text":"rethrows","kind":"keyword"},{"text":" -> ","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"SubSequence","kind":"typeIdentifier"}],"languages":["swift"]}],"kind":"declarations"},{"parameters":[{"name":"predicate","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"A closure that takes an element of the sequence as"},{"type":"text","text":" "},{"type":"text","text":"its argument and returns "},{"code":"true","type":"codeVoice"},{"type":"text","text":" if the element should be included or"},{"type":"text","text":" "},{"code":"false","type":"codeVoice"},{"type":"text","text":" if it should be excluded. Once the predicate returns "},{"code":"false","type":"codeVoice"},{"type":"text","text":" it"},{"type":"text","text":" "},{"type":"text","text":"will not be called again."}]}]}],"kind":"parameters"},{"content":[{"text":"Discussion","level":2,"anchor":"discussion","type":"heading"},{"content":[{"inlineContent":[{"text":"O(","type":"text"},{"inlineContent":[{"type":"text","text":"n"}],"type":"emphasis"},{"text":"), where ","type":"text"},{"inlineContent":[{"text":"n","type":"text"}],"type":"emphasis"},{"text":" is the length of the collection.","type":"text"}],"type":"paragraph"}],"name":"Complexity","style":"note","type":"aside"}],"kind":"content"}],"sections":[],"abstract":[{"text":"Returns a subsequence containing the elements from the end until","type":"text"},{"text":" ","type":"text"},{"code":"predicate","type":"codeVoice"},{"text":" returns ","type":"text"},{"code":"false","type":"codeVoice"},{"text":" and skipping the remaining elements.","type":"text"}],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Algorithms\/ChunkedByCollection\/suffix(while:)"},"hierarchy":{"paths":[["doc:\/\/co.pointfree.VaporRouting\/documentation\/Algorithms","doc:\/\/co.pointfree.VaporRouting\/documentation\/Algorithms\/ChunkedByCollection","doc:\/\/co.pointfree.VaporRouting\/documentation\/Algorithms\/ChunkedByCollection\/BidirectionalCollection-Implementations"]]},"schemaVersion":{"minor":3,"patch":0,"major":0},"metadata":{"roleHeading":"Instance Method","modules":[{"name":"Algorithms"}],"title":"suffix(while:)","externalID":"s:SK10AlgorithmsE6suffix5while11SubSequenceQzSb7ElementQzKXE_tKF::SYNTHESIZED::s:10Algorithms19ChunkedByCollectionV","role":"symbol","symbolKind":"method","extendedModule":"Swift","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"suffix","kind":"identifier"},{"text":"(","kind":"text"},{"text":"while","kind":"externalParam"},{"text":": (","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Element","kind":"typeIdentifier"},{"text":") ","kind":"text"},{"text":"throws","kind":"keyword"},{"text":" -> ","kind":"text"},{"preciseIdentifier":"s:Sb","text":"Bool","kind":"typeIdentifier"},{"text":") ","kind":"text"},{"text":"rethrows","kind":"keyword"},{"text":" -> ","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"SubSequence","kind":"typeIdentifier"}]},"kind":"symbol","variants":[{"paths":["\/documentation\/algorithms\/chunkedbycollection\/suffix(while:)"],"traits":[{"interfaceLanguage":"swift"}]}],"references":{"doc://co.pointfree.VaporRouting/documentation/Algorithms/ChunkedByCollection/suffix(while:)":{"title":"suffix(while:)","fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"text":"suffix","kind":"identifier"},{"text":"(","kind":"text"},{"text":"while","kind":"externalParam"},{"text":": (","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Element","kind":"typeIdentifier"},{"text":") ","kind":"text"},{"text":"throws","kind":"keyword"},{"text":" -> ","kind":"text"},{"text":"Bool","preciseIdentifier":"s:Sb","kind":"typeIdentifier"},{"text":") ","kind":"text"},{"text":"rethrows","kind":"keyword"},{"text":" -> ","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"SubSequence"}],"role":"symbol","abstract":[{"text":"Returns a subsequence containing the elements from the end until","type":"text"},{"text":" ","type":"text"},{"code":"predicate","type":"codeVoice"},{"text":" returns ","type":"text"},{"code":"false","type":"codeVoice"},{"text":" and skipping the remaining elements.","type":"text"}],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Algorithms\/ChunkedByCollection\/suffix(while:)","type":"topic","url":"\/documentation\/algorithms\/chunkedbycollection\/suffix(while:)","kind":"symbol"},"doc://co.pointfree.VaporRouting/documentation/Algorithms/ChunkedByCollection/BidirectionalCollection-Implementations":{"title":"BidirectionalCollection Implementations","type":"topic","kind":"article","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Algorithms\/ChunkedByCollection\/BidirectionalCollection-Implementations","role":"collectionGroup","url":"\/documentation\/algorithms\/chunkedbycollection\/bidirectionalcollection-implementations","abstract":[]},"doc://co.pointfree.VaporRouting/documentation/Algorithms":{"url":"\/documentation\/algorithms","kind":"symbol","abstract":[],"role":"collection","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Algorithms","type":"topic","title":"Algorithms"},"doc://co.pointfree.VaporRouting/documentation/Algorithms/ChunkedByCollection":{"type":"topic","navigatorTitle":[{"kind":"identifier","text":"ChunkedByCollection"}],"title":"ChunkedByCollection","url":"\/documentation\/algorithms\/chunkedbycollection","kind":"symbol","abstract":[{"type":"text","text":"A collection wrapper that breaks a collection into chunks based on a"},{"type":"text","text":" "},{"type":"text","text":"predicate."}],"role":"symbol","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Algorithms\/ChunkedByCollection","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"ChunkedByCollection"}]}}}