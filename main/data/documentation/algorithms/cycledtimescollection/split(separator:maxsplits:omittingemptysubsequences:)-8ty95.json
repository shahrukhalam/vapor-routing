{"hierarchy":{"paths":[["doc:\/\/co.pointfree.VaporRouting\/documentation\/Algorithms","doc:\/\/co.pointfree.VaporRouting\/documentation\/Algorithms\/CycledTimesCollection","doc:\/\/co.pointfree.VaporRouting\/documentation\/Algorithms\/CycledTimesCollection\/LazySequenceProtocol-Implementations"]]},"metadata":{"conformance":{"conformancePrefix":[{"type":"text","text":"Conforms when"}],"constraints":[{"type":"codeVoice","code":"Self"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"Collection"},{"type":"text","text":", "},{"type":"codeVoice","code":"Element"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"Equatable"},{"type":"text","text":", and "},{"code":"Elements","type":"codeVoice"},{"type":"text","text":" conforms to "},{"code":"Collection","type":"codeVoice"},{"type":"text","text":"."}],"availabilityPrefix":[{"text":"Available when","type":"text"}]},"title":"split(separator:maxSplits:omittingEmptySubsequences:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"split"},{"kind":"text","text":"("},{"kind":"externalParam","text":"separator"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":", "},{"kind":"externalParam","text":"maxSplits"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Int","preciseIdentifier":"s:Si"},{"kind":"text","text":", "},{"kind":"externalParam","text":"omittingEmptySubsequences"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Bool","preciseIdentifier":"s:Sb"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"SplitCollection","preciseIdentifier":"s:10Algorithms15SplitCollectionV"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Elements"},{"kind":"text","text":">"}],"externalID":"s:s20LazySequenceProtocolP10AlgorithmsSlRzSQ7ElementSTRpzSl8ElementsABRpzrlE5split9separator9maxSplits25omittingEmptySubsequencesAC15SplitCollectionVyAGGAE_SiSbtF::SYNTHESIZED::s:10Algorithms21CycledTimesCollectionV","role":"symbol","roleHeading":"Instance Method","extendedModule":"Swift","modules":[{"name":"Algorithms"}],"symbolKind":"method"},"identifier":{"url":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Algorithms\/CycledTimesCollection\/split(separator:maxSplits:omittingEmptySubsequences:)-8ty95","interfaceLanguage":"swift"},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/algorithms\/cycledtimescollection\/split(separator:maxsplits:omittingemptysubsequences:)-8ty95"]}],"kind":"symbol","abstract":[{"type":"text","text":"Lazily returns the longest possible subsequences of the collection, in"},{"type":"text","text":" "},{"type":"text","text":"order, around elements equal to the given element."}],"primaryContentSections":[{"declarations":[{"tokens":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"split","kind":"identifier"},{"text":"(","kind":"text"},{"text":"separator","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Element","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"maxSplits","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"Int","preciseIdentifier":"s:Si","kind":"typeIdentifier"},{"text":" = Int.max, ","kind":"text"},{"text":"omittingEmptySubsequences","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"Bool","preciseIdentifier":"s:Sb","kind":"typeIdentifier"},{"text":" = true) -> ","kind":"text"},{"text":"SplitCollection","preciseIdentifier":"s:10Algorithms15SplitCollectionV","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Algorithms\/SplitCollection","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Elements","kind":"typeIdentifier"},{"text":">","kind":"text"}],"languages":["swift"],"platforms":["Linux"]}],"kind":"declarations"},{"kind":"parameters","parameters":[{"name":"separator","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The element that should be split upon."}]}]},{"name":"maxSplits","content":[{"inlineContent":[{"text":"The maximum number of times to split the collection, or","type":"text"},{"text":" ","type":"text"},{"text":"one less than the number of subsequences to return. If","type":"text"},{"text":" ","type":"text"},{"code":"maxSplits + 1","type":"codeVoice"},{"text":" subsequences are returned, the last one is a suffix","type":"text"},{"text":" ","type":"text"},{"text":"of the original collection containing the remaining elements.","type":"text"},{"text":" ","type":"text"},{"code":"maxSplits","type":"codeVoice"},{"text":" must be greater than or equal to zero. The default value","type":"text"},{"text":" ","type":"text"},{"text":"is ","type":"text"},{"code":"Int.max","type":"codeVoice"},{"text":".","type":"text"}],"type":"paragraph"}]},{"name":"omittingEmptySubsequences","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"If "},{"code":"false","type":"codeVoice"},{"type":"text","text":", an empty subsequence is"},{"type":"text","text":" "},{"type":"text","text":"returned in the result for each consecutive pair of "},{"code":"separator","type":"codeVoice"},{"type":"text","text":" "},{"type":"text","text":"elements in the collection and for each instance of "},{"code":"separator","type":"codeVoice"},{"type":"text","text":" at"},{"type":"text","text":" "},{"type":"text","text":"the start or end of the collection. If "},{"code":"true","type":"codeVoice"},{"type":"text","text":", only nonempty"},{"type":"text","text":" "},{"type":"text","text":"subsequences are returned. The default value is "},{"code":"true","type":"codeVoice"},{"type":"text","text":"."}]}]}]},{"content":[{"anchor":"return-value","level":2,"text":"Return Value","type":"heading"},{"inlineContent":[{"type":"text","text":"A lazy collection of subsequences split from this collection’s"},{"type":"text","text":" "},{"type":"text","text":"elements."}],"type":"paragraph"}],"kind":"content"},{"content":[{"type":"heading","anchor":"discussion","level":2,"text":"Discussion"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The resulting lazy collection consists of at most "},{"type":"codeVoice","code":"maxSplits + 1"},{"type":"text","text":" "},{"type":"text","text":"subsequences. Elements that are used to split the collection are not"},{"type":"text","text":" "},{"type":"text","text":"returned as part of any subsequence (except possibly the last one, in the"},{"type":"text","text":" "},{"type":"text","text":"case where "},{"type":"codeVoice","code":"maxSplits"},{"type":"text","text":" is less than the number of separators in the"},{"type":"text","text":" "},{"type":"text","text":"collection)."}]},{"type":"paragraph","inlineContent":[{"text":"The following examples show the effects of the ","type":"text"},{"code":"maxSplits","type":"codeVoice"},{"text":" and","type":"text"},{"text":" ","type":"text"},{"code":"omittingEmptySubsequences","type":"codeVoice"},{"text":" parameters when splitting a string at each","type":"text"},{"text":" ","type":"text"},{"text":"space character (” “). The first use of ","type":"text"},{"code":"split","type":"codeVoice"},{"text":" returns each word that","type":"text"},{"text":" ","type":"text"},{"text":"was originally separated by one or more spaces.","type":"text"}]},{"type":"codeListing","syntax":null,"code":["let line = \"BLANCHE:   I don't want realism. I want magic!\"","for spaceless in line.lazy.split(separator: \" \") {","  print(spaceless)","}","\/\/ Prints","\/\/ BLANCHE:","\/\/ I","\/\/ don't","\/\/ want","\/\/ realism.","\/\/ I","\/\/ want","\/\/ magic!"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The second example passes "},{"type":"codeVoice","code":"1"},{"type":"text","text":" for the "},{"type":"codeVoice","code":"maxSplits"},{"type":"text","text":" parameter, so the"},{"type":"text","text":" "},{"type":"text","text":"original string is split just once, into two new strings."}]},{"type":"codeListing","syntax":null,"code":["for spaceless in line.lazy.split(separator: \" \", maxSplits: 1) {","  print(spaceless)","}","\/\/ Prints","\/\/ BLANCHE:","\/\/ I don't want realism. I want magic!"]},{"type":"paragraph","inlineContent":[{"text":"The final example passes ","type":"text"},{"code":"false","type":"codeVoice"},{"text":" for the ","type":"text"},{"code":"omittingEmptySubsequences","type":"codeVoice"},{"text":" ","type":"text"},{"text":"parameter, so the returned array contains empty strings where spaces","type":"text"},{"text":" ","type":"text"},{"text":"were repeated.","type":"text"}]},{"type":"codeListing","syntax":null,"code":["for spaceless in line.lazy.split(","  separator: \" \",","  omittingEmptySubsequences: false",") {","  print(spaceless)","}","\/\/ Prints","\/\/ BLANCHE:","\/\/","\/\/","\/\/ I","\/\/ don't","\/\/ want","\/\/ realism.","\/\/ I","\/\/ want","\/\/ magic!"]},{"type":"aside","style":"note","content":[{"inlineContent":[{"type":"text","text":"O("},{"inlineContent":[{"type":"text","text":"n"}],"type":"emphasis"},{"type":"text","text":"), where "},{"inlineContent":[{"text":"n","type":"text"}],"type":"emphasis"},{"type":"text","text":" is the length of the collection."}],"type":"paragraph"}],"name":"Complexity"}],"kind":"content"}],"schemaVersion":{"patch":0,"minor":3,"major":0},"sections":[],"references":{"doc://co.pointfree.VaporRouting/documentation/Algorithms":{"url":"\/documentation\/algorithms","kind":"symbol","abstract":[],"role":"collection","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Algorithms","type":"topic","title":"Algorithms"},"doc://co.pointfree.VaporRouting/documentation/Algorithms/CycledTimesCollection":{"url":"\/documentation\/algorithms\/cycledtimescollection","type":"topic","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Algorithms\/CycledTimesCollection","role":"symbol","abstract":[{"type":"text","text":"A collection wrapper that repeats the elements of a base collection for a"},{"type":"text","text":" "},{"type":"text","text":"finite number of times."}],"navigatorTitle":[{"text":"CycledTimesCollection","kind":"identifier"}],"kind":"symbol","title":"CycledTimesCollection","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"text":"CycledTimesCollection","kind":"identifier"}]},"doc://co.pointfree.VaporRouting/documentation/Algorithms/CycledTimesCollection/split(separator:maxSplits:omittingEmptySubsequences:)-8ty95":{"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Algorithms\/CycledTimesCollection\/split(separator:maxSplits:omittingEmptySubsequences:)-8ty95","type":"topic","conformance":{"constraints":[{"code":"Self","type":"codeVoice"},{"text":" conforms to ","type":"text"},{"code":"Collection","type":"codeVoice"},{"text":", ","type":"text"},{"type":"codeVoice","code":"Element"},{"text":" conforms to ","type":"text"},{"type":"codeVoice","code":"Equatable"},{"text":", and ","type":"text"},{"type":"codeVoice","code":"Elements"},{"text":" conforms to ","type":"text"},{"type":"codeVoice","code":"Collection"},{"text":".","type":"text"}],"conformancePrefix":[{"text":"Conforms when","type":"text"}],"availabilityPrefix":[{"text":"Available when","type":"text"}]},"url":"\/documentation\/algorithms\/cycledtimescollection\/split(separator:maxsplits:omittingemptysubsequences:)-8ty95","role":"symbol","abstract":[{"type":"text","text":"Lazily returns the longest possible subsequences of the collection, in"},{"type":"text","text":" "},{"type":"text","text":"order, around elements equal to the given element."}],"kind":"symbol","title":"split(separator:maxSplits:omittingEmptySubsequences:)","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"split","kind":"identifier"},{"text":"(","kind":"text"},{"text":"separator","kind":"externalParam"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":", "},{"text":"maxSplits","kind":"externalParam"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","text":"Int","preciseIdentifier":"s:Si"},{"kind":"text","text":", "},{"kind":"externalParam","text":"omittingEmptySubsequences"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Bool","preciseIdentifier":"s:Sb"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"SplitCollection","preciseIdentifier":"s:10Algorithms15SplitCollectionV"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Elements"},{"kind":"text","text":">"}]},"doc://co.pointfree.VaporRouting/documentation/Algorithms/CycledTimesCollection/LazySequenceProtocol-Implementations":{"kind":"article","role":"collectionGroup","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Algorithms\/CycledTimesCollection\/LazySequenceProtocol-Implementations","title":"LazySequenceProtocol Implementations","abstract":[],"url":"\/documentation\/algorithms\/cycledtimescollection\/lazysequenceprotocol-implementations","type":"topic"},"doc://co.pointfree.VaporRouting/documentation/Algorithms/SplitCollection":{"navigatorTitle":[{"kind":"identifier","text":"SplitCollection"}],"fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"SplitCollection"}],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Algorithms\/SplitCollection","abstract":[{"type":"text","text":"A collection that lazily splits a base collection into subsequences"},{"type":"text","text":" "},{"type":"text","text":"separated by elements that satisfy the given "},{"code":"whereSeparator","type":"codeVoice"},{"type":"text","text":" predicate."}],"url":"\/documentation\/algorithms\/splitcollection","role":"symbol","type":"topic","title":"SplitCollection","kind":"symbol"}}}