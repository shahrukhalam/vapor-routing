{"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Algorithms\/JoinedByClosureSequence\/split(separator:maxSplits:omittingEmptySubsequences:)-6r7fn"},"primaryContentSections":[{"declarations":[{"tokens":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"split","kind":"identifier"},{"kind":"text","text":"("},{"kind":"externalParam","text":"separator"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":", "},{"kind":"externalParam","text":"maxSplits"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Int","preciseIdentifier":"s:Si"},{"kind":"text","text":" = Int.max, "},{"kind":"externalParam","text":"omittingEmptySubsequences"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Bool","preciseIdentifier":"s:Sb"},{"kind":"text","text":" = true) -> "},{"kind":"typeIdentifier","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Algorithms\/SplitSequence","text":"SplitSequence","preciseIdentifier":"s:10Algorithms13SplitSequenceV"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Elements"},{"kind":"text","text":">"}],"platforms":["Linux"],"languages":["swift"]}],"kind":"declarations"},{"kind":"parameters","parameters":[{"name":"separator","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The element that should be split upon."}]}]},{"name":"maxSplits","content":[{"type":"paragraph","inlineContent":[{"text":"The maximum number of times to split the sequence, or","type":"text"},{"text":" ","type":"text"},{"text":"one less than the number of subsequences to return. If","type":"text"},{"text":" ","type":"text"},{"code":"maxSplits + 1","type":"codeVoice"},{"text":" subsequences are returned, the last one is a suffix","type":"text"},{"text":" ","type":"text"},{"text":"of the original sequence containing the remaining elements.","type":"text"},{"text":" ","type":"text"},{"code":"maxSplits","type":"codeVoice"},{"text":" must be greater than or equal to zero. The default value","type":"text"},{"text":" ","type":"text"},{"text":"is ","type":"text"},{"code":"Int.max","type":"codeVoice"},{"text":".","type":"text"}]}]},{"name":"omittingEmptySubsequences","content":[{"inlineContent":[{"text":"If ","type":"text"},{"code":"false","type":"codeVoice"},{"text":", an empty subsequence is","type":"text"},{"text":" ","type":"text"},{"text":"returned in the result for each consecutive pair of ","type":"text"},{"code":"separator","type":"codeVoice"},{"text":" ","type":"text"},{"text":"elements in the sequence and for each instance of ","type":"text"},{"code":"separator","type":"codeVoice"},{"text":" at","type":"text"},{"text":" ","type":"text"},{"text":"the start or end of the sequence. If ","type":"text"},{"code":"true","type":"codeVoice"},{"text":", only nonempty","type":"text"},{"text":" ","type":"text"},{"text":"subsequences are returned. The default value is ","type":"text"},{"code":"true","type":"codeVoice"},{"text":".","type":"text"}],"type":"paragraph"}]}]},{"content":[{"type":"heading","level":2,"anchor":"return-value","text":"Return Value"},{"inlineContent":[{"text":"A lazy sequence of subsequences, split from this sequenceâ€™s","type":"text"},{"text":" ","type":"text"},{"text":"elements.","type":"text"}],"type":"paragraph"}],"kind":"content"},{"content":[{"anchor":"discussion","text":"Discussion","type":"heading","level":2},{"inlineContent":[{"text":"The resulting lazy sequence consists of at most ","type":"text"},{"code":"maxSplits + 1","type":"codeVoice"},{"text":" ","type":"text"},{"text":"subsequences. Elements that are used to split the sequence are not","type":"text"},{"text":" ","type":"text"},{"text":"returned as part of any subsequence (except possibly the last one, in the","type":"text"},{"text":" ","type":"text"},{"text":"case where ","type":"text"},{"code":"maxSplits","type":"codeVoice"},{"text":" is less than the number of separators in the","type":"text"},{"text":" ","type":"text"},{"text":"sequence).","type":"text"}],"type":"paragraph"},{"inlineContent":[{"text":"The following examples show the effects of the ","type":"text"},{"type":"codeVoice","code":"maxSplits"},{"text":" and","type":"text"},{"text":" ","type":"text"},{"type":"codeVoice","code":"omittingEmptySubsequences"},{"text":" parameters when splitting a sequence of","type":"text"},{"text":" ","type":"text"},{"text":"integers at each zero (","type":"text"},{"type":"codeVoice","code":"0"},{"text":"). The first use of ","type":"text"},{"type":"codeVoice","code":"split"},{"text":" returns each","type":"text"},{"text":" ","type":"text"},{"text":"subsequence that was originally separated by one or more zeros.","type":"text"}],"type":"paragraph"},{"code":["let numbers = AnySequence([1, 2, 0, 3, 4, 0, 0, 5])","for subsequence in numbers.lazy.split(separator: 0) {","  print(subsequence)","}","\/* Prints:","[1, 2]","[3, 4]","[5]","*\/"],"syntax":null,"type":"codeListing"},{"inlineContent":[{"text":"The second example passes ","type":"text"},{"type":"codeVoice","code":"1"},{"text":" for the ","type":"text"},{"type":"codeVoice","code":"maxSplits"},{"text":" parameter, so the","type":"text"},{"text":" ","type":"text"},{"text":"original sequence is split just once, into two subsequences.","type":"text"}],"type":"paragraph"},{"code":["for subsequence in numbers.lazy.split(","    separator: 0,","    maxSplits: 1",") {","  print(subsequence)","}","\/* Prints:","[1, 2]","[3, 4, 0, 0, 5]","*\/"],"syntax":null,"type":"codeListing"},{"inlineContent":[{"type":"text","text":"The final example passes "},{"type":"codeVoice","code":"false"},{"type":"text","text":" for the "},{"type":"codeVoice","code":"omittingEmptySubsequences"},{"type":"text","text":" "},{"type":"text","text":"parameter, so the sequence of returned subsequences contains empty"},{"type":"text","text":" "},{"type":"text","text":"subsequences where zeros were repeated."}],"type":"paragraph"},{"code":["for subsequence in numbers.lazy.split(","    separator: 0,","    omittingEmptySubsequences: false",") {","  print(subsequence)","}","\/* Prints:","[1, 2]","[3, 4]","[]","[5]","*\/"],"syntax":null,"type":"codeListing"},{"style":"note","type":"aside","name":"Complexity","content":[{"type":"paragraph","inlineContent":[{"text":"O(","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"n"}]},{"text":"), where ","type":"text"},{"type":"emphasis","inlineContent":[{"text":"n","type":"text"}]},{"text":" is the length of the sequence.","type":"text"}]}]}],"kind":"content"}],"sections":[],"schemaVersion":{"major":0,"patch":0,"minor":3},"metadata":{"role":"symbol","title":"split(separator:maxSplits:omittingEmptySubsequences:)","symbolKind":"method","externalID":"s:s20LazySequenceProtocolP10AlgorithmsSQ7ElementRpzrlE5split9separator9maxSplits25omittingEmptySubsequencesAC05SplitB0Vy8ElementsQzGAE_SiSbtF::SYNTHESIZED::s:10Algorithms23JoinedByClosureSequenceV","extendedModule":"Swift","conformance":{"conformancePrefix":[{"type":"text","text":"Conforms when"}],"constraints":[{"type":"codeVoice","code":"Element"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"Equatable"},{"type":"text","text":"."}],"availabilityPrefix":[{"text":"Available when","type":"text"}]},"modules":[{"name":"Algorithms"}],"roleHeading":"Instance Method","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"split","kind":"identifier"},{"text":"(","kind":"text"},{"text":"separator","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Element","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"maxSplits","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"Int","kind":"typeIdentifier","preciseIdentifier":"s:Si"},{"text":", ","kind":"text"},{"text":"omittingEmptySubsequences","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"Bool","kind":"typeIdentifier","preciseIdentifier":"s:Sb"},{"kind":"text","text":") -> "},{"preciseIdentifier":"s:10Algorithms13SplitSequenceV","kind":"typeIdentifier","text":"SplitSequence"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Elements"},{"kind":"text","text":">"}]},"kind":"symbol","abstract":[{"text":"Lazily returns the longest possible subsequences of the sequence, in","type":"text"},{"text":" ","type":"text"},{"text":"order, around elements equal to the given element.","type":"text"}],"variants":[{"paths":["\/documentation\/algorithms\/joinedbyclosuresequence\/split(separator:maxsplits:omittingemptysubsequences:)-6r7fn"],"traits":[{"interfaceLanguage":"swift"}]}],"hierarchy":{"paths":[["doc:\/\/co.pointfree.VaporRouting\/documentation\/Algorithms","doc:\/\/co.pointfree.VaporRouting\/documentation\/Algorithms\/JoinedByClosureSequence","doc:\/\/co.pointfree.VaporRouting\/documentation\/Algorithms\/JoinedByClosureSequence\/LazySequenceProtocol-Implementations"]]},"references":{"doc://co.pointfree.VaporRouting/documentation/Algorithms/JoinedByClosureSequence/LazySequenceProtocol-Implementations":{"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Algorithms\/JoinedByClosureSequence\/LazySequenceProtocol-Implementations","url":"\/documentation\/algorithms\/joinedbyclosuresequence\/lazysequenceprotocol-implementations","title":"LazySequenceProtocol Implementations","abstract":[],"role":"collectionGroup","type":"topic","kind":"article"},"doc://co.pointfree.VaporRouting/documentation/Algorithms/JoinedByClosureSequence/split(separator:maxSplits:omittingEmptySubsequences:)-6r7fn":{"title":"split(separator:maxSplits:omittingEmptySubsequences:)","abstract":[{"type":"text","text":"Lazily returns the longest possible subsequences of the sequence, in"},{"text":" ","type":"text"},{"text":"order, around elements equal to the given element.","type":"text"}],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Algorithms\/JoinedByClosureSequence\/split(separator:maxSplits:omittingEmptySubsequences:)-6r7fn","kind":"symbol","type":"topic","url":"\/documentation\/algorithms\/joinedbyclosuresequence\/split(separator:maxsplits:omittingemptysubsequences:)-6r7fn","conformance":{"conformancePrefix":[{"text":"Conforms when","type":"text"}],"constraints":[{"code":"Element","type":"codeVoice"},{"text":" conforms to ","type":"text"},{"code":"Equatable","type":"codeVoice"},{"text":".","type":"text"}],"availabilityPrefix":[{"text":"Available when","type":"text"}]},"role":"symbol","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"split","kind":"identifier"},{"text":"(","kind":"text"},{"text":"separator","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Element","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"maxSplits","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"Int","kind":"typeIdentifier","preciseIdentifier":"s:Si"},{"text":", ","kind":"text"},{"text":"omittingEmptySubsequences","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"Bool","kind":"typeIdentifier","preciseIdentifier":"s:Sb"},{"text":") -> ","kind":"text"},{"text":"SplitSequence","kind":"typeIdentifier","preciseIdentifier":"s:10Algorithms13SplitSequenceV"},{"text":"<","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Elements","kind":"typeIdentifier"},{"text":">","kind":"text"}]},"doc://co.pointfree.VaporRouting/documentation/Algorithms":{"url":"\/documentation\/algorithms","kind":"symbol","abstract":[],"role":"collection","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Algorithms","type":"topic","title":"Algorithms"},"doc://co.pointfree.VaporRouting/documentation/Algorithms/SplitSequence":{"abstract":[{"text":"A sequence that lazily splits a base sequence into subsequences separated by","type":"text"},{"text":" ","type":"text"},{"text":"elements that satisfy the given ","type":"text"},{"type":"codeVoice","code":"whereSeparator"},{"text":" predicate.","type":"text"}],"role":"symbol","navigatorTitle":[{"text":"SplitSequence","kind":"identifier"}],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Algorithms\/SplitSequence","kind":"symbol","title":"SplitSequence","url":"\/documentation\/algorithms\/splitsequence","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"SplitSequence","kind":"identifier"}],"type":"topic"},"doc://co.pointfree.VaporRouting/documentation/Algorithms/JoinedByClosureSequence":{"type":"topic","abstract":[{"type":"text","text":"A sequence that presents the elements of a base sequence of sequences"},{"type":"text","text":" "},{"type":"text","text":"concatenated using a given separator that depends on the sequences right"},{"type":"text","text":" "},{"type":"text","text":"before and after it."}],"fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"JoinedByClosureSequence"}],"title":"JoinedByClosureSequence","url":"\/documentation\/algorithms\/joinedbyclosuresequence","navigatorTitle":[{"kind":"identifier","text":"JoinedByClosureSequence"}],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Algorithms\/JoinedByClosureSequence","role":"symbol","kind":"symbol"}}}