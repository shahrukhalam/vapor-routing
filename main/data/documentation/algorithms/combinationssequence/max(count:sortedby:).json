{"variants":[{"paths":["\/documentation\/algorithms\/combinationssequence\/max(count:sortedby:)"],"traits":[{"interfaceLanguage":"swift"}]}],"abstract":[{"text":"Returns the largest elements of this sequence, as sorted by the given","type":"text"},{"text":" ","type":"text"},{"text":"predicate.","type":"text"}],"schemaVersion":{"minor":3,"major":0,"patch":0},"metadata":{"symbolKind":"method","modules":[{"name":"Algorithms"}],"roleHeading":"Instance Method","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"max"},{"kind":"text","text":"("},{"kind":"externalParam","text":"count"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Int","preciseIdentifier":"s:Si"},{"text":", ","kind":"text"},{"text":"sortedBy","kind":"externalParam"},{"text":": (","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Element","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Element","kind":"typeIdentifier"},{"text":") ","kind":"text"},{"text":"throws","kind":"keyword"},{"text":" -> ","kind":"text"},{"text":"Bool","preciseIdentifier":"s:Sb","kind":"typeIdentifier"},{"text":") ","kind":"text"},{"text":"rethrows","kind":"keyword"},{"text":" -> [","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Element","kind":"typeIdentifier"},{"text":"]","kind":"text"}],"role":"symbol","externalID":"s:ST10AlgorithmsE3max5count8sortedBySay7ElementQzGSi_SbAF_AFtKXEtKF::SYNTHESIZED::s:10Algorithms20CombinationsSequenceV","extendedModule":"Swift","title":"max(count:sortedBy:)"},"identifier":{"url":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Algorithms\/CombinationsSequence\/max(count:sortedBy:)","interfaceLanguage":"swift"},"sections":[],"hierarchy":{"paths":[["doc:\/\/co.pointfree.VaporRouting\/documentation\/Algorithms","doc:\/\/co.pointfree.VaporRouting\/documentation\/Algorithms\/CombinationsSequence","doc:\/\/co.pointfree.VaporRouting\/documentation\/Algorithms\/CombinationsSequence\/Sequence-Implementations"]]},"primaryContentSections":[{"declarations":[{"tokens":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"max"},{"kind":"text","text":"("},{"kind":"externalParam","text":"count"},{"kind":"text","text":": "},{"preciseIdentifier":"s:Si","kind":"typeIdentifier","text":"Int"},{"kind":"text","text":", "},{"kind":"externalParam","text":"sortedBy"},{"kind":"text","text":" "},{"kind":"internalParam","text":"areInIncreasingOrder"},{"kind":"text","text":": ("},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":") "},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> "},{"preciseIdentifier":"s:Sb","kind":"typeIdentifier","text":"Bool"},{"kind":"text","text":") "},{"kind":"keyword","text":"rethrows"},{"kind":"text","text":" -> ["},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":"]"}],"languages":["swift"],"platforms":["Linux"]}],"kind":"declarations"},{"parameters":[{"name":"count","content":[{"inlineContent":[{"text":"The number of elements to return. If ","type":"text"},{"code":"count","type":"codeVoice"},{"text":" is greater than","type":"text"},{"text":" ","type":"text"},{"text":"the number of elements in this sequence, all of the sequenceâ€™s","type":"text"},{"text":" ","type":"text"},{"text":"elements are returned.","type":"text"}],"type":"paragraph"}]},{"name":"areInIncreasingOrder","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"A predicate that returns "},{"code":"true","type":"codeVoice"},{"type":"text","text":" if its"},{"type":"text","text":" "},{"type":"text","text":"first argument should be ordered before its second argument;"},{"type":"text","text":" "},{"type":"text","text":"otherwise, "},{"code":"false","type":"codeVoice"},{"type":"text","text":"."}]}]}],"kind":"parameters"},{"content":[{"level":2,"text":"Return Value","anchor":"return-value","type":"heading"},{"inlineContent":[{"text":"An array of the largest ","type":"text"},{"code":"count","type":"codeVoice"},{"text":" elements of this sequence,","type":"text"},{"text":" ","type":"text"},{"text":"sorted according to ","type":"text"},{"code":"areInIncreasingOrder","type":"codeVoice"},{"text":".","type":"text"}],"type":"paragraph"}],"kind":"content"},{"content":[{"text":"Discussion","anchor":"discussion","type":"heading","level":2},{"inlineContent":[{"text":"This example partially sorts an array of integers to retrieve its three","type":"text"},{"text":" ","type":"text"},{"text":"largest values:","type":"text"}],"type":"paragraph"},{"type":"codeListing","syntax":null,"code":["let numbers = [7, 1, 6, 2, 8, 3, 9]","let smallestThree = numbers.max(count: 3, sortedBy: <)","\/\/ [7, 8, 9]"]},{"inlineContent":[{"text":"If you need to sort a sequence but only need to access its largest","type":"text"},{"text":" ","type":"text"},{"text":"elements, using this method can give you a performance boost over sorting","type":"text"},{"text":" ","type":"text"},{"text":"the entire sequence. The order of equal elements is guaranteed to be","type":"text"},{"text":" ","type":"text"},{"text":"preserved.","type":"text"}],"type":"paragraph"},{"content":[{"inlineContent":[{"type":"text","text":"O("},{"type":"emphasis","inlineContent":[{"text":"k","type":"text"}]},{"type":"text","text":" log "},{"type":"emphasis","inlineContent":[{"text":"k","type":"text"}]},{"type":"text","text":" + "},{"type":"emphasis","inlineContent":[{"type":"text","text":"nk"}]},{"type":"text","text":"), where "},{"type":"emphasis","inlineContent":[{"text":"n","type":"text"}]},{"type":"text","text":" is the length of the"},{"type":"text","text":" "},{"type":"text","text":"sequence and "},{"type":"emphasis","inlineContent":[{"text":"k","type":"text"}]},{"type":"text","text":" is "},{"code":"count","type":"codeVoice"},{"type":"text","text":"."}],"type":"paragraph"}],"style":"note","type":"aside","name":"Complexity"}],"kind":"content"}],"kind":"symbol","references":{"doc://co.pointfree.VaporRouting/documentation/Algorithms/CombinationsSequence/max(count:sortedBy:)":{"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Algorithms\/CombinationsSequence\/max(count:sortedBy:)","title":"max(count:sortedBy:)","kind":"symbol","role":"symbol","type":"topic","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"max","kind":"identifier"},{"text":"(","kind":"text"},{"text":"count","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"Int","preciseIdentifier":"s:Si","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"sortedBy","kind":"externalParam"},{"text":": (","kind":"text"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":") "},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"Bool","preciseIdentifier":"s:Sb"},{"kind":"text","text":") "},{"kind":"keyword","text":"rethrows"},{"kind":"text","text":" -> ["},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":"]"}],"abstract":[{"text":"Returns the largest elements of this sequence, as sorted by the given","type":"text"},{"text":" ","type":"text"},{"text":"predicate.","type":"text"}],"url":"\/documentation\/algorithms\/combinationssequence\/max(count:sortedby:)"},"doc://co.pointfree.VaporRouting/documentation/Algorithms/CombinationsSequence":{"type":"topic","abstract":[{"type":"text","text":"A collection wrapper that generates combinations of a base collection."}],"role":"symbol","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Algorithms\/CombinationsSequence","title":"CombinationsSequence","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"CombinationsSequence"}],"url":"\/documentation\/algorithms\/combinationssequence","kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"CombinationsSequence"}]},"doc://co.pointfree.VaporRouting/documentation/Algorithms":{"url":"\/documentation\/algorithms","kind":"symbol","abstract":[],"role":"collection","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Algorithms","type":"topic","title":"Algorithms"},"doc://co.pointfree.VaporRouting/documentation/Algorithms/CombinationsSequence/Sequence-Implementations":{"type":"topic","abstract":[],"role":"collectionGroup","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Algorithms\/CombinationsSequence\/Sequence-Implementations","title":"Sequence Implementations","url":"\/documentation\/algorithms\/combinationssequence\/sequence-implementations","kind":"article"}}}