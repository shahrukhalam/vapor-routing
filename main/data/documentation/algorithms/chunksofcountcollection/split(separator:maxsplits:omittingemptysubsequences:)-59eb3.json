{"schemaVersion":{"minor":3,"patch":0,"major":0},"abstract":[{"text":"Lazily returns the longest possible subsequences of the sequence, in","type":"text"},{"text":" ","type":"text"},{"text":"order, around elements equal to the given element.","type":"text"}],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/algorithms\/chunksofcountcollection\/split(separator:maxsplits:omittingemptysubsequences:)-59eb3"]}],"kind":"symbol","metadata":{"role":"symbol","title":"split(separator:maxSplits:omittingEmptySubsequences:)","externalID":"s:s20LazySequenceProtocolP10AlgorithmsSQ7ElementRpzrlE5split9separator9maxSplits25omittingEmptySubsequencesAC05SplitB0Vy8ElementsQzGAE_SiSbtF::SYNTHESIZED::s:10Algorithms23ChunksOfCountCollectionV","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"split","kind":"identifier"},{"text":"(","kind":"text"},{"text":"separator","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Element","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"maxSplits","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"Int","kind":"typeIdentifier","preciseIdentifier":"s:Si"},{"text":", ","kind":"text"},{"text":"omittingEmptySubsequences","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"Bool","kind":"typeIdentifier","preciseIdentifier":"s:Sb"},{"text":") -> ","kind":"text"},{"text":"SplitSequence","kind":"typeIdentifier","preciseIdentifier":"s:10Algorithms13SplitSequenceV"},{"text":"<","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Elements","kind":"typeIdentifier"},{"text":">","kind":"text"}],"symbolKind":"method","conformance":{"conformancePrefix":[{"type":"text","text":"Conforms when"}],"availabilityPrefix":[{"type":"text","text":"Available when"}],"constraints":[{"code":"Element","type":"codeVoice"},{"type":"text","text":" conforms to "},{"code":"Equatable","type":"codeVoice"},{"type":"text","text":"."}]},"extendedModule":"Swift","roleHeading":"Instance Method","modules":[{"name":"Algorithms"}]},"hierarchy":{"paths":[["doc:\/\/co.pointfree.VaporRouting\/documentation\/Algorithms","doc:\/\/co.pointfree.VaporRouting\/documentation\/Algorithms\/ChunksOfCountCollection","doc:\/\/co.pointfree.VaporRouting\/documentation\/Algorithms\/ChunksOfCountCollection\/LazySequenceProtocol-Implementations"]]},"identifier":{"url":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Algorithms\/ChunksOfCountCollection\/split(separator:maxSplits:omittingEmptySubsequences:)-59eb3","interfaceLanguage":"swift"},"sections":[],"primaryContentSections":[{"declarations":[{"tokens":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"split","kind":"identifier"},{"text":"(","kind":"text"},{"text":"separator","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Element","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"maxSplits","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"Int","kind":"typeIdentifier","preciseIdentifier":"s:Si"},{"text":" = Int.max, ","kind":"text"},{"text":"omittingEmptySubsequences","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"Bool","kind":"typeIdentifier","preciseIdentifier":"s:Sb"},{"text":" = true) -> ","kind":"text"},{"text":"SplitSequence","kind":"typeIdentifier","preciseIdentifier":"s:10Algorithms13SplitSequenceV","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Algorithms\/SplitSequence"},{"text":"<","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Elements","kind":"typeIdentifier"},{"text":">","kind":"text"}],"platforms":["Linux"],"languages":["swift"]}],"kind":"declarations"},{"parameters":[{"content":[{"type":"paragraph","inlineContent":[{"text":"The element that should be split upon.","type":"text"}]}],"name":"separator"},{"content":[{"inlineContent":[{"type":"text","text":"The maximum number of times to split the sequence, or"},{"type":"text","text":" "},{"type":"text","text":"one less than the number of subsequences to return. If"},{"type":"text","text":" "},{"code":"maxSplits + 1","type":"codeVoice"},{"type":"text","text":" subsequences are returned, the last one is a suffix"},{"type":"text","text":" "},{"type":"text","text":"of the original sequence containing the remaining elements."},{"type":"text","text":" "},{"code":"maxSplits","type":"codeVoice"},{"type":"text","text":" must be greater than or equal to zero. The default value"},{"type":"text","text":" "},{"type":"text","text":"is "},{"code":"Int.max","type":"codeVoice"},{"type":"text","text":"."}],"type":"paragraph"}],"name":"maxSplits"},{"content":[{"inlineContent":[{"type":"text","text":"If "},{"type":"codeVoice","code":"false"},{"type":"text","text":", an empty subsequence is"},{"type":"text","text":" "},{"type":"text","text":"returned in the result for each consecutive pair of "},{"type":"codeVoice","code":"separator"},{"type":"text","text":" "},{"type":"text","text":"elements in the sequence and for each instance of "},{"type":"codeVoice","code":"separator"},{"type":"text","text":" at"},{"type":"text","text":" "},{"type":"text","text":"the start or end of the sequence. If "},{"type":"codeVoice","code":"true"},{"type":"text","text":", only nonempty"},{"type":"text","text":" "},{"type":"text","text":"subsequences are returned. The default value is "},{"type":"codeVoice","code":"true"},{"type":"text","text":"."}],"type":"paragraph"}],"name":"omittingEmptySubsequences"}],"kind":"parameters"},{"content":[{"type":"heading","level":2,"anchor":"return-value","text":"Return Value"},{"type":"paragraph","inlineContent":[{"type":"text","text":"A lazy sequence of subsequences, split from this sequenceâ€™s"},{"type":"text","text":" "},{"type":"text","text":"elements."}]}],"kind":"content"},{"content":[{"anchor":"discussion","text":"Discussion","level":2,"type":"heading"},{"inlineContent":[{"type":"text","text":"The resulting lazy sequence consists of at most "},{"type":"codeVoice","code":"maxSplits + 1"},{"type":"text","text":" "},{"type":"text","text":"subsequences. Elements that are used to split the sequence are not"},{"type":"text","text":" "},{"type":"text","text":"returned as part of any subsequence (except possibly the last one, in the"},{"type":"text","text":" "},{"type":"text","text":"case where "},{"type":"codeVoice","code":"maxSplits"},{"type":"text","text":" is less than the number of separators in the"},{"type":"text","text":" "},{"type":"text","text":"sequence)."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"The following examples show the effects of the "},{"type":"codeVoice","code":"maxSplits"},{"type":"text","text":" and"},{"type":"text","text":" "},{"type":"codeVoice","code":"omittingEmptySubsequences"},{"type":"text","text":" parameters when splitting a sequence of"},{"type":"text","text":" "},{"type":"text","text":"integers at each zero ("},{"type":"codeVoice","code":"0"},{"type":"text","text":"). The first use of "},{"type":"codeVoice","code":"split"},{"type":"text","text":" returns each"},{"type":"text","text":" "},{"type":"text","text":"subsequence that was originally separated by one or more zeros."}],"type":"paragraph"},{"syntax":null,"code":["let numbers = AnySequence([1, 2, 0, 3, 4, 0, 0, 5])","for subsequence in numbers.lazy.split(separator: 0) {","  print(subsequence)","}","\/* Prints:","[1, 2]","[3, 4]","[5]","*\/"],"type":"codeListing"},{"inlineContent":[{"type":"text","text":"The second example passes "},{"code":"1","type":"codeVoice"},{"type":"text","text":" for the "},{"code":"maxSplits","type":"codeVoice"},{"type":"text","text":" parameter, so the"},{"type":"text","text":" "},{"type":"text","text":"original sequence is split just once, into two subsequences."}],"type":"paragraph"},{"syntax":null,"code":["for subsequence in numbers.lazy.split(","    separator: 0,","    maxSplits: 1",") {","  print(subsequence)","}","\/* Prints:","[1, 2]","[3, 4, 0, 0, 5]","*\/"],"type":"codeListing"},{"inlineContent":[{"text":"The final example passes ","type":"text"},{"code":"false","type":"codeVoice"},{"text":" for the ","type":"text"},{"code":"omittingEmptySubsequences","type":"codeVoice"},{"text":" ","type":"text"},{"text":"parameter, so the sequence of returned subsequences contains empty","type":"text"},{"text":" ","type":"text"},{"text":"subsequences where zeros were repeated.","type":"text"}],"type":"paragraph"},{"syntax":null,"code":["for subsequence in numbers.lazy.split(","    separator: 0,","    omittingEmptySubsequences: false",") {","  print(subsequence)","}","\/* Prints:","[1, 2]","[3, 4]","[]","[5]","*\/"],"type":"codeListing"},{"name":"Complexity","content":[{"inlineContent":[{"text":"O(","type":"text"},{"inlineContent":[{"type":"text","text":"n"}],"type":"emphasis"},{"text":"), where ","type":"text"},{"inlineContent":[{"text":"n","type":"text"}],"type":"emphasis"},{"text":" is the length of the sequence.","type":"text"}],"type":"paragraph"}],"style":"note","type":"aside"}],"kind":"content"}],"references":{"doc://co.pointfree.VaporRouting/documentation/Algorithms/ChunksOfCountCollection/LazySequenceProtocol-Implementations":{"abstract":[],"role":"collectionGroup","title":"LazySequenceProtocol Implementations","url":"\/documentation\/algorithms\/chunksofcountcollection\/lazysequenceprotocol-implementations","kind":"article","type":"topic","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Algorithms\/ChunksOfCountCollection\/LazySequenceProtocol-Implementations"},"doc://co.pointfree.VaporRouting/documentation/Algorithms/SplitSequence":{"abstract":[{"text":"A sequence that lazily splits a base sequence into subsequences separated by","type":"text"},{"text":" ","type":"text"},{"text":"elements that satisfy the given ","type":"text"},{"type":"codeVoice","code":"whereSeparator"},{"text":" predicate.","type":"text"}],"role":"symbol","navigatorTitle":[{"text":"SplitSequence","kind":"identifier"}],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Algorithms\/SplitSequence","kind":"symbol","title":"SplitSequence","url":"\/documentation\/algorithms\/splitsequence","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"SplitSequence","kind":"identifier"}],"type":"topic"},"doc://co.pointfree.VaporRouting/documentation/Algorithms/ChunksOfCountCollection/split(separator:maxSplits:omittingEmptySubsequences:)-59eb3":{"abstract":[{"text":"Lazily returns the longest possible subsequences of the sequence, in","type":"text"},{"text":" ","type":"text"},{"text":"order, around elements equal to the given element.","type":"text"}],"role":"symbol","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"split","kind":"identifier"},{"text":"(","kind":"text"},{"text":"separator","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Element","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"maxSplits","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"Int","preciseIdentifier":"s:Si","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"omittingEmptySubsequences","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"Bool","preciseIdentifier":"s:Sb","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"text":"SplitSequence","preciseIdentifier":"s:10Algorithms13SplitSequenceV","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Elements","kind":"typeIdentifier"},{"text":">","kind":"text"}],"title":"split(separator:maxSplits:omittingEmptySubsequences:)","url":"\/documentation\/algorithms\/chunksofcountcollection\/split(separator:maxsplits:omittingemptysubsequences:)-59eb3","kind":"symbol","type":"topic","conformance":{"constraints":[{"type":"codeVoice","code":"Element"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"Equatable"},{"type":"text","text":"."}],"conformancePrefix":[{"text":"Conforms when","type":"text"}],"availabilityPrefix":[{"text":"Available when","type":"text"}]},"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Algorithms\/ChunksOfCountCollection\/split(separator:maxSplits:omittingEmptySubsequences:)-59eb3"},"doc://co.pointfree.VaporRouting/documentation/Algorithms/ChunksOfCountCollection":{"url":"\/documentation\/algorithms\/chunksofcountcollection","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Algorithms\/ChunksOfCountCollection","title":"ChunksOfCountCollection","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"ChunksOfCountCollection","kind":"identifier"}],"role":"symbol","abstract":[{"text":"A collection that presents the elements of its base collection in","type":"text"},{"text":" ","type":"text"},{"code":"SubSequence","type":"codeVoice"},{"text":" chunks of any given count.","type":"text"}],"type":"topic","kind":"symbol","navigatorTitle":[{"text":"ChunksOfCountCollection","kind":"identifier"}]},"doc://co.pointfree.VaporRouting/documentation/Algorithms":{"url":"\/documentation\/algorithms","kind":"symbol","abstract":[],"role":"collection","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Algorithms","type":"topic","title":"Algorithms"}}}