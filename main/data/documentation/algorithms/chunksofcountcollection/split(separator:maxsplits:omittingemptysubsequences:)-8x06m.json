{"hierarchy":{"paths":[["doc:\/\/co.pointfree.VaporRouting\/documentation\/Algorithms","doc:\/\/co.pointfree.VaporRouting\/documentation\/Algorithms\/ChunksOfCountCollection","doc:\/\/co.pointfree.VaporRouting\/documentation\/Algorithms\/ChunksOfCountCollection\/LazySequenceProtocol-Implementations"]]},"abstract":[{"text":"Lazily returns the longest possible subsequences of the collection, in","type":"text"},{"text":" ","type":"text"},{"text":"order, around elements equal to the given element.","type":"text"}],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/algorithms\/chunksofcountcollection\/split(separator:maxsplits:omittingemptysubsequences:)-8x06m"]}],"kind":"symbol","sections":[],"primaryContentSections":[{"kind":"declarations","declarations":[{"tokens":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"split"},{"kind":"text","text":"("},{"kind":"externalParam","text":"separator"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":", "},{"kind":"externalParam","text":"maxSplits"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Int","preciseIdentifier":"s:Si"},{"kind":"text","text":" = Int.max, "},{"kind":"externalParam","text":"omittingEmptySubsequences"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Bool","preciseIdentifier":"s:Sb"},{"kind":"text","text":" = true) -> "},{"kind":"typeIdentifier","text":"SplitCollection","preciseIdentifier":"s:10Algorithms15SplitCollectionV","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Algorithms\/SplitCollection"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Elements"},{"kind":"text","text":">"}],"platforms":["Linux"],"languages":["swift"]}]},{"parameters":[{"name":"separator","content":[{"inlineContent":[{"type":"text","text":"The element that should be split upon."}],"type":"paragraph"}]},{"name":"maxSplits","content":[{"inlineContent":[{"text":"The maximum number of times to split the collection, or","type":"text"},{"text":" ","type":"text"},{"text":"one less than the number of subsequences to return. If","type":"text"},{"text":" ","type":"text"},{"code":"maxSplits + 1","type":"codeVoice"},{"text":" subsequences are returned, the last one is a suffix","type":"text"},{"text":" ","type":"text"},{"text":"of the original collection containing the remaining elements.","type":"text"},{"text":" ","type":"text"},{"code":"maxSplits","type":"codeVoice"},{"text":" must be greater than or equal to zero. The default value","type":"text"},{"text":" ","type":"text"},{"text":"is ","type":"text"},{"code":"Int.max","type":"codeVoice"},{"text":".","type":"text"}],"type":"paragraph"}]},{"name":"omittingEmptySubsequences","content":[{"inlineContent":[{"text":"If ","type":"text"},{"type":"codeVoice","code":"false"},{"text":", an empty subsequence is","type":"text"},{"text":" ","type":"text"},{"text":"returned in the result for each consecutive pair of ","type":"text"},{"type":"codeVoice","code":"separator"},{"text":" ","type":"text"},{"text":"elements in the collection and for each instance of ","type":"text"},{"type":"codeVoice","code":"separator"},{"text":" at","type":"text"},{"text":" ","type":"text"},{"text":"the start or end of the collection. If ","type":"text"},{"type":"codeVoice","code":"true"},{"text":", only nonempty","type":"text"},{"text":" ","type":"text"},{"text":"subsequences are returned. The default value is ","type":"text"},{"type":"codeVoice","code":"true"},{"text":".","type":"text"}],"type":"paragraph"}]}],"kind":"parameters"},{"kind":"content","content":[{"level":2,"text":"Return Value","anchor":"return-value","type":"heading"},{"inlineContent":[{"text":"A lazy collection of subsequences split from this collection’s","type":"text"},{"text":" ","type":"text"},{"text":"elements.","type":"text"}],"type":"paragraph"}]},{"kind":"content","content":[{"text":"Discussion","anchor":"discussion","type":"heading","level":2},{"inlineContent":[{"text":"The resulting lazy collection consists of at most ","type":"text"},{"code":"maxSplits + 1","type":"codeVoice"},{"text":" ","type":"text"},{"text":"subsequences. Elements that are used to split the collection are not","type":"text"},{"text":" ","type":"text"},{"text":"returned as part of any subsequence (except possibly the last one, in the","type":"text"},{"text":" ","type":"text"},{"text":"case where ","type":"text"},{"code":"maxSplits","type":"codeVoice"},{"text":" is less than the number of separators in the","type":"text"},{"text":" ","type":"text"},{"text":"collection).","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"The following examples show the effects of the "},{"type":"codeVoice","code":"maxSplits"},{"type":"text","text":" and"},{"type":"text","text":" "},{"type":"codeVoice","code":"omittingEmptySubsequences"},{"type":"text","text":" parameters when splitting a string at each"},{"type":"text","text":" "},{"type":"text","text":"space character (” “). The first use of "},{"type":"codeVoice","code":"split"},{"type":"text","text":" returns each word that"},{"type":"text","text":" "},{"type":"text","text":"was originally separated by one or more spaces."}],"type":"paragraph"},{"syntax":null,"code":["let line = \"BLANCHE:   I don't want realism. I want magic!\"","for spaceless in line.lazy.split(separator: \" \") {","  print(spaceless)","}","\/\/ Prints","\/\/ BLANCHE:","\/\/ I","\/\/ don't","\/\/ want","\/\/ realism.","\/\/ I","\/\/ want","\/\/ magic!"],"type":"codeListing"},{"inlineContent":[{"type":"text","text":"The second example passes "},{"code":"1","type":"codeVoice"},{"type":"text","text":" for the "},{"code":"maxSplits","type":"codeVoice"},{"type":"text","text":" parameter, so the"},{"type":"text","text":" "},{"type":"text","text":"original string is split just once, into two new strings."}],"type":"paragraph"},{"syntax":null,"code":["for spaceless in line.lazy.split(separator: \" \", maxSplits: 1) {","  print(spaceless)","}","\/\/ Prints","\/\/ BLANCHE:","\/\/ I don't want realism. I want magic!"],"type":"codeListing"},{"inlineContent":[{"type":"text","text":"The final example passes "},{"type":"codeVoice","code":"false"},{"type":"text","text":" for the "},{"type":"codeVoice","code":"omittingEmptySubsequences"},{"type":"text","text":" "},{"type":"text","text":"parameter, so the returned array contains empty strings where spaces"},{"type":"text","text":" "},{"type":"text","text":"were repeated."}],"type":"paragraph"},{"syntax":null,"code":["for spaceless in line.lazy.split(","  separator: \" \",","  omittingEmptySubsequences: false",") {","  print(spaceless)","}","\/\/ Prints","\/\/ BLANCHE:","\/\/","\/\/","\/\/ I","\/\/ don't","\/\/ want","\/\/ realism.","\/\/ I","\/\/ want","\/\/ magic!"],"type":"codeListing"},{"style":"note","name":"Complexity","content":[{"inlineContent":[{"text":"O(","type":"text"},{"inlineContent":[{"type":"text","text":"n"}],"type":"emphasis"},{"text":"), where ","type":"text"},{"inlineContent":[{"type":"text","text":"n"}],"type":"emphasis"},{"text":" is the length of the collection.","type":"text"}],"type":"paragraph"}],"type":"aside"}]}],"schemaVersion":{"minor":3,"major":0,"patch":0},"metadata":{"title":"split(separator:maxSplits:omittingEmptySubsequences:)","symbolKind":"method","conformance":{"availabilityPrefix":[{"type":"text","text":"Available when"}],"constraints":[{"code":"Self","type":"codeVoice"},{"type":"text","text":" conforms to "},{"code":"Collection","type":"codeVoice"},{"type":"text","text":", "},{"code":"Element","type":"codeVoice"},{"type":"text","text":" conforms to "},{"code":"Equatable","type":"codeVoice"},{"type":"text","text":", and "},{"code":"Elements","type":"codeVoice"},{"type":"text","text":" conforms to "},{"code":"Collection","type":"codeVoice"},{"type":"text","text":"."}],"conformancePrefix":[{"type":"text","text":"Conforms when"}]},"fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"split"},{"kind":"text","text":"("},{"kind":"externalParam","text":"separator"},{"text":": ","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Element","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"maxSplits","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"Int","preciseIdentifier":"s:Si","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"omittingEmptySubsequences","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"Bool","preciseIdentifier":"s:Sb","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"text":"SplitCollection","preciseIdentifier":"s:10Algorithms15SplitCollectionV","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Elements","kind":"typeIdentifier"},{"text":">","kind":"text"}],"modules":[{"name":"Algorithms"}],"extendedModule":"Swift","role":"symbol","roleHeading":"Instance Method","externalID":"s:s20LazySequenceProtocolP10AlgorithmsSlRzSQ7ElementSTRpzSl8ElementsABRpzrlE5split9separator9maxSplits25omittingEmptySubsequencesAC15SplitCollectionVyAGGAE_SiSbtF::SYNTHESIZED::s:10Algorithms23ChunksOfCountCollectionV"},"identifier":{"url":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Algorithms\/ChunksOfCountCollection\/split(separator:maxSplits:omittingEmptySubsequences:)-8x06m","interfaceLanguage":"swift"},"references":{"doc://co.pointfree.VaporRouting/documentation/Algorithms/ChunksOfCountCollection/LazySequenceProtocol-Implementations":{"abstract":[],"role":"collectionGroup","title":"LazySequenceProtocol Implementations","url":"\/documentation\/algorithms\/chunksofcountcollection\/lazysequenceprotocol-implementations","kind":"article","type":"topic","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Algorithms\/ChunksOfCountCollection\/LazySequenceProtocol-Implementations"},"doc://co.pointfree.VaporRouting/documentation/Algorithms/ChunksOfCountCollection/split(separator:maxSplits:omittingEmptySubsequences:)-8x06m":{"url":"\/documentation\/algorithms\/chunksofcountcollection\/split(separator:maxsplits:omittingemptysubsequences:)-8x06m","conformance":{"availabilityPrefix":[{"text":"Available when","type":"text"}],"conformancePrefix":[{"text":"Conforms when","type":"text"}],"constraints":[{"code":"Self","type":"codeVoice"},{"text":" conforms to ","type":"text"},{"code":"Collection","type":"codeVoice"},{"text":", ","type":"text"},{"code":"Element","type":"codeVoice"},{"text":" conforms to ","type":"text"},{"code":"Equatable","type":"codeVoice"},{"text":", and ","type":"text"},{"code":"Elements","type":"codeVoice"},{"text":" conforms to ","type":"text"},{"code":"Collection","type":"codeVoice"},{"text":".","type":"text"}]},"title":"split(separator:maxSplits:omittingEmptySubsequences:)","role":"symbol","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"split","kind":"identifier"},{"text":"(","kind":"text"},{"text":"separator","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Element","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"maxSplits","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"Int","kind":"typeIdentifier","preciseIdentifier":"s:Si"},{"text":", ","kind":"text"},{"text":"omittingEmptySubsequences","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"Bool","kind":"typeIdentifier","preciseIdentifier":"s:Sb"},{"text":") -> ","kind":"text"},{"text":"SplitCollection","kind":"typeIdentifier","preciseIdentifier":"s:10Algorithms15SplitCollectionV"},{"text":"<","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Elements","kind":"typeIdentifier"},{"text":">","kind":"text"}],"kind":"symbol","abstract":[{"text":"Lazily returns the longest possible subsequences of the collection, in","type":"text"},{"text":" ","type":"text"},{"text":"order, around elements equal to the given element.","type":"text"}],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Algorithms\/ChunksOfCountCollection\/split(separator:maxSplits:omittingEmptySubsequences:)-8x06m","type":"topic"},"doc://co.pointfree.VaporRouting/documentation/Algorithms":{"url":"\/documentation\/algorithms","kind":"symbol","abstract":[],"role":"collection","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Algorithms","type":"topic","title":"Algorithms"},"doc://co.pointfree.VaporRouting/documentation/Algorithms/SplitCollection":{"navigatorTitle":[{"kind":"identifier","text":"SplitCollection"}],"fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"SplitCollection"}],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Algorithms\/SplitCollection","abstract":[{"type":"text","text":"A collection that lazily splits a base collection into subsequences"},{"type":"text","text":" "},{"type":"text","text":"separated by elements that satisfy the given "},{"code":"whereSeparator","type":"codeVoice"},{"type":"text","text":" predicate."}],"url":"\/documentation\/algorithms\/splitcollection","role":"symbol","type":"topic","title":"SplitCollection","kind":"symbol"},"doc://co.pointfree.VaporRouting/documentation/Algorithms/ChunksOfCountCollection":{"url":"\/documentation\/algorithms\/chunksofcountcollection","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Algorithms\/ChunksOfCountCollection","title":"ChunksOfCountCollection","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"ChunksOfCountCollection","kind":"identifier"}],"role":"symbol","abstract":[{"text":"A collection that presents the elements of its base collection in","type":"text"},{"text":" ","type":"text"},{"code":"SubSequence","type":"codeVoice"},{"text":" chunks of any given count.","type":"text"}],"type":"topic","kind":"symbol","navigatorTitle":[{"text":"ChunksOfCountCollection","kind":"identifier"}]}}}