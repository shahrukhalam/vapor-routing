{"sections":[],"hierarchy":{"paths":[["doc:\/\/co.pointfree.VaporRouting\/documentation\/Algorithms","doc:\/\/co.pointfree.VaporRouting\/documentation\/Algorithms\/JoinedByClosureCollection","doc:\/\/co.pointfree.VaporRouting\/documentation\/Algorithms\/JoinedByClosureCollection\/LazySequenceProtocol-Implementations"]]},"abstract":[{"type":"text","text":"Lazily returns the longest possible subsequences of the collection, in"},{"type":"text","text":" "},{"type":"text","text":"order, that don’t contain elements satisfying the given predicate."}],"primaryContentSections":[{"kind":"declarations","declarations":[{"tokens":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"split","kind":"identifier"},{"text":"(","kind":"text"},{"text":"maxSplits","kind":"externalParam"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:Si","text":"Int","kind":"typeIdentifier"},{"text":" = Int.max, ","kind":"text"},{"text":"omittingEmptySubsequences","kind":"externalParam"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:Sb","text":"Bool","kind":"typeIdentifier"},{"text":" = true, ","kind":"text"},{"text":"whereSeparator","kind":"externalParam"},{"text":" ","kind":"text"},{"text":"isSeparator","kind":"internalParam"},{"text":": ","kind":"text"},{"text":"@escaping","kind":"keyword"},{"text":" (","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Element","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"preciseIdentifier":"s:Sb","text":"Bool","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"preciseIdentifier":"s:10Algorithms15SplitCollectionV","text":"SplitCollection","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Algorithms\/SplitCollection","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Elements","kind":"typeIdentifier"},{"text":">","kind":"text"}],"platforms":["Linux"],"languages":["swift"]}]},{"parameters":[{"name":"maxSplits","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The maximum number of times to split the collection, or"},{"type":"text","text":" "},{"type":"text","text":"one less than the number of subsequences to return. If"},{"type":"text","text":" "},{"type":"codeVoice","code":"maxSplits + 1"},{"type":"text","text":" subsequences are returned, the last one is a suffix"},{"type":"text","text":" "},{"type":"text","text":"of the original collection containing the remaining elements."},{"type":"text","text":" "},{"type":"codeVoice","code":"maxSplits"},{"type":"text","text":" must be greater than or equal to zero. The default value"},{"type":"text","text":" "},{"type":"text","text":"is "},{"type":"codeVoice","code":"Int.max"},{"type":"text","text":"."}]}]},{"name":"omittingEmptySubsequences","content":[{"inlineContent":[{"text":"If ","type":"text"},{"type":"codeVoice","code":"false"},{"text":", an empty subsequence is","type":"text"},{"text":" ","type":"text"},{"text":"returned in the result for each pair of consecutive elements","type":"text"},{"text":" ","type":"text"},{"text":"satisfying the ","type":"text"},{"type":"codeVoice","code":"isSeparator"},{"text":" predicate and for each element at the","type":"text"},{"text":" ","type":"text"},{"text":"start or end of the collection satisfying the ","type":"text"},{"type":"codeVoice","code":"isSeparator"},{"text":" ","type":"text"},{"text":"predicate. The default value is ","type":"text"},{"type":"codeVoice","code":"true"},{"text":".","type":"text"}],"type":"paragraph"}]},{"name":"whereSeparator","content":[{"type":"paragraph","inlineContent":[{"text":"A closure that takes an element as an argument and","type":"text"},{"text":" ","type":"text"},{"text":"returns a Boolean value indicating whether the collection should be","type":"text"},{"text":" ","type":"text"},{"text":"split at that element.","type":"text"}]}]}],"kind":"parameters"},{"kind":"content","content":[{"type":"heading","anchor":"return-value","text":"Return Value","level":2},{"type":"paragraph","inlineContent":[{"text":"A lazy collection of subsequences, split from this collection’s","type":"text"},{"text":" ","type":"text"},{"text":"elements.","type":"text"}]}]},{"kind":"content","content":[{"type":"heading","text":"Discussion","level":2,"anchor":"discussion"},{"type":"paragraph","inlineContent":[{"text":"The resulting lazy collection consists of at most ","type":"text"},{"type":"codeVoice","code":"maxSplits + 1"},{"text":" ","type":"text"},{"text":"subsequences. Elements that are used to split the collection are not","type":"text"},{"text":" ","type":"text"},{"text":"returned as part of any subsequence (except possibly the last one, in the","type":"text"},{"text":" ","type":"text"},{"text":"case where ","type":"text"},{"type":"codeVoice","code":"maxSplits"},{"text":" is less than the number of separators in the","type":"text"},{"text":" ","type":"text"},{"text":"collection).","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"The following examples show the effects of the ","type":"text"},{"type":"codeVoice","code":"maxSplits"},{"text":" and","type":"text"},{"text":" ","type":"text"},{"type":"codeVoice","code":"omittingEmptySubsequences"},{"text":" parameters when lazily splitting a string","type":"text"},{"text":" ","type":"text"},{"text":"using a closure that matches spaces. The first use of ","type":"text"},{"type":"codeVoice","code":"split"},{"text":" returns each","type":"text"},{"text":" ","type":"text"},{"text":"word that was originally separated by one or more spaces.","type":"text"}]},{"type":"codeListing","code":["let line = \"BLANCHE:   I don't want realism. I want magic!\"","for spaceless in line.lazy.split(whereSeparator: { $0 == \" \" }) {","  print(spaceless)","}","\/\/ Prints","\/\/ BLANCHE:","\/\/ I","\/\/ don't","\/\/ want","\/\/ realism.","\/\/ I","\/\/ want","\/\/ magic!"],"syntax":null},{"type":"paragraph","inlineContent":[{"text":"The second example passes ","type":"text"},{"code":"1","type":"codeVoice"},{"text":" for the ","type":"text"},{"code":"maxSplits","type":"codeVoice"},{"text":" parameter, so the","type":"text"},{"text":" ","type":"text"},{"text":"original string is split just once, into two new strings.","type":"text"}]},{"type":"codeListing","code":["for spaceless in line.lazy.split(","  maxSplits: 1,","  whereSeparator: { $0 == \" \" }",") {","  print(spaceless)","}","\/\/ Prints","\/\/ BLANCHE:","\/\/ I don't want realism. I want magic!"],"syntax":null},{"type":"paragraph","inlineContent":[{"type":"text","text":"The final example passes "},{"code":"false","type":"codeVoice"},{"type":"text","text":" for the "},{"code":"omittingEmptySubsequences","type":"codeVoice"},{"type":"text","text":" "},{"type":"text","text":"parameter, so the returned array contains empty strings where spaces"},{"type":"text","text":" "},{"type":"text","text":"were repeated."}]},{"type":"codeListing","code":["for spaceless in line.lazy.split(","  omittingEmptySubsequences: false,","  whereSeparator: { $0 == \" \" }",") {","  print(spaceless)","}","\/\/ Prints","\/\/ BLANCHE:","\/\/","\/\/","\/\/ I","\/\/ don't","\/\/ want","\/\/ realism.","\/\/ I","\/\/ want","\/\/ magic!"],"syntax":null},{"type":"aside","style":"note","name":"Complexity","content":[{"inlineContent":[{"type":"text","text":"O("},{"type":"emphasis","inlineContent":[{"type":"text","text":"n"}]},{"type":"text","text":"), where "},{"type":"emphasis","inlineContent":[{"text":"n","type":"text"}]},{"type":"text","text":" is the length of the collection."}],"type":"paragraph"}]}]}],"kind":"symbol","variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/algorithms\/joinedbyclosurecollection\/split(maxsplits:omittingemptysubsequences:whereseparator:)"]}],"identifier":{"url":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Algorithms\/JoinedByClosureCollection\/split(maxSplits:omittingEmptySubsequences:whereSeparator:)","interfaceLanguage":"swift"},"schemaVersion":{"minor":3,"major":0,"patch":0},"metadata":{"externalID":"s:s20LazySequenceProtocolP10AlgorithmsSlRzSl8ElementsABRpzrlE5split9maxSplits25omittingEmptySubsequences14whereSeparatorAC15SplitCollectionVyAEGSi_S2b7ElementSTQzctF::SYNTHESIZED::s:10Algorithms25JoinedByClosureCollectionV","conformance":{"constraints":[{"code":"Self","type":"codeVoice"},{"text":" conforms to ","type":"text"},{"type":"codeVoice","code":"Collection"},{"text":" and ","type":"text"},{"type":"codeVoice","code":"Elements"},{"text":" conforms to ","type":"text"},{"type":"codeVoice","code":"Collection"},{"text":".","type":"text"}],"availabilityPrefix":[{"text":"Available when","type":"text"}],"conformancePrefix":[{"text":"Conforms when","type":"text"}]},"roleHeading":"Instance Method","symbolKind":"method","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"split"},{"kind":"text","text":"("},{"kind":"externalParam","text":"maxSplits"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:Si","text":"Int"},{"kind":"text","text":", "},{"kind":"externalParam","text":"omittingEmptySubsequences"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:Sb","text":"Bool"},{"text":", ","kind":"text"},{"text":"whereSeparator","kind":"externalParam"},{"text":": (","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Element","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"text":"Bool","preciseIdentifier":"s:Sb","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"text":"SplitCollection","kind":"typeIdentifier","preciseIdentifier":"s:10Algorithms15SplitCollectionV"},{"text":"<","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Elements","kind":"typeIdentifier"},{"text":">","kind":"text"}],"role":"symbol","modules":[{"name":"Algorithms"}],"extendedModule":"Swift","title":"split(maxSplits:omittingEmptySubsequences:whereSeparator:)"},"references":{"doc://co.pointfree.VaporRouting/documentation/Algorithms/SplitCollection":{"navigatorTitle":[{"kind":"identifier","text":"SplitCollection"}],"fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"SplitCollection"}],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Algorithms\/SplitCollection","abstract":[{"type":"text","text":"A collection that lazily splits a base collection into subsequences"},{"type":"text","text":" "},{"type":"text","text":"separated by elements that satisfy the given "},{"code":"whereSeparator","type":"codeVoice"},{"type":"text","text":" predicate."}],"url":"\/documentation\/algorithms\/splitcollection","role":"symbol","type":"topic","title":"SplitCollection","kind":"symbol"},"doc://co.pointfree.VaporRouting/documentation/Algorithms":{"url":"\/documentation\/algorithms","kind":"symbol","abstract":[],"role":"collection","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Algorithms","type":"topic","title":"Algorithms"},"doc://co.pointfree.VaporRouting/documentation/Algorithms/JoinedByClosureCollection":{"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Algorithms\/JoinedByClosureCollection","url":"\/documentation\/algorithms\/joinedbyclosurecollection","type":"topic","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"JoinedByClosureCollection","kind":"identifier"}],"title":"JoinedByClosureCollection","navigatorTitle":[{"text":"JoinedByClosureCollection","kind":"identifier"}],"abstract":[{"text":"A collection that presents the elements of a base collection of collections","type":"text"},{"text":" ","type":"text"},{"text":"concatenated using a given separator that depends on the collections right","type":"text"},{"text":" ","type":"text"},{"text":"before and after it.","type":"text"}],"role":"symbol","kind":"symbol"},"doc://co.pointfree.VaporRouting/documentation/Algorithms/JoinedByClosureCollection/LazySequenceProtocol-Implementations":{"title":"LazySequenceProtocol Implementations","url":"\/documentation\/algorithms\/joinedbyclosurecollection\/lazysequenceprotocol-implementations","role":"collectionGroup","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Algorithms\/JoinedByClosureCollection\/LazySequenceProtocol-Implementations","abstract":[],"type":"topic","kind":"article"},"doc://co.pointfree.VaporRouting/documentation/Algorithms/JoinedByClosureCollection/split(maxSplits:omittingEmptySubsequences:whereSeparator:)":{"abstract":[{"type":"text","text":"Lazily returns the longest possible subsequences of the collection, in"},{"type":"text","text":" "},{"type":"text","text":"order, that don’t contain elements satisfying the given predicate."}],"url":"\/documentation\/algorithms\/joinedbyclosurecollection\/split(maxsplits:omittingemptysubsequences:whereseparator:)","role":"symbol","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"split"},{"kind":"text","text":"("},{"kind":"externalParam","text":"maxSplits"},{"kind":"text","text":": "},{"text":"Int","kind":"typeIdentifier","preciseIdentifier":"s:Si"},{"text":", ","kind":"text"},{"text":"omittingEmptySubsequences","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"Bool","kind":"typeIdentifier","preciseIdentifier":"s:Sb"},{"text":", ","kind":"text"},{"text":"whereSeparator","kind":"externalParam"},{"text":": (","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Element","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"text":"Bool","kind":"typeIdentifier","preciseIdentifier":"s:Sb"},{"text":") -> ","kind":"text"},{"text":"SplitCollection","kind":"typeIdentifier","preciseIdentifier":"s:10Algorithms15SplitCollectionV"},{"text":"<","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Elements","kind":"typeIdentifier"},{"text":">","kind":"text"}],"kind":"symbol","title":"split(maxSplits:omittingEmptySubsequences:whereSeparator:)","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Algorithms\/JoinedByClosureCollection\/split(maxSplits:omittingEmptySubsequences:whereSeparator:)","type":"topic","conformance":{"constraints":[{"type":"codeVoice","code":"Self"},{"text":" conforms to ","type":"text"},{"type":"codeVoice","code":"Collection"},{"type":"text","text":" and "},{"type":"codeVoice","code":"Elements"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"Collection"},{"type":"text","text":"."}],"availabilityPrefix":[{"text":"Available when","type":"text"}],"conformancePrefix":[{"text":"Conforms when","type":"text"}]}}}}