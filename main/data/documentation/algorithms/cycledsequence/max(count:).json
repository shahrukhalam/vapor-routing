{"primaryContentSections":[{"declarations":[{"platforms":["Linux"],"languages":["swift"],"tokens":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"max"},{"kind":"text","text":"("},{"kind":"externalParam","text":"count"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:Si","text":"Int"},{"kind":"text","text":") -> ["},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":"]"}]}],"kind":"declarations"},{"parameters":[{"content":[{"type":"paragraph","inlineContent":[{"text":"The number of elements to return. If ","type":"text"},{"type":"codeVoice","code":"count"},{"text":" is greater","type":"text"},{"text":" ","type":"text"},{"text":"than the number of elements in this sequence, all of the sequenceâ€™s","type":"text"},{"text":" ","type":"text"},{"text":"elements are returned.","type":"text"}]}],"name":"count"}],"kind":"parameters"},{"content":[{"anchor":"return-value","type":"heading","text":"Return Value","level":2},{"inlineContent":[{"type":"text","text":"An array of the largest "},{"type":"codeVoice","code":"count"},{"type":"text","text":" elements of this sequence."}],"type":"paragraph"}],"kind":"content"},{"content":[{"text":"Discussion","anchor":"discussion","type":"heading","level":2},{"inlineContent":[{"text":"This example partially sorts an array of integers to retrieve its three","type":"text"},{"text":" ","type":"text"},{"text":"largest values:","type":"text"}],"type":"paragraph"},{"syntax":null,"type":"codeListing","code":["let numbers = [7, 1, 6, 2, 8, 3, 9]","let smallestThree = numbers.max(count: 3)","\/\/ [7, 8, 9]"]},{"inlineContent":[{"text":"If you need to sort a sequence but only need to access its largest","type":"text"},{"text":" ","type":"text"},{"text":"elements, using this method can give you a performance boost over sorting","type":"text"},{"text":" ","type":"text"},{"text":"the entire sequence. The order of equal elements is guaranteed to be","type":"text"},{"text":" ","type":"text"},{"text":"preserved.","type":"text"}],"type":"paragraph"},{"style":"note","content":[{"inlineContent":[{"type":"text","text":"O("},{"inlineContent":[{"text":"k","type":"text"}],"type":"emphasis"},{"type":"text","text":" log "},{"inlineContent":[{"text":"k","type":"text"}],"type":"emphasis"},{"type":"text","text":" + "},{"inlineContent":[{"type":"text","text":"nk"}],"type":"emphasis"},{"type":"text","text":"), where "},{"inlineContent":[{"type":"text","text":"n"}],"type":"emphasis"},{"type":"text","text":" is the length of the"},{"type":"text","text":" "},{"type":"text","text":"sequence and "},{"inlineContent":[{"text":"k","type":"text"}],"type":"emphasis"},{"type":"text","text":" is "},{"type":"codeVoice","code":"count"},{"type":"text","text":"."}],"type":"paragraph"}],"type":"aside","name":"Complexity"}],"kind":"content"}],"kind":"symbol","sections":[],"metadata":{"roleHeading":"Instance Method","title":"max(count:)","modules":[{"name":"Algorithms"}],"fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"max","kind":"identifier"},{"text":"(","kind":"text"},{"text":"count","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"Int","preciseIdentifier":"s:Si","kind":"typeIdentifier"},{"text":") -> [","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Element","kind":"typeIdentifier"},{"text":"]","kind":"text"}],"symbolKind":"method","extendedModule":"Swift","externalID":"s:ST10AlgorithmsSL7ElementRpzrlE3max5countSayACGSi_tF::SYNTHESIZED::s:10Algorithms14CycledSequenceV","conformance":{"conformancePrefix":[{"type":"text","text":"Conforms when"}],"constraints":[{"type":"codeVoice","code":"Element"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"Comparable"},{"type":"text","text":"."}],"availabilityPrefix":[{"type":"text","text":"Available when"}]},"role":"symbol"},"hierarchy":{"paths":[["doc:\/\/co.pointfree.VaporRouting\/documentation\/Algorithms","doc:\/\/co.pointfree.VaporRouting\/documentation\/Algorithms\/CycledSequence","doc:\/\/co.pointfree.VaporRouting\/documentation\/Algorithms\/CycledSequence\/Sequence-Implementations"]]},"variants":[{"paths":["\/documentation\/algorithms\/cycledsequence\/max(count:)"],"traits":[{"interfaceLanguage":"swift"}]}],"abstract":[{"type":"text","text":"Returns the largest elements of this sequence."}],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Algorithms\/CycledSequence\/max(count:)"},"schemaVersion":{"major":0,"patch":0,"minor":3},"references":{"doc://co.pointfree.VaporRouting/documentation/Algorithms":{"url":"\/documentation\/algorithms","kind":"symbol","abstract":[],"role":"collection","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Algorithms","type":"topic","title":"Algorithms"},"doc://co.pointfree.VaporRouting/documentation/Algorithms/CycledSequence/max(count:)":{"conformance":{"conformancePrefix":[{"type":"text","text":"Conforms when"}],"constraints":[{"type":"codeVoice","code":"Element"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"Comparable"},{"type":"text","text":"."}],"availabilityPrefix":[{"type":"text","text":"Available when"}]},"title":"max(count:)","kind":"symbol","type":"topic","url":"\/documentation\/algorithms\/cycledsequence\/max(count:)","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Algorithms\/CycledSequence\/max(count:)","abstract":[{"type":"text","text":"Returns the largest elements of this sequence."}],"fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"max"},{"text":"(","kind":"text"},{"text":"count","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"Int","preciseIdentifier":"s:Si","kind":"typeIdentifier"},{"text":") -> [","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Element","kind":"typeIdentifier"},{"text":"]","kind":"text"}],"role":"symbol"},"doc://co.pointfree.VaporRouting/documentation/Algorithms/CycledSequence/Sequence-Implementations":{"type":"topic","kind":"article","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Algorithms\/CycledSequence\/Sequence-Implementations","abstract":[],"title":"Sequence Implementations","role":"collectionGroup","url":"\/documentation\/algorithms\/cycledsequence\/sequence-implementations"},"doc://co.pointfree.VaporRouting/documentation/Algorithms/CycledSequence":{"abstract":[{"type":"text","text":"A collection wrapper that repeats the elements of a base collection."}],"url":"\/documentation\/algorithms\/cycledsequence","kind":"symbol","role":"symbol","navigatorTitle":[{"kind":"identifier","text":"CycledSequence"}],"fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"CycledSequence"}],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Algorithms\/CycledSequence","title":"CycledSequence","type":"topic"}}}