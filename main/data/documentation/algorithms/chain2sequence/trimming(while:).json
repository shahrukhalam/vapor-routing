{"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Algorithms\/Chain2Sequence\/trimming(while:)"},"hierarchy":{"paths":[["doc:\/\/co.pointfree.VaporRouting\/documentation\/Algorithms","doc:\/\/co.pointfree.VaporRouting\/documentation\/Algorithms\/Chain2Sequence","doc:\/\/co.pointfree.VaporRouting\/documentation\/Algorithms\/Chain2Sequence\/BidirectionalCollection-Implementations"]]},"sections":[],"metadata":{"externalID":"s:SK10AlgorithmsE8trimming5while11SubSequenceQzSb7ElementQzKXE_tKF::SYNTHESIZED::s:10Algorithms14Chain2SequenceV","title":"trimming(while:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"trimming"},{"kind":"text","text":"("},{"kind":"externalParam","text":"while"},{"kind":"text","text":": ("},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":") "},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> "},{"preciseIdentifier":"s:Sb","kind":"typeIdentifier","text":"Bool"},{"kind":"text","text":") "},{"kind":"keyword","text":"rethrows"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"SubSequence"}],"role":"symbol","symbolKind":"method","roleHeading":"Instance Method","extendedModule":"Swift","modules":[{"name":"Algorithms"}]},"abstract":[{"type":"text","text":"Returns a "},{"type":"codeVoice","code":"SubSequence"},{"type":"text","text":" formed by discarding all elements at the start and"},{"type":"text","text":" "},{"type":"text","text":"end of the collection which satisfy the given predicate."}],"primaryContentSections":[{"kind":"declarations","declarations":[{"languages":["swift"],"tokens":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"trimming","kind":"identifier"},{"text":"(","kind":"text"},{"text":"while","kind":"externalParam"},{"text":" ","kind":"text"},{"text":"predicate","kind":"internalParam"},{"text":": (","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Element","kind":"typeIdentifier"},{"text":") ","kind":"text"},{"text":"throws","kind":"keyword"},{"text":" -> ","kind":"text"},{"text":"Bool","kind":"typeIdentifier","preciseIdentifier":"s:Sb"},{"text":") ","kind":"text"},{"text":"rethrows","kind":"keyword"},{"text":" -> ","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"SubSequence","kind":"typeIdentifier"}],"platforms":["Linux"]}]},{"kind":"parameters","parameters":[{"content":[{"type":"paragraph","inlineContent":[{"text":"A closure which determines if the element should be","type":"text"},{"text":" ","type":"text"},{"text":"omitted from the resulting slice.","type":"text"}]}],"name":"predicate"}]},{"kind":"content","content":[{"type":"heading","text":"Discussion","anchor":"discussion","level":2},{"type":"paragraph","inlineContent":[{"text":"This example uses ","type":"text"},{"code":"trimming(while:)","type":"codeVoice"},{"text":" to get a substring without the white","type":"text"},{"text":" ","type":"text"},{"text":"space at the beginning and end of the string:","type":"text"}]},{"type":"codeListing","syntax":null,"code":["let myString = \"  hello, world  \"","print(myString.trimming(while: \\.isWhitespace)) \/\/ \"hello, world\""]},{"content":[{"inlineContent":[{"type":"text","text":"O("},{"type":"emphasis","inlineContent":[{"type":"text","text":"n"}]},{"type":"text","text":"), where "},{"type":"emphasis","inlineContent":[{"text":"n","type":"text"}]},{"type":"text","text":" is the length of this collection."}],"type":"paragraph"}],"type":"aside","style":"note","name":"Complexity"}]}],"kind":"symbol","schemaVersion":{"minor":3,"patch":0,"major":0},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/algorithms\/chain2sequence\/trimming(while:)"]}],"references":{"doc://co.pointfree.VaporRouting/documentation/Algorithms/Chain2Sequence/trimming(while:)":{"type":"topic","title":"trimming(while:)","role":"symbol","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Algorithms\/Chain2Sequence\/trimming(while:)","kind":"symbol","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"trimming","kind":"identifier"},{"text":"(","kind":"text"},{"kind":"externalParam","text":"while"},{"kind":"text","text":": ("},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":") "},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","preciseIdentifier":"s:Sb","text":"Bool"},{"kind":"text","text":") "},{"kind":"keyword","text":"rethrows"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"SubSequence"}],"abstract":[{"text":"Returns a ","type":"text"},{"code":"SubSequence","type":"codeVoice"},{"text":" formed by discarding all elements at the start and","type":"text"},{"text":" ","type":"text"},{"text":"end of the collection which satisfy the given predicate.","type":"text"}],"url":"\/documentation\/algorithms\/chain2sequence\/trimming(while:)"},"doc://co.pointfree.VaporRouting/documentation/Algorithms":{"url":"\/documentation\/algorithms","kind":"symbol","abstract":[],"role":"collection","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Algorithms","type":"topic","title":"Algorithms"},"doc://co.pointfree.VaporRouting/documentation/Algorithms/Chain2Sequence/BidirectionalCollection-Implementations":{"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Algorithms\/Chain2Sequence\/BidirectionalCollection-Implementations","role":"collectionGroup","title":"BidirectionalCollection Implementations","kind":"article","abstract":[],"url":"\/documentation\/algorithms\/chain2sequence\/bidirectionalcollection-implementations","type":"topic"},"doc://co.pointfree.VaporRouting/documentation/Algorithms/Chain2Sequence":{"abstract":[{"text":"A concatenation of two sequences with the same element type.","type":"text"}],"url":"\/documentation\/algorithms\/chain2sequence","kind":"symbol","navigatorTitle":[{"text":"Chain2Sequence","kind":"identifier"}],"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Chain2Sequence","kind":"identifier"}],"title":"Chain2Sequence","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Algorithms\/Chain2Sequence","role":"symbol","type":"topic"}}}