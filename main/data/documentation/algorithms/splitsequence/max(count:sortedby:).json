{"kind":"symbol","abstract":[{"text":"Returns the largest elements of this sequence, as sorted by the given","type":"text"},{"text":" ","type":"text"},{"text":"predicate.","type":"text"}],"sections":[],"schemaVersion":{"major":0,"patch":0,"minor":3},"primaryContentSections":[{"declarations":[{"tokens":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"max"},{"kind":"text","text":"("},{"kind":"externalParam","text":"count"},{"kind":"text","text":": "},{"preciseIdentifier":"s:Si","kind":"typeIdentifier","text":"Int"},{"kind":"text","text":", "},{"kind":"externalParam","text":"sortedBy"},{"kind":"text","text":" "},{"kind":"internalParam","text":"areInIncreasingOrder"},{"kind":"text","text":": ("},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":") "},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> "},{"preciseIdentifier":"s:Sb","kind":"typeIdentifier","text":"Bool"},{"kind":"text","text":") "},{"kind":"keyword","text":"rethrows"},{"kind":"text","text":" -> ["},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":"]"}],"platforms":["Linux"],"languages":["swift"]}],"kind":"declarations"},{"parameters":[{"name":"count","content":[{"inlineContent":[{"text":"The number of elements to return. If ","type":"text"},{"code":"count","type":"codeVoice"},{"text":" is greater than","type":"text"},{"text":" ","type":"text"},{"text":"the number of elements in this sequence, all of the sequenceâ€™s","type":"text"},{"text":" ","type":"text"},{"text":"elements are returned.","type":"text"}],"type":"paragraph"}]},{"name":"areInIncreasingOrder","content":[{"inlineContent":[{"type":"text","text":"A predicate that returns "},{"type":"codeVoice","code":"true"},{"type":"text","text":" if its"},{"type":"text","text":" "},{"type":"text","text":"first argument should be ordered before its second argument;"},{"type":"text","text":" "},{"type":"text","text":"otherwise, "},{"type":"codeVoice","code":"false"},{"type":"text","text":"."}],"type":"paragraph"}]}],"kind":"parameters"},{"content":[{"text":"Return Value","type":"heading","anchor":"return-value","level":2},{"type":"paragraph","inlineContent":[{"type":"text","text":"An array of the largest "},{"code":"count","type":"codeVoice"},{"type":"text","text":" elements of this sequence,"},{"type":"text","text":" "},{"type":"text","text":"sorted according to "},{"code":"areInIncreasingOrder","type":"codeVoice"},{"type":"text","text":"."}]}],"kind":"content"},{"content":[{"text":"Discussion","type":"heading","level":2,"anchor":"discussion"},{"inlineContent":[{"type":"text","text":"This example partially sorts an array of integers to retrieve its three"},{"type":"text","text":" "},{"type":"text","text":"largest values:"}],"type":"paragraph"},{"code":["let numbers = [7, 1, 6, 2, 8, 3, 9]","let smallestThree = numbers.max(count: 3, sortedBy: <)","\/\/ [7, 8, 9]"],"type":"codeListing","syntax":null},{"inlineContent":[{"text":"If you need to sort a sequence but only need to access its largest","type":"text"},{"text":" ","type":"text"},{"text":"elements, using this method can give you a performance boost over sorting","type":"text"},{"text":" ","type":"text"},{"text":"the entire sequence. The order of equal elements is guaranteed to be","type":"text"},{"text":" ","type":"text"},{"text":"preserved.","type":"text"}],"type":"paragraph"},{"name":"Complexity","content":[{"inlineContent":[{"text":"O(","type":"text"},{"inlineContent":[{"text":"k","type":"text"}],"type":"emphasis"},{"text":" log ","type":"text"},{"inlineContent":[{"type":"text","text":"k"}],"type":"emphasis"},{"text":" + ","type":"text"},{"inlineContent":[{"type":"text","text":"nk"}],"type":"emphasis"},{"text":"), where ","type":"text"},{"inlineContent":[{"type":"text","text":"n"}],"type":"emphasis"},{"text":" is the length of the","type":"text"},{"text":" ","type":"text"},{"text":"sequence and ","type":"text"},{"inlineContent":[{"type":"text","text":"k"}],"type":"emphasis"},{"text":" is ","type":"text"},{"code":"count","type":"codeVoice"},{"text":".","type":"text"}],"type":"paragraph"}],"type":"aside","style":"note"}],"kind":"content"}],"variants":[{"paths":["\/documentation\/algorithms\/splitsequence\/max(count:sortedby:)"],"traits":[{"interfaceLanguage":"swift"}]}],"identifier":{"url":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Algorithms\/SplitSequence\/max(count:sortedBy:)","interfaceLanguage":"swift"},"hierarchy":{"paths":[["doc:\/\/co.pointfree.VaporRouting\/documentation\/Algorithms","doc:\/\/co.pointfree.VaporRouting\/documentation\/Algorithms\/SplitSequence","doc:\/\/co.pointfree.VaporRouting\/documentation\/Algorithms\/SplitSequence\/Sequence-Implementations"]]},"metadata":{"symbolKind":"method","role":"symbol","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"max"},{"kind":"text","text":"("},{"kind":"externalParam","text":"count"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:Si","text":"Int"},{"kind":"text","text":", "},{"kind":"externalParam","text":"sortedBy"},{"kind":"text","text":": ("},{"kind":"typeIdentifier","text":"Self"},{"text":".","kind":"text"},{"text":"Element","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Element","kind":"typeIdentifier"},{"text":") ","kind":"text"},{"text":"throws","kind":"keyword"},{"text":" -> ","kind":"text"},{"text":"Bool","kind":"typeIdentifier","preciseIdentifier":"s:Sb"},{"text":") ","kind":"text"},{"text":"rethrows","kind":"keyword"},{"text":" -> [","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Element","kind":"typeIdentifier"},{"text":"]","kind":"text"}],"externalID":"s:ST10AlgorithmsE3max5count8sortedBySay7ElementQzGSi_SbAF_AFtKXEtKF::SYNTHESIZED::s:10Algorithms13SplitSequenceV","extendedModule":"Swift","title":"max(count:sortedBy:)","roleHeading":"Instance Method","modules":[{"name":"Algorithms"}]},"references":{"doc://co.pointfree.VaporRouting/documentation/Algorithms/SplitSequence":{"abstract":[{"text":"A sequence that lazily splits a base sequence into subsequences separated by","type":"text"},{"text":" ","type":"text"},{"text":"elements that satisfy the given ","type":"text"},{"type":"codeVoice","code":"whereSeparator"},{"text":" predicate.","type":"text"}],"role":"symbol","navigatorTitle":[{"text":"SplitSequence","kind":"identifier"}],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Algorithms\/SplitSequence","kind":"symbol","title":"SplitSequence","url":"\/documentation\/algorithms\/splitsequence","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"SplitSequence","kind":"identifier"}],"type":"topic"},"doc://co.pointfree.VaporRouting/documentation/Algorithms/SplitSequence/max(count:sortedBy:)":{"url":"\/documentation\/algorithms\/splitsequence\/max(count:sortedby:)","title":"max(count:sortedBy:)","kind":"symbol","type":"topic","abstract":[{"text":"Returns the largest elements of this sequence, as sorted by the given","type":"text"},{"text":" ","type":"text"},{"text":"predicate.","type":"text"}],"fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"max","kind":"identifier"},{"text":"(","kind":"text"},{"text":"count","kind":"externalParam"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:Si","text":"Int","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"sortedBy","kind":"externalParam"},{"text":": (","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":") "},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","preciseIdentifier":"s:Sb","text":"Bool"},{"kind":"text","text":") "},{"kind":"keyword","text":"rethrows"},{"kind":"text","text":" -> ["},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":"]"}],"role":"symbol","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Algorithms\/SplitSequence\/max(count:sortedBy:)"},"doc://co.pointfree.VaporRouting/documentation/Algorithms":{"url":"\/documentation\/algorithms","kind":"symbol","abstract":[],"role":"collection","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Algorithms","type":"topic","title":"Algorithms"},"doc://co.pointfree.VaporRouting/documentation/Algorithms/SplitSequence/Sequence-Implementations":{"kind":"article","role":"collectionGroup","abstract":[],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Algorithms\/SplitSequence\/Sequence-Implementations","title":"Sequence Implementations","type":"topic","url":"\/documentation\/algorithms\/splitsequence\/sequence-implementations"}}}