{"kind":"symbol","primaryContentSections":[{"declarations":[{"languages":["swift"],"platforms":["Linux"],"tokens":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"withPipes"},{"kind":"text","text":"("},{"kind":"externalParam","text":"inputDescriptor"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:s4CInta","text":"CInt"},{"kind":"text","text":", "},{"kind":"externalParam","text":"outputDescriptor"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:s4CInta","text":"CInt"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","preciseIdentifier":"s:7NIOCore15EventLoopFutureC","text":"EventLoopFuture","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/EventLoopFuture"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","preciseIdentifier":"s:7NIOCore7ChannelP","text":"Channel","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/Channel"},{"kind":"text","text":">"}]}],"kind":"declarations"},{"parameters":[{"name":"inputDescriptor","content":[{"inlineContent":[{"text":"The ","type":"text"},{"inlineContent":[{"text":"Unix file descriptor","type":"text"}],"type":"emphasis"},{"text":" for the input (ie. the read side).","type":"text"}],"type":"paragraph"}]},{"name":"outputDescriptor","content":[{"type":"paragraph","inlineContent":[{"text":"The ","type":"text"},{"type":"emphasis","inlineContent":[{"text":"Unix file descriptor","type":"text"}]},{"text":" for the output (ie. the write side).","type":"text"}]}]}],"kind":"parameters"},{"kind":"content","content":[{"anchor":"return-value","type":"heading","level":2,"text":"Return Value"},{"type":"paragraph","inlineContent":[{"text":"an ","type":"text"},{"code":"EventLoopFuture<Channel>","type":"codeVoice"},{"text":" to deliver the ","type":"text"},{"code":"Channel","type":"codeVoice"},{"text":".","type":"text"}]}]},{"kind":"content","content":[{"text":"Discussion","type":"heading","anchor":"discussion","level":2},{"type":"paragraph","inlineContent":[{"type":"text","text":"The input and output file descriptors must be distinct. If you have a single file descriptor, consider using"},{"type":"text","text":" "},{"type":"codeVoice","code":"ClientBootstrap.withConnectedSocket(descriptor:)"},{"type":"text","text":" if itâ€™s a socket or"},{"type":"text","text":" "},{"type":"codeVoice","code":"NIOPipeBootstrap.withInputOutputDescriptor"},{"type":"text","text":" if it is not a socket."}]},{"content":[{"inlineContent":[{"text":"If this method returns a succeeded future, SwiftNIO will close ","type":"text"},{"type":"codeVoice","code":"inputDescriptor"},{"text":" and ","type":"text"},{"type":"codeVoice","code":"outputDescriptor"},{"text":" ","type":"text"},{"text":"when the ","type":"text"},{"type":"codeVoice","code":"Channel"},{"text":" becomes inactive. You ","type":"text"},{"type":"emphasis","inlineContent":[{"text":"must not","type":"text"}]},{"text":" do any further operations ","type":"text"},{"type":"codeVoice","code":"inputDescriptor"},{"text":" or","type":"text"},{"text":" ","type":"text"},{"type":"codeVoice","code":"outputDescriptor"},{"text":", including ","type":"text"},{"type":"codeVoice","code":"close"},{"text":".","type":"text"},{"text":" ","type":"text"},{"text":"If this method returns a failed future, you still own the file descriptors and are responsible for","type":"text"},{"text":" ","type":"text"},{"text":"closing them.","type":"text"}],"type":"paragraph"}],"name":"Note","type":"aside","style":"note"}]}],"metadata":{"roleHeading":"Instance Method","title":"withPipes(inputDescriptor:outputDescriptor:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"withPipes"},{"kind":"text","text":"("},{"kind":"externalParam","text":"inputDescriptor"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"CInt","preciseIdentifier":"s:s4CInta"},{"kind":"text","text":", "},{"kind":"externalParam","text":"outputDescriptor"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"CInt","preciseIdentifier":"s:s4CInta"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"EventLoopFuture","preciseIdentifier":"s:7NIOCore15EventLoopFutureC"},{"kind":"text","text":"<"},{"text":"Channel","kind":"typeIdentifier","preciseIdentifier":"s:7NIOCore7ChannelP"},{"text":">","kind":"text"}],"modules":[{"name":"NIOPosix"}],"role":"symbol","symbolKind":"method","externalID":"s:8NIOPosix16NIOPipeBootstrapC9withPipes15inputDescriptor06outputG07NIOCore15EventLoopFutureCyAG7Channel_pGs5Int32V_AMtF"},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/nioposix\/niopipebootstrap\/withpipes(inputdescriptor:outputdescriptor:)"]}],"identifier":{"url":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOPosix\/NIOPipeBootstrap\/withPipes(inputDescriptor:outputDescriptor:)","interfaceLanguage":"swift"},"schemaVersion":{"patch":0,"major":0,"minor":3},"sections":[],"abstract":[{"text":"Create the ","type":"text"},{"code":"PipeChannel","type":"codeVoice"},{"text":" with the provided input and output file descriptors.","type":"text"}],"hierarchy":{"paths":[["doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOPosix","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOPosix\/NIOPipeBootstrap"]]},"references":{"doc://co.pointfree.VaporRouting/documentation/NIOPosix/NIOPipeBootstrap":{"kind":"symbol","fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"NIOPipeBootstrap","kind":"identifier"}],"url":"\/documentation\/nioposix\/niopipebootstrap","navigatorTitle":[{"text":"NIOPipeBootstrap","kind":"identifier"}],"type":"topic","title":"NIOPipeBootstrap","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOPosix\/NIOPipeBootstrap","abstract":[{"text":"A ","type":"text"},{"code":"NIOPipeBootstrap","type":"codeVoice"},{"text":" is an easy way to bootstrap a ","type":"text"},{"code":"PipeChannel","type":"codeVoice"},{"text":" which uses two (uni-directional) UNIX pipes","type":"text"},{"text":" ","type":"text"},{"text":"and makes a ","type":"text"},{"code":"Channel","type":"codeVoice"},{"text":" out of them.","type":"text"}],"role":"symbol"},"doc://co.pointfree.VaporRouting/documentation/NIOCore/EventLoopFuture":{"url":"\/documentation\/niocore\/eventloopfuture","kind":"symbol","type":"topic","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"EventLoopFuture"}],"navigatorTitle":[{"kind":"identifier","text":"EventLoopFuture"}],"abstract":[{"type":"text","text":"Holder for a result that will be provided later."}],"role":"symbol","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/EventLoopFuture","title":"EventLoopFuture"},"doc://co.pointfree.VaporRouting/documentation/NIOCore/Channel":{"kind":"symbol","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/Channel","type":"topic","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"Channel"}],"navigatorTitle":[{"kind":"identifier","text":"Channel"}],"url":"\/documentation\/niocore\/channel","abstract":[{"type":"text","text":"A "},{"type":"codeVoice","code":"Channel"},{"type":"text","text":" is easiest thought of as a network socket. But it can be anything that is capable of I\/O operations such"},{"type":"text","text":" "},{"type":"text","text":"as read, write, connect, and bind."}],"title":"Channel","role":"symbol"},"doc://co.pointfree.VaporRouting/documentation/NIOPosix/NIOPipeBootstrap/withPipes(inputDescriptor:outputDescriptor:)":{"kind":"symbol","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"withPipes","kind":"identifier"},{"text":"(","kind":"text"},{"text":"inputDescriptor","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"CInt","kind":"typeIdentifier","preciseIdentifier":"s:s4CInta"},{"text":", ","kind":"text"},{"text":"outputDescriptor","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"CInt","kind":"typeIdentifier","preciseIdentifier":"s:s4CInta"},{"text":") -> ","kind":"text"},{"text":"EventLoopFuture","kind":"typeIdentifier","preciseIdentifier":"s:7NIOCore15EventLoopFutureC"},{"text":"<","kind":"text"},{"text":"Channel","kind":"typeIdentifier","preciseIdentifier":"s:7NIOCore7ChannelP"},{"text":">","kind":"text"}],"url":"\/documentation\/nioposix\/niopipebootstrap\/withpipes(inputdescriptor:outputdescriptor:)","type":"topic","title":"withPipes(inputDescriptor:outputDescriptor:)","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOPosix\/NIOPipeBootstrap\/withPipes(inputDescriptor:outputDescriptor:)","abstract":[{"text":"Create the ","type":"text"},{"code":"PipeChannel","type":"codeVoice"},{"text":" with the provided input and output file descriptors.","type":"text"}],"role":"symbol"},"doc://co.pointfree.VaporRouting/documentation/NIOPosix":{"type":"topic","title":"NIOPosix","url":"\/documentation\/nioposix","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOPosix","abstract":[],"kind":"symbol","role":"collection"}}}