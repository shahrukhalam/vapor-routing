{"kind":"symbol","abstract":[{"text":"Read ","type":"text"},{"code":"byteCount","type":"codeVoice"},{"text":" bytes from offset ","type":"text"},{"code":"fileOffset","type":"codeVoice"},{"text":" in chunks of ","type":"text"},{"code":"chunkSize","type":"codeVoice"},{"text":" bytes from ","type":"text"},{"code":"fileHandle","type":"codeVoice"},{"text":" in ","type":"text"},{"code":"NonBlockingFileIO","type":"codeVoice"},{"text":"â€™s private thread","type":"text"},{"text":" ","type":"text"},{"text":"pool which is separate from any ","type":"text"},{"code":"EventLoop","type":"codeVoice"},{"text":" thread.","type":"text"}],"schemaVersion":{"patch":0,"major":0,"minor":3},"hierarchy":{"paths":[["doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOPosix","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOPosix\/NonBlockingFileIO"]]},"identifier":{"url":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOPosix\/NonBlockingFileIO\/readChunked(fileHandle:fromOffset:byteCount:chunkSize:allocator:eventLoop:chunkHandler:)","interfaceLanguage":"swift"},"metadata":{"modules":[{"name":"NIOPosix"}],"symbolKind":"method","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"readChunked"},{"kind":"text","text":"("},{"kind":"externalParam","text":"fileHandle"},{"kind":"text","text":": "},{"preciseIdentifier":"s:7NIOCore13NIOFileHandleC","text":"NIOFileHandle","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"fromOffset","kind":"externalParam"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:s5Int64V","text":"Int64","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"byteCount","kind":"externalParam"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:Si","text":"Int","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"chunkSize","kind":"externalParam"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:Si","text":"Int","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"allocator","kind":"externalParam"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:7NIOCore19ByteBufferAllocatorV","text":"ByteBufferAllocator","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"eventLoop","kind":"externalParam"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:7NIOCore9EventLoopP","text":"EventLoop","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"chunkHandler","kind":"externalParam"},{"text":": (","kind":"text"},{"preciseIdentifier":"s:7NIOCore10ByteBufferV","text":"ByteBuffer","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"preciseIdentifier":"s:7NIOCore15EventLoopFutureC","text":"EventLoopFuture","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"preciseIdentifier":"s:s4Voida","text":"Void","kind":"typeIdentifier"},{"text":">) -> ","kind":"text"},{"preciseIdentifier":"s:7NIOCore15EventLoopFutureC","text":"EventLoopFuture","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"preciseIdentifier":"s:s4Voida","text":"Void","kind":"typeIdentifier"},{"text":">","kind":"text"}],"externalID":"s:8NIOPosix17NonBlockingFileIOV11readChunked10fileHandle10fromOffset9byteCount9chunkSize9allocator9eventLoop0N7Handler7NIOCore05EventR6FutureCyytGAL07NIOFileI0C_s5Int64VS2iAL19ByteBufferAllocatorVAL0uR0_pAoL0yZ0VctF","roleHeading":"Instance Method","role":"symbol","title":"readChunked(fileHandle:fromOffset:byteCount:chunkSize:allocator:eventLoop:chunkHandler:)"},"sections":[],"variants":[{"paths":["\/documentation\/nioposix\/nonblockingfileio\/readchunked(filehandle:fromoffset:bytecount:chunksize:allocator:eventloop:chunkhandler:)"],"traits":[{"interfaceLanguage":"swift"}]}],"primaryContentSections":[{"declarations":[{"platforms":["Linux"],"tokens":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"readChunked"},{"kind":"text","text":"("},{"kind":"externalParam","text":"fileHandle"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:7NIOCore13NIOFileHandleC","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/NIOFileHandle","text":"NIOFileHandle"},{"kind":"text","text":", "},{"kind":"externalParam","text":"fromOffset"},{"kind":"text","text":" "},{"kind":"internalParam","text":"fileOffset"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:s5Int64V","text":"Int64"},{"kind":"text","text":", "},{"kind":"externalParam","text":"byteCount"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:Si","text":"Int"},{"kind":"text","text":", "},{"kind":"externalParam","text":"chunkSize"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:Si","text":"Int"},{"kind":"text","text":" = NonBlockingFileIO.defaultChunkSize, "},{"kind":"externalParam","text":"allocator"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:7NIOCore19ByteBufferAllocatorV","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/ByteBufferAllocator","text":"ByteBufferAllocator"},{"kind":"text","text":", "},{"kind":"externalParam","text":"eventLoop"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:7NIOCore9EventLoopP","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/EventLoop","text":"EventLoop"},{"kind":"text","text":", "},{"kind":"externalParam","text":"chunkHandler"},{"kind":"text","text":": "},{"kind":"keyword","text":"@escaping"},{"kind":"text","text":" ("},{"kind":"typeIdentifier","preciseIdentifier":"s:7NIOCore10ByteBufferV","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/ByteBuffer","text":"ByteBuffer"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","preciseIdentifier":"s:7NIOCore15EventLoopFutureC","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/EventLoopFuture","text":"EventLoopFuture"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","preciseIdentifier":"s:s4Voida","text":"Void"},{"kind":"text","text":">) -> "},{"kind":"typeIdentifier","preciseIdentifier":"s:7NIOCore15EventLoopFutureC","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/EventLoopFuture","text":"EventLoopFuture"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","preciseIdentifier":"s:s4Voida","text":"Void"},{"kind":"text","text":">"}],"languages":["swift"]}],"kind":"declarations"},{"parameters":[{"name":"fileHandle","content":[{"type":"paragraph","inlineContent":[{"text":"The ","type":"text"},{"code":"NIOFileHandle","type":"codeVoice"},{"text":" to read from.","type":"text"}]}]},{"name":"byteCount","content":[{"inlineContent":[{"type":"text","text":"The number of bytes to read from "},{"type":"codeVoice","code":"fileHandle"},{"type":"text","text":"."}],"type":"paragraph"}]},{"name":"chunkSize","content":[{"type":"paragraph","inlineContent":[{"text":"The size of the individual chunks to deliver.","type":"text"}]}]},{"name":"allocator","content":[{"inlineContent":[{"type":"text","text":"A "},{"type":"codeVoice","code":"ByteBufferAllocator"},{"type":"text","text":" used to allocate space for the chunks."}],"type":"paragraph"}]},{"name":"eventLoop","content":[{"type":"paragraph","inlineContent":[{"text":"The ","type":"text"},{"code":"EventLoop","type":"codeVoice"},{"text":" to call ","type":"text"},{"code":"chunkHandler","type":"codeVoice"},{"text":" on.","type":"text"}]}]},{"name":"chunkHandler","content":[{"inlineContent":[{"type":"text","text":"Called for every chunk read. The next chunk will be read upon successful completion of the returned "},{"code":"EventLoopFuture","type":"codeVoice"},{"type":"text","text":". If the returned "},{"code":"EventLoopFuture","type":"codeVoice"},{"type":"text","text":" fails, the overall operation is aborted."}],"type":"paragraph"}]}],"kind":"parameters"},{"content":[{"type":"heading","anchor":"return-value","level":2,"text":"Return Value"},{"type":"paragraph","inlineContent":[{"type":"text","text":"An "},{"type":"codeVoice","code":"EventLoopFuture"},{"type":"text","text":" which is the result of the overall operation. If either the reading of "},{"type":"codeVoice","code":"fileHandle"},{"type":"text","text":" or "},{"type":"codeVoice","code":"chunkHandler"},{"type":"text","text":" fails, the "},{"type":"codeVoice","code":"EventLoopFuture"},{"type":"text","text":" will fail too. If the reading of "},{"type":"codeVoice","code":"fileHandle"},{"type":"text","text":" as well as "},{"type":"codeVoice","code":"chunkHandler"},{"type":"text","text":" always succeeded, the "},{"type":"codeVoice","code":"EventLoopFuture"},{"type":"text","text":" will succeed too."}]}],"kind":"content"},{"content":[{"type":"heading","text":"Discussion","level":2,"anchor":"discussion"},{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"chunkHandler"},{"type":"text","text":" will be called on "},{"type":"codeVoice","code":"eventLoop"},{"type":"text","text":" for every chunk that was read. Assuming "},{"type":"codeVoice","code":"byteCount"},{"type":"text","text":" is greater than"},{"type":"text","text":" "},{"type":"text","text":"zero and there are enough bytes available "},{"type":"codeVoice","code":"chunkHandler"},{"type":"text","text":" will be called "},{"type":"codeVoice","code":"1 + |_ byteCount \/ chunkSize _|"},{"type":"text","text":" "},{"type":"text","text":"times, delivering "},{"type":"codeVoice","code":"chunkSize"},{"type":"text","text":" bytes each time. If less than "},{"type":"codeVoice","code":"byteCount"},{"type":"text","text":" bytes can be read from "},{"type":"codeVoice","code":"descriptor"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"codeVoice","code":"chunkHandler"},{"type":"text","text":" will be called less often with the last invocation possibly being of less than "},{"type":"codeVoice","code":"chunkSize"},{"type":"text","text":" bytes."}]},{"type":"paragraph","inlineContent":[{"text":"The allocation and reading of a subsequent chunk will only be attempted when ","type":"text"},{"code":"chunkHandler","type":"codeVoice"},{"text":" succeeds.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"This method will not use the file descriptorâ€™s seek pointer which means there is no danger of reading from the","type":"text"},{"text":" ","type":"text"},{"text":"same ","type":"text"},{"code":"NIOFileHandle","type":"codeVoice"},{"text":" in multiple threads.","type":"text"}]},{"style":"note","type":"aside","name":"Note","content":[{"type":"paragraph","inlineContent":[{"text":"","type":"text"},{"code":"readChunked(fileRegion:chunkSize:allocator:eventLoop:chunkHandler:)","type":"codeVoice"},{"text":" should be preferred as it uses","type":"text"},{"text":" ","type":"text"},{"code":"FileRegion","type":"codeVoice"},{"text":" object instead of raw ","type":"text"},{"code":"NIOFileHandle","type":"codeVoice"},{"text":"s.","type":"text"}]}]}],"kind":"content"}],"references":{"doc://co.pointfree.VaporRouting/documentation/NIOCore/ByteBufferAllocator":{"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/ByteBufferAllocator","url":"\/documentation\/niocore\/bytebufferallocator","type":"topic","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"ByteBufferAllocator"}],"title":"ByteBufferAllocator","navigatorTitle":[{"kind":"identifier","text":"ByteBufferAllocator"}],"abstract":[{"text":"The preferred allocator for ","type":"text"},{"code":"ByteBuffer","type":"codeVoice"},{"text":" values. The allocation strategy is opaque but is currently libcâ€™s","type":"text"},{"text":" ","type":"text"},{"code":"malloc","type":"codeVoice"},{"text":", ","type":"text"},{"code":"realloc","type":"codeVoice"},{"text":" and ","type":"text"},{"code":"free","type":"codeVoice"},{"text":".","type":"text"}],"role":"symbol","kind":"symbol"},"doc://co.pointfree.VaporRouting/documentation/NIOCore/EventLoop":{"abstract":[{"type":"text","text":"An EventLoop processes IO \/ tasks in an endless loop for "},{"type":"codeVoice","code":"Channel"},{"type":"text","text":"s until itâ€™s closed."}],"url":"\/documentation\/niocore\/eventloop","type":"topic","title":"EventLoop","role":"symbol","navigatorTitle":[{"text":"EventLoop","kind":"identifier"}],"fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"EventLoop","kind":"identifier"}],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/EventLoop","kind":"symbol"},"doc://co.pointfree.VaporRouting/documentation/NIOCore/ByteBuffer":{"kind":"symbol","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/ByteBuffer","navigatorTitle":[{"kind":"identifier","text":"ByteBuffer"}],"title":"ByteBuffer","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"ByteBuffer"}],"role":"symbol","url":"\/documentation\/niocore\/bytebuffer","abstract":[{"code":"ByteBuffer","type":"codeVoice"},{"type":"text","text":" stores contiguously allocated raw bytes. It is a random and sequential accessible sequence of zero or"},{"type":"text","text":" "},{"type":"text","text":"more bytes (octets)."}],"type":"topic"},"doc://co.pointfree.VaporRouting/documentation/NIOCore/NIOFileHandle":{"title":"NIOFileHandle","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/NIOFileHandle","url":"\/documentation\/niocore\/niofilehandle","abstract":[{"text":"A ","type":"text"},{"type":"codeVoice","code":"NIOFileHandle"},{"text":" is a handle to an open file.","type":"text"}],"role":"symbol","type":"topic","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"NIOFileHandle"}],"kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"NIOFileHandle"}]},"doc://co.pointfree.VaporRouting/documentation/NIOPosix/NonBlockingFileIO":{"navigatorTitle":[{"kind":"identifier","text":"NonBlockingFileIO"}],"title":"NonBlockingFileIO","url":"\/documentation\/nioposix\/nonblockingfileio","abstract":[{"code":"NonBlockingFileIO","type":"codeVoice"},{"text":" is a helper that allows you to read files without blocking the calling thread.","type":"text"}],"fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"NonBlockingFileIO"}],"role":"symbol","kind":"symbol","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOPosix\/NonBlockingFileIO","type":"topic"},"doc://co.pointfree.VaporRouting/documentation/NIOCore/EventLoopFuture":{"url":"\/documentation\/niocore\/eventloopfuture","kind":"symbol","type":"topic","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"EventLoopFuture"}],"navigatorTitle":[{"kind":"identifier","text":"EventLoopFuture"}],"abstract":[{"type":"text","text":"Holder for a result that will be provided later."}],"role":"symbol","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/EventLoopFuture","title":"EventLoopFuture"},"doc://co.pointfree.VaporRouting/documentation/NIOPosix":{"type":"topic","title":"NIOPosix","url":"\/documentation\/nioposix","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOPosix","abstract":[],"kind":"symbol","role":"collection"},"doc://co.pointfree.VaporRouting/documentation/NIOPosix/NonBlockingFileIO/readChunked(fileHandle:fromOffset:byteCount:chunkSize:allocator:eventLoop:chunkHandler:)":{"role":"symbol","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"readChunked","kind":"identifier"},{"text":"(","kind":"text"},{"text":"fileHandle","kind":"externalParam"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:7NIOCore13NIOFileHandleC","text":"NIOFileHandle","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"fromOffset","kind":"externalParam"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:s5Int64V","text":"Int64","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"byteCount","kind":"externalParam"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:Si","text":"Int","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"chunkSize","kind":"externalParam"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:Si","text":"Int","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"allocator","kind":"externalParam"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:7NIOCore19ByteBufferAllocatorV","text":"ByteBufferAllocator","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"eventLoop","kind":"externalParam"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:7NIOCore9EventLoopP","text":"EventLoop","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"chunkHandler","kind":"externalParam"},{"text":": (","kind":"text"},{"preciseIdentifier":"s:7NIOCore10ByteBufferV","text":"ByteBuffer","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"preciseIdentifier":"s:7NIOCore15EventLoopFutureC","text":"EventLoopFuture","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"preciseIdentifier":"s:s4Voida","text":"Void","kind":"typeIdentifier"},{"text":">) -> ","kind":"text"},{"preciseIdentifier":"s:7NIOCore15EventLoopFutureC","text":"EventLoopFuture","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"preciseIdentifier":"s:s4Voida","text":"Void","kind":"typeIdentifier"},{"text":">","kind":"text"}],"abstract":[{"text":"Read ","type":"text"},{"code":"byteCount","type":"codeVoice"},{"text":" bytes from offset ","type":"text"},{"code":"fileOffset","type":"codeVoice"},{"type":"text","text":" in chunks of "},{"code":"chunkSize","type":"codeVoice"},{"type":"text","text":" bytes from "},{"code":"fileHandle","type":"codeVoice"},{"type":"text","text":" in "},{"code":"NonBlockingFileIO","type":"codeVoice"},{"type":"text","text":"â€™s private thread"},{"type":"text","text":" "},{"type":"text","text":"pool which is separate from any "},{"type":"codeVoice","code":"EventLoop"},{"type":"text","text":" thread."}],"url":"\/documentation\/nioposix\/nonblockingfileio\/readchunked(filehandle:fromoffset:bytecount:chunksize:allocator:eventloop:chunkhandler:)","kind":"symbol","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOPosix\/NonBlockingFileIO\/readChunked(fileHandle:fromOffset:byteCount:chunkSize:allocator:eventLoop:chunkHandler:)","type":"topic","title":"readChunked(fileHandle:fromOffset:byteCount:chunkSize:allocator:eventLoop:chunkHandler:)"}}}