{"hierarchy":{"paths":[["doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOPosix","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOPosix\/NonBlockingFileIO"]]},"identifier":{"url":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOPosix\/NonBlockingFileIO\/read(fileRegion:allocator:eventLoop:)","interfaceLanguage":"swift"},"schemaVersion":{"minor":3,"major":0,"patch":0},"primaryContentSections":[{"declarations":[{"platforms":["Linux"],"languages":["swift"],"tokens":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"read","kind":"identifier"},{"text":"(","kind":"text"},{"text":"fileRegion","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"FileRegion","preciseIdentifier":"s:7NIOCore10FileRegionV","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/FileRegion","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"allocator","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"ByteBufferAllocator","preciseIdentifier":"s:7NIOCore19ByteBufferAllocatorV","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/ByteBufferAllocator","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"eventLoop","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"EventLoop","preciseIdentifier":"s:7NIOCore9EventLoopP","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/EventLoop","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"text":"EventLoopFuture","preciseIdentifier":"s:7NIOCore15EventLoopFutureC","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/EventLoopFuture","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"text":"ByteBuffer","preciseIdentifier":"s:7NIOCore10ByteBufferV","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/ByteBuffer","kind":"typeIdentifier"},{"text":">","kind":"text"}]}],"kind":"declarations"},{"parameters":[{"content":[{"inlineContent":[{"type":"text","text":"The file region to read."}],"type":"paragraph"}],"name":"fileRegion"},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"A "},{"code":"ByteBufferAllocator","type":"codeVoice"},{"type":"text","text":" used to allocate space for the returned "},{"code":"ByteBuffer","type":"codeVoice"},{"type":"text","text":"."}]}],"name":"allocator"},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"EventLoop"},{"type":"text","text":" to create the returned "},{"type":"codeVoice","code":"EventLoopFuture"},{"type":"text","text":" from."}]}],"name":"eventLoop"}],"kind":"parameters"},{"content":[{"anchor":"return-value","text":"Return Value","level":2,"type":"heading"},{"inlineContent":[{"text":"An ","type":"text"},{"code":"EventLoopFuture","type":"codeVoice"},{"text":" which delivers a ","type":"text"},{"code":"ByteBuffer","type":"codeVoice"},{"text":" if the read was successful or a failure on error.","type":"text"}],"type":"paragraph"}],"kind":"content"},{"content":[{"type":"heading","anchor":"discussion","text":"Discussion","level":2},{"type":"paragraph","inlineContent":[{"type":"text","text":"The returned "},{"type":"codeVoice","code":"ByteBuffer"},{"type":"text","text":" will not have less than "},{"type":"codeVoice","code":"fileRegion.readableBytes"},{"type":"text","text":" unless we hit end-of-file in which"},{"type":"text","text":" "},{"type":"text","text":"case the "},{"type":"codeVoice","code":"ByteBuffer"},{"type":"text","text":" will contain the bytes available to read."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This method will not use the file descriptor’s seek pointer which means there is no danger of reading from the"},{"type":"text","text":" "},{"type":"text","text":"same "},{"code":"FileRegion","type":"codeVoice"},{"type":"text","text":" in multiple threads."}]},{"type":"aside","name":"Note","style":"note","content":[{"type":"paragraph","inlineContent":[{"text":"Only use this function for small enough ","type":"text"},{"code":"FileRegion","type":"codeVoice"},{"text":"s as it will need to allocate enough memory to hold ","type":"text"},{"code":"fileRegion.readableBytes","type":"codeVoice"},{"text":" bytes.","type":"text"}]}]},{"type":"aside","name":"Note","style":"note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"In most cases you should prefer one of the "},{"type":"codeVoice","code":"readChunked"},{"type":"text","text":" functions."}]}]}],"kind":"content"}],"metadata":{"externalID":"s:8NIOPosix17NonBlockingFileIOV4read10fileRegion9allocator9eventLoop7NIOCore05EventK6FutureCyAH10ByteBufferVGAH0dH0V_AH0oP9AllocatorVAH0mK0_ptF","role":"symbol","symbolKind":"method","title":"read(fileRegion:allocator:eventLoop:)","modules":[{"name":"NIOPosix"}],"roleHeading":"Instance Method","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"read"},{"kind":"text","text":"("},{"kind":"externalParam","text":"fileRegion"},{"kind":"text","text":": "},{"preciseIdentifier":"s:7NIOCore10FileRegionV","kind":"typeIdentifier","text":"FileRegion"},{"kind":"text","text":", "},{"kind":"externalParam","text":"allocator"},{"kind":"text","text":": "},{"preciseIdentifier":"s:7NIOCore19ByteBufferAllocatorV","kind":"typeIdentifier","text":"ByteBufferAllocator"},{"kind":"text","text":", "},{"text":"eventLoop","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"EventLoop","preciseIdentifier":"s:7NIOCore9EventLoopP","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"text":"EventLoopFuture","preciseIdentifier":"s:7NIOCore15EventLoopFutureC","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"text":"ByteBuffer","preciseIdentifier":"s:7NIOCore10ByteBufferV","kind":"typeIdentifier"},{"text":">","kind":"text"}]},"abstract":[{"text":"Read a ","type":"text"},{"code":"FileRegion","type":"codeVoice"},{"text":" in ","type":"text"},{"code":"NonBlockingFileIO","type":"codeVoice"},{"text":"’s private thread pool which is separate from any ","type":"text"},{"code":"EventLoop","type":"codeVoice"},{"text":" thread.","type":"text"}],"variants":[{"paths":["\/documentation\/nioposix\/nonblockingfileio\/read(fileregion:allocator:eventloop:)"],"traits":[{"interfaceLanguage":"swift"}]}],"kind":"symbol","sections":[],"references":{"doc://co.pointfree.VaporRouting/documentation/NIOPosix/NonBlockingFileIO/read(fileRegion:allocator:eventLoop:)":{"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOPosix\/NonBlockingFileIO\/read(fileRegion:allocator:eventLoop:)","url":"\/documentation\/nioposix\/nonblockingfileio\/read(fileregion:allocator:eventloop:)","type":"topic","title":"read(fileRegion:allocator:eventLoop:)","role":"symbol","kind":"symbol","abstract":[{"type":"text","text":"Read a "},{"type":"codeVoice","code":"FileRegion"},{"type":"text","text":" in "},{"code":"NonBlockingFileIO","type":"codeVoice"},{"type":"text","text":"’s private thread pool which is separate from any "},{"code":"EventLoop","type":"codeVoice"},{"type":"text","text":" thread."}],"fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"read"},{"kind":"text","text":"("},{"kind":"externalParam","text":"fileRegion"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:7NIOCore10FileRegionV","text":"FileRegion"},{"kind":"text","text":", "},{"kind":"externalParam","text":"allocator"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:7NIOCore19ByteBufferAllocatorV","text":"ByteBufferAllocator"},{"kind":"text","text":", "},{"kind":"externalParam","text":"eventLoop"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:7NIOCore9EventLoopP","text":"EventLoop"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","preciseIdentifier":"s:7NIOCore15EventLoopFutureC","text":"EventLoopFuture"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","preciseIdentifier":"s:7NIOCore10ByteBufferV","text":"ByteBuffer"},{"kind":"text","text":">"}]},"doc://co.pointfree.VaporRouting/documentation/NIOCore/ByteBufferAllocator":{"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/ByteBufferAllocator","url":"\/documentation\/niocore\/bytebufferallocator","type":"topic","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"ByteBufferAllocator"}],"title":"ByteBufferAllocator","navigatorTitle":[{"kind":"identifier","text":"ByteBufferAllocator"}],"abstract":[{"text":"The preferred allocator for ","type":"text"},{"code":"ByteBuffer","type":"codeVoice"},{"text":" values. The allocation strategy is opaque but is currently libc’s","type":"text"},{"text":" ","type":"text"},{"code":"malloc","type":"codeVoice"},{"text":", ","type":"text"},{"code":"realloc","type":"codeVoice"},{"text":" and ","type":"text"},{"code":"free","type":"codeVoice"},{"text":".","type":"text"}],"role":"symbol","kind":"symbol"},"doc://co.pointfree.VaporRouting/documentation/NIOPosix":{"type":"topic","title":"NIOPosix","url":"\/documentation\/nioposix","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOPosix","abstract":[],"kind":"symbol","role":"collection"},"doc://co.pointfree.VaporRouting/documentation/NIOCore/ByteBuffer":{"kind":"symbol","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/ByteBuffer","navigatorTitle":[{"kind":"identifier","text":"ByteBuffer"}],"title":"ByteBuffer","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"ByteBuffer"}],"role":"symbol","url":"\/documentation\/niocore\/bytebuffer","abstract":[{"code":"ByteBuffer","type":"codeVoice"},{"type":"text","text":" stores contiguously allocated raw bytes. It is a random and sequential accessible sequence of zero or"},{"type":"text","text":" "},{"type":"text","text":"more bytes (octets)."}],"type":"topic"},"doc://co.pointfree.VaporRouting/documentation/NIOCore/EventLoopFuture":{"url":"\/documentation\/niocore\/eventloopfuture","kind":"symbol","type":"topic","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"EventLoopFuture"}],"navigatorTitle":[{"kind":"identifier","text":"EventLoopFuture"}],"abstract":[{"type":"text","text":"Holder for a result that will be provided later."}],"role":"symbol","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/EventLoopFuture","title":"EventLoopFuture"},"doc://co.pointfree.VaporRouting/documentation/NIOCore/EventLoop":{"abstract":[{"type":"text","text":"An EventLoop processes IO \/ tasks in an endless loop for "},{"type":"codeVoice","code":"Channel"},{"type":"text","text":"s until it’s closed."}],"url":"\/documentation\/niocore\/eventloop","type":"topic","title":"EventLoop","role":"symbol","navigatorTitle":[{"text":"EventLoop","kind":"identifier"}],"fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"EventLoop","kind":"identifier"}],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/EventLoop","kind":"symbol"},"doc://co.pointfree.VaporRouting/documentation/NIOCore/FileRegion":{"navigatorTitle":[{"text":"FileRegion","kind":"identifier"}],"type":"topic","kind":"symbol","abstract":[{"text":"A ","type":"text"},{"code":"FileRegion","type":"codeVoice"},{"text":" represent a readable portion usually created to be sent over the network.","type":"text"}],"url":"\/documentation\/niocore\/fileregion","title":"FileRegion","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"FileRegion","kind":"identifier"}],"role":"symbol","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/FileRegion"},"doc://co.pointfree.VaporRouting/documentation/NIOPosix/NonBlockingFileIO":{"navigatorTitle":[{"kind":"identifier","text":"NonBlockingFileIO"}],"title":"NonBlockingFileIO","url":"\/documentation\/nioposix\/nonblockingfileio","abstract":[{"code":"NonBlockingFileIO","type":"codeVoice"},{"text":" is a helper that allows you to read files without blocking the calling thread.","type":"text"}],"fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"NonBlockingFileIO"}],"role":"symbol","kind":"symbol","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOPosix\/NonBlockingFileIO","type":"topic"}}}