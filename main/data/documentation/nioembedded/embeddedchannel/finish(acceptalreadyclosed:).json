{"hierarchy":{"paths":[["doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOEmbedded","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOEmbedded\/EmbeddedChannel"]]},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/nioembedded\/embeddedchannel\/finish(acceptalreadyclosed:)"]}],"schemaVersion":{"minor":3,"patch":0,"major":0},"kind":"symbol","primaryContentSections":[{"kind":"declarations","declarations":[{"languages":["swift"],"platforms":["Linux"],"tokens":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"finish","kind":"identifier"},{"text":"(","kind":"text"},{"text":"acceptAlreadyClosed","kind":"externalParam"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:Sb","text":"Bool","kind":"typeIdentifier"},{"text":") ","kind":"text"},{"text":"throws","kind":"keyword"},{"text":" -> ","kind":"text"},{"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOEmbedded\/EmbeddedChannel","preciseIdentifier":"s:11NIOEmbedded15EmbeddedChannelC","text":"EmbeddedChannel","kind":"typeIdentifier"},{"text":".","kind":"text"},{"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOEmbedded\/EmbeddedChannel\/LeftOverState","preciseIdentifier":"s:11NIOEmbedded15EmbeddedChannelC13LeftOverStateO","text":"LeftOverState","kind":"typeIdentifier"}]}]},{"kind":"parameters","parameters":[{"content":[{"inlineContent":[{"type":"text","text":"Whether "},{"type":"codeVoice","code":"finish"},{"type":"text","text":" should throw if the "},{"type":"codeVoice","code":"EmbeddedChannel"},{"type":"text","text":" has been previously "},{"type":"codeVoice","code":"close"},{"type":"text","text":"d."}],"type":"paragraph"}],"name":"acceptAlreadyClosed"}]},{"kind":"content","content":[{"level":2,"anchor":"return-value","type":"heading","text":"Return Value"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"code":"LeftOverState","type":"codeVoice"},{"type":"text","text":" of the "},{"code":"EmbeddedChannel","type":"codeVoice"},{"type":"text","text":". If all the inbound and outbound events have been"},{"type":"text","text":" "},{"type":"text","text":"consumed (using "},{"code":"readInbound","type":"codeVoice"},{"type":"text","text":" \/ "},{"code":"readOutbound","type":"codeVoice"},{"type":"text","text":") and there are no pending outbound events (unflushed"},{"type":"text","text":" "},{"type":"text","text":"writes) this will be "},{"code":".clean","type":"codeVoice"},{"type":"text","text":". If there are any unconsumed inbound, outbound, or pending outbound"},{"type":"text","text":" "},{"type":"text","text":"events, the "},{"code":"EmbeddedChannel","type":"codeVoice"},{"type":"text","text":" will returns those as "},{"code":".leftOvers(inbound:outbound:pendingOutbound:)","type":"codeVoice"},{"type":"text","text":"."}]}]},{"kind":"content","content":[{"level":2,"anchor":"discussion","type":"heading","text":"Discussion"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Errors in the "},{"type":"codeVoice","code":"EmbeddedChannel"},{"type":"text","text":" can be consumed using "},{"type":"codeVoice","code":"throwIfErrorCaught"},{"type":"text","text":"."}]}]}],"sections":[],"metadata":{"modules":[{"name":"NIOEmbedded"}],"role":"symbol","symbolKind":"method","roleHeading":"Instance Method","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"finish"},{"kind":"text","text":"("},{"kind":"externalParam","text":"acceptAlreadyClosed"},{"text":": ","kind":"text"},{"text":"Bool","kind":"typeIdentifier","preciseIdentifier":"s:Sb"},{"text":") ","kind":"text"},{"text":"throws","kind":"keyword"},{"text":" -> ","kind":"text"},{"text":"EmbeddedChannel","kind":"typeIdentifier","preciseIdentifier":"s:11NIOEmbedded15EmbeddedChannelC"},{"text":".","kind":"text"},{"text":"LeftOverState","kind":"typeIdentifier","preciseIdentifier":"s:11NIOEmbedded15EmbeddedChannelC13LeftOverStateO"}],"title":"finish(acceptAlreadyClosed:)","externalID":"s:11NIOEmbedded15EmbeddedChannelC6finish19acceptAlreadyClosedAC13LeftOverStateOSb_tKF"},"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOEmbedded\/EmbeddedChannel\/finish(acceptAlreadyClosed:)"},"abstract":[{"text":"Synchronously closes the ","type":"text"},{"type":"codeVoice","code":"EmbeddedChannel"},{"text":".","type":"text"}],"references":{"doc://co.pointfree.VaporRouting/documentation/NIOEmbedded/EmbeddedChannel":{"title":"EmbeddedChannel","role":"symbol","type":"topic","url":"\/documentation\/nioembedded\/embeddedchannel","abstract":[{"type":"codeVoice","code":"EmbeddedChannel"},{"type":"text","text":" is a "},{"code":"Channel","type":"codeVoice"},{"text":" implementation that does neither any","type":"text"},{"text":" ","type":"text"},{"text":"actual IO nor has a proper eventing mechanism. The prime use-case for","type":"text"},{"text":" ","type":"text"},{"type":"codeVoice","code":"EmbeddedChannel"},{"type":"text","text":" is in unit tests when you want to feed the inbound events"},{"type":"text","text":" "},{"type":"text","text":"and check the outbound events manually."}],"kind":"symbol","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOEmbedded\/EmbeddedChannel","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"EmbeddedChannel"}],"navigatorTitle":[{"kind":"identifier","text":"EmbeddedChannel"}]},"doc://co.pointfree.VaporRouting/documentation/NIOEmbedded/EmbeddedChannel/LeftOverState":{"kind":"symbol","fragments":[{"text":"enum","kind":"keyword"},{"text":" ","kind":"text"},{"text":"LeftOverState","kind":"identifier"}],"type":"topic","navigatorTitle":[{"text":"LeftOverState","kind":"identifier"}],"title":"EmbeddedChannel.LeftOverState","role":"symbol","url":"\/documentation\/nioembedded\/embeddedchannel\/leftoverstate","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOEmbedded\/EmbeddedChannel\/LeftOverState","abstract":[{"type":"codeVoice","code":"LeftOverState"},{"text":" represents any left-over inbound, outbound, and pending outbound events that hit the","type":"text"},{"text":" ","type":"text"},{"type":"codeVoice","code":"EmbeddedChannel"},{"text":" and were not consumed when ","type":"text"},{"type":"codeVoice","code":"finish"},{"type":"text","text":" was called on the "},{"type":"codeVoice","code":"EmbeddedChannel"},{"type":"text","text":"."}]},"doc://co.pointfree.VaporRouting/documentation/NIOEmbedded":{"type":"topic","abstract":[],"url":"\/documentation\/nioembedded","title":"NIOEmbedded","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOEmbedded","kind":"symbol","role":"collection"},"doc://co.pointfree.VaporRouting/documentation/NIOEmbedded/EmbeddedChannel/finish(acceptAlreadyClosed:)":{"kind":"symbol","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"finish","kind":"identifier"},{"text":"(","kind":"text"},{"text":"acceptAlreadyClosed","kind":"externalParam"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:Sb","text":"Bool"},{"kind":"text","text":") "},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","preciseIdentifier":"s:11NIOEmbedded15EmbeddedChannelC","text":"EmbeddedChannel"},{"kind":"text","text":"."},{"kind":"typeIdentifier","preciseIdentifier":"s:11NIOEmbedded15EmbeddedChannelC13LeftOverStateO","text":"LeftOverState"}],"type":"topic","title":"finish(acceptAlreadyClosed:)","role":"symbol","url":"\/documentation\/nioembedded\/embeddedchannel\/finish(acceptalreadyclosed:)","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOEmbedded\/EmbeddedChannel\/finish(acceptAlreadyClosed:)","abstract":[{"text":"Synchronously closes the ","type":"text"},{"type":"codeVoice","code":"EmbeddedChannel"},{"text":".","type":"text"}]}}}